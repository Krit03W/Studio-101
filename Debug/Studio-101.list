
Studio-101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006230  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006448  08006448  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006450  08006450  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006450  08006450  00016450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000010  08006464  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08006464  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e47  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024d0  00000000  00000000  00032ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00035398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0d  00000000  00000000  00036438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026486  00000000  00000000  00037145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013506  00000000  00000000  0005d5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbfb4  00000000  00000000  00070ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000482c  00000000  00000000  0016ca88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001712b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080063f0 	.word	0x080063f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080063f0 	.word	0x080063f0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b970 	b.w	8000d9c <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9e08      	ldr	r6, [sp, #32]
 8000ada:	460d      	mov	r5, r1
 8000adc:	4604      	mov	r4, r0
 8000ade:	460f      	mov	r7, r1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d14a      	bne.n	8000b7a <__udivmoddi4+0xa6>
 8000ae4:	428a      	cmp	r2, r1
 8000ae6:	4694      	mov	ip, r2
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0xe2>
 8000aea:	fab2 f382 	clz	r3, r2
 8000aee:	b143      	cbz	r3, 8000b02 <__udivmoddi4+0x2e>
 8000af0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000af4:	f1c3 0220 	rsb	r2, r3, #32
 8000af8:	409f      	lsls	r7, r3
 8000afa:	fa20 f202 	lsr.w	r2, r0, r2
 8000afe:	4317      	orrs	r7, r2
 8000b00:	409c      	lsls	r4, r3
 8000b02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b06:	fa1f f58c 	uxth.w	r5, ip
 8000b0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b0e:	0c22      	lsrs	r2, r4, #16
 8000b10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b18:	fb01 f005 	mul.w	r0, r1, r5
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	d90a      	bls.n	8000b36 <__udivmoddi4+0x62>
 8000b20:	eb1c 0202 	adds.w	r2, ip, r2
 8000b24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b28:	f080 811c 	bcs.w	8000d64 <__udivmoddi4+0x290>
 8000b2c:	4290      	cmp	r0, r2
 8000b2e:	f240 8119 	bls.w	8000d64 <__udivmoddi4+0x290>
 8000b32:	3902      	subs	r1, #2
 8000b34:	4462      	add	r2, ip
 8000b36:	1a12      	subs	r2, r2, r0
 8000b38:	b2a4      	uxth	r4, r4
 8000b3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b46:	fb00 f505 	mul.w	r5, r0, r5
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	d90a      	bls.n	8000b64 <__udivmoddi4+0x90>
 8000b4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b56:	f080 8107 	bcs.w	8000d68 <__udivmoddi4+0x294>
 8000b5a:	42a5      	cmp	r5, r4
 8000b5c:	f240 8104 	bls.w	8000d68 <__udivmoddi4+0x294>
 8000b60:	4464      	add	r4, ip
 8000b62:	3802      	subs	r0, #2
 8000b64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b68:	1b64      	subs	r4, r4, r5
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	b11e      	cbz	r6, 8000b76 <__udivmoddi4+0xa2>
 8000b6e:	40dc      	lsrs	r4, r3
 8000b70:	2300      	movs	r3, #0
 8000b72:	e9c6 4300 	strd	r4, r3, [r6]
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0xbc>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	f000 80ed 	beq.w	8000d5e <__udivmoddi4+0x28a>
 8000b84:	2100      	movs	r1, #0
 8000b86:	e9c6 0500 	strd	r0, r5, [r6]
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b90:	fab3 f183 	clz	r1, r3
 8000b94:	2900      	cmp	r1, #0
 8000b96:	d149      	bne.n	8000c2c <__udivmoddi4+0x158>
 8000b98:	42ab      	cmp	r3, r5
 8000b9a:	d302      	bcc.n	8000ba2 <__udivmoddi4+0xce>
 8000b9c:	4282      	cmp	r2, r0
 8000b9e:	f200 80f8 	bhi.w	8000d92 <__udivmoddi4+0x2be>
 8000ba2:	1a84      	subs	r4, r0, r2
 8000ba4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba8:	2001      	movs	r0, #1
 8000baa:	4617      	mov	r7, r2
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d0e2      	beq.n	8000b76 <__udivmoddi4+0xa2>
 8000bb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000bb4:	e7df      	b.n	8000b76 <__udivmoddi4+0xa2>
 8000bb6:	b902      	cbnz	r2, 8000bba <__udivmoddi4+0xe6>
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	fab2 f382 	clz	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 8090 	bne.w	8000ce4 <__udivmoddi4+0x210>
 8000bc4:	1a8a      	subs	r2, r1, r2
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd8:	0c22      	lsrs	r2, r4, #16
 8000bda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bde:	fb0e f005 	mul.w	r0, lr, r5
 8000be2:	4290      	cmp	r0, r2
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x124>
 8000be6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x122>
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2b8>
 8000bf6:	4645      	mov	r5, r8
 8000bf8:	1a12      	subs	r2, r2, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c00:	fb07 2210 	mls	r2, r7, r0, r2
 8000c04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x14e>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x14c>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2c2>
 8000c20:	4610      	mov	r0, r2
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c2a:	e79f      	b.n	8000b6c <__udivmoddi4+0x98>
 8000c2c:	f1c1 0720 	rsb	r7, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c42:	40fd      	lsrs	r5, r7
 8000c44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c48:	4323      	orrs	r3, r4
 8000c4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c4e:	fa1f fe8c 	uxth.w	lr, ip
 8000c52:	fb09 5518 	mls	r5, r9, r8, r5
 8000c56:	0c1c      	lsrs	r4, r3, #16
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	fa02 f201 	lsl.w	r2, r2, r1
 8000c66:	fa00 f001 	lsl.w	r0, r0, r1
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b0>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2b4>
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2b4>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4464      	add	r4, ip
 8000c84:	1b64      	subs	r4, r4, r5
 8000c86:	b29d      	uxth	r5, r3
 8000c88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1da>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2ac>
 8000ca6:	45a6      	cmp	lr, r4
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2ac>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	4464      	add	r4, ip
 8000cae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000cb6:	eba4 040e 	sub.w	r4, r4, lr
 8000cba:	42ac      	cmp	r4, r5
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46ae      	mov	lr, r5
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x29c>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x298>
 8000cc4:	b156      	cbz	r6, 8000cdc <__udivmoddi4+0x208>
 8000cc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cca:	eb64 040e 	sbc.w	r4, r4, lr
 8000cce:	fa04 f707 	lsl.w	r7, r4, r7
 8000cd2:	40ca      	lsrs	r2, r1
 8000cd4:	40cc      	lsrs	r4, r1
 8000cd6:	4317      	orrs	r7, r2
 8000cd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	f1c3 0120 	rsb	r1, r3, #32
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000cf4:	409d      	lsls	r5, r3
 8000cf6:	432a      	orrs	r2, r5
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1510 	mls	r5, r7, r0, r1
 8000d08:	0c11      	lsrs	r1, r2, #16
 8000d0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d12:	428d      	cmp	r5, r1
 8000d14:	fa04 f403 	lsl.w	r4, r4, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x258>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b0>
 8000d24:	428d      	cmp	r5, r1
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b0>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4461      	add	r1, ip
 8000d2c:	1b49      	subs	r1, r1, r5
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d34:	fb07 1115 	mls	r1, r7, r5, r1
 8000d38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d40:	4291      	cmp	r1, r2
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x282>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2a8>
 8000d4e:	4291      	cmp	r1, r2
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2a8>
 8000d52:	3d02      	subs	r5, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a52      	subs	r2, r2, r1
 8000d58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0xfc>
 8000d5e:	4631      	mov	r1, r6
 8000d60:	4630      	mov	r0, r6
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xa2>
 8000d64:	4639      	mov	r1, r7
 8000d66:	e6e6      	b.n	8000b36 <__udivmoddi4+0x62>
 8000d68:	4610      	mov	r0, r2
 8000d6a:	e6fb      	b.n	8000b64 <__udivmoddi4+0x90>
 8000d6c:	4548      	cmp	r0, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f0>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f0>
 8000d7c:	4645      	mov	r5, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x282>
 8000d80:	462b      	mov	r3, r5
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1da>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x258>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b0>
 8000d8c:	3d02      	subs	r5, #2
 8000d8e:	4462      	add	r2, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x124>
 8000d92:	4608      	mov	r0, r1
 8000d94:	e70a      	b.n	8000bac <__udivmoddi4+0xd8>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x14e>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da6:	f000 ff40 	bl	8001c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000daa:	f000 f8e7 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dae:	f000 fb0d 	bl	80013cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000db2:	f000 fae1 	bl	8001378 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000db6:	f000 f92d 	bl	8001014 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000dba:	f000 f9c1 	bl	8001140 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000dbe:	f000 f973 	bl	80010a8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000dc2:	f000 fa35 	bl	8001230 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000dc6:	f000 fa89 	bl	80012dc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  UARTDMAConfig();
 8000dca:	f000 fba7 	bl	800151c <UARTDMAConfig>
  HAL_TIM_Base_Start(&htim3);
 8000dce:	485e      	ldr	r0, [pc, #376]	; (8000f48 <main+0x1a8>)
 8000dd0:	f002 fd7c 	bl	80038cc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	485c      	ldr	r0, [pc, #368]	; (8000f48 <main+0x1a8>)
 8000dd8:	f002 fec2 	bl	8003b60 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000ddc:	213c      	movs	r1, #60	; 0x3c
 8000dde:	485b      	ldr	r0, [pc, #364]	; (8000f4c <main+0x1ac>)
 8000de0:	f003 f876 	bl	8003ed0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000de4:	485a      	ldr	r0, [pc, #360]	; (8000f50 <main+0x1b0>)
 8000de6:	f002 fde1 	bl	80039ac <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	4859      	ldr	r0, [pc, #356]	; (8000f54 <main+0x1b4>)
 8000df0:	f001 fca8 	bl	8002744 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  z_transition();
//	  update_position();
	  sensor1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 fc8a 	bl	8002714 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <main+0x1b8>)
 8000e06:	701a      	strb	r2, [r3, #0]
	  sensor2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f001 fc80 	bl	8002714 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b50      	ldr	r3, [pc, #320]	; (8000f5c <main+0x1bc>)
 8000e1a:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e20:	484f      	ldr	r0, [pc, #316]	; (8000f60 <main+0x1c0>)
 8000e22:	f001 fc77 	bl	8002714 <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <main+0x92>
		  mode = 1;
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <main+0x1c4>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
	  }
	  if(mode == 1){
 8000e32:	4b4c      	ldr	r3, [pc, #304]	; (8000f64 <main+0x1c4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d140      	bne.n	8000ebc <main+0x11c>
		  if(sensor1 == 0 && n == 0){
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <main+0x1b8>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10e      	bne.n	8000e60 <main+0xc0>
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <main+0x1c8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10a      	bne.n	8000e60 <main+0xc0>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	4841      	ldr	r0, [pc, #260]	; (8000f54 <main+0x1b4>)
 8000e50:	f001 fc78 	bl	8002744 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*4/5.0);
 8000e54:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <main+0x1a8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f240 321f 	movw	r2, #799	; 0x31f
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e5e:	e02d      	b.n	8000ebc <main+0x11c>
		  }
		  else if(sensor1 == 1){
 8000e60:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <main+0x1b8>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d103      	bne.n	8000e70 <main+0xd0>
			  n = 1;
 8000e68:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <main+0x1c8>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e025      	b.n	8000ebc <main+0x11c>
		  }
		  else if(sensor2 == 0 && n == 1){
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <main+0x1bc>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10e      	bne.n	8000e96 <main+0xf6>
 8000e78:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <main+0x1c8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d10a      	bne.n	8000e96 <main+0xf6>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	4833      	ldr	r0, [pc, #204]	; (8000f54 <main+0x1b4>)
 8000e86:	f001 fc5d 	bl	8002744 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*4/5.0);
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <main+0x1a8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f240 321f 	movw	r2, #799	; 0x31f
 8000e92:	639a      	str	r2, [r3, #56]	; 0x38
 8000e94:	e012      	b.n	8000ebc <main+0x11c>
		  }
		  else if(sensor2 == 1){
 8000e96:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <main+0x1bc>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d10e      	bne.n	8000ebc <main+0x11c>
			  mode = 0;
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <main+0x1c4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
			  n = 0;
 8000ea4:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <main+0x1c8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2140      	movs	r1, #64	; 0x40
 8000eae:	4829      	ldr	r0, [pc, #164]	; (8000f54 <main+0x1b4>)
 8000eb0:	f001 fc48 	bl	8002744 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <main+0x1a8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
		  }
	  }

//	  //Call every 0.1 s
	  static uint64_t timestamp =0;
	  int64_t currentTime = micros();
 8000ebc:	f000 fb56 	bl	800156c <micros>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTime > timestamp)
 8000ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ecc:	4927      	ldr	r1, [pc, #156]	; (8000f6c <main+0x1cc>)
 8000ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	eb71 0303 	sbcs.w	r3, r1, r3
 8000ed8:	d20c      	bcs.n	8000ef4 <main+0x154>
	  {
		  timestamp =currentTime + 100000;//us
 8000eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ede:	4924      	ldr	r1, [pc, #144]	; (8000f70 <main+0x1d0>)
 8000ee0:	1854      	adds	r4, r2, r1
 8000ee2:	f143 0500 	adc.w	r5, r3, #0
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	462b      	mov	r3, r5
 8000eea:	4920      	ldr	r1, [pc, #128]	; (8000f6c <main+0x1cc>)
 8000eec:	e9c1 2300 	strd	r2, r3, [r1]
		  QEIEncoderPosVel_Update();
 8000ef0:	f000 fb56 	bl	80015a0 <QEIEncoderPosVel_Update>
	  }
	  linear_position = velocity*14/2.0/M_PI;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <main+0x1d4>)
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	ee17 0a90 	vmov	r0, s15
 8000f06:	f7ff faeb 	bl	80004e0 <__aeabi_f2d>
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f12:	f7ff fc67 	bl	80007e4 <__aeabi_ddiv>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	a308      	add	r3, pc, #32	; (adr r3, 8000f40 <main+0x1a0>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f7ff fc5e 	bl	80007e4 <__aeabi_ddiv>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f7ff fd68 	bl	8000a04 <__aeabi_d2f>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <main+0x1d8>)
 8000f38:	6013      	str	r3, [r2, #0]
  {
 8000f3a:	e75b      	b.n	8000df4 <main+0x54>
 8000f3c:	f3af 8000 	nop.w
 8000f40:	54442d18 	.word	0x54442d18
 8000f44:	400921fb 	.word	0x400921fb
 8000f48:	200001b4 	.word	0x200001b4
 8000f4c:	20000200 	.word	0x20000200
 8000f50:	2000024c 	.word	0x2000024c
 8000f54:	48000400 	.word	0x48000400
 8000f58:	200002a2 	.word	0x200002a2
 8000f5c:	200002a3 	.word	0x200002a3
 8000f60:	48000800 	.word	0x48000800
 8000f64:	200002e8 	.word	0x200002e8
 8000f68:	200002e4 	.word	0x200002e4
 8000f6c:	200002f0 	.word	0x200002f0
 8000f70:	000186a0 	.word	0x000186a0
 8000f74:	200002d0 	.word	0x200002d0
 8000f78:	200002ec 	.word	0x200002ec

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	2238      	movs	r2, #56	; 0x38
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fa04 	bl	8006398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f001 fc0c 	bl	80027bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fae:	2340      	movs	r3, #64	; 0x40
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fbe:	2355      	movs	r3, #85	; 0x55
 8000fc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fca6 	bl	8002924 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fde:	f000 fbfd 	bl	80017dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 ffa4 	bl	8002f48 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001006:	f000 fbe9 	bl	80017dc <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	; 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 800101a:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 800101c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 8001052:	2200      	movs	r2, #0
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 8001058:	f004 f8e6 	bl	8005228 <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001062:	f000 fbbb 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 800106a:	f005 f8ca 	bl	8006202 <HAL_UARTEx_SetTxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001074:	f000 fbb2 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	4809      	ldr	r0, [pc, #36]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 800107c:	f005 f8ff 	bl	800627e <HAL_UARTEx_SetRxFifoThreshold>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001086:	f000 fba9 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_LPUART1_UART_Init+0x8c>)
 800108c:	f005 f880 	bl	8006190 <HAL_UARTEx_DisableFifoMode>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001096:	f000 fba1 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000002c 	.word	0x2000002c
 80010a4:	40008000 	.word	0x40008000

080010a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010ae:	4a23      	ldr	r2, [pc, #140]	; (800113c <MX_USART1_UART_Init+0x94>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010b4:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80010b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <MX_USART1_UART_Init+0x90>)
 80010f2:	f004 f899 	bl	8005228 <HAL_UART_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010fc:	f000 fb6e 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001100:	2100      	movs	r1, #0
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_USART1_UART_Init+0x90>)
 8001104:	f005 f87d 	bl	8006202 <HAL_UARTEx_SetTxFifoThreshold>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800110e:	f000 fb65 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001112:	2100      	movs	r1, #0
 8001114:	4808      	ldr	r0, [pc, #32]	; (8001138 <MX_USART1_UART_Init+0x90>)
 8001116:	f005 f8b2 	bl	800627e <HAL_UARTEx_SetRxFifoThreshold>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001120:	f000 fb5c 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_USART1_UART_Init+0x90>)
 8001126:	f005 f833 	bl	8006190 <HAL_UARTEx_DisableFifoMode>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001130:	f000 fb54 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200000c0 	.word	0x200000c0
 800113c:	40013800 	.word	0x40013800

08001140 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	; 0x38
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001160:	463b      	mov	r3, r7
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	615a      	str	r2, [r3, #20]
 8001170:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <MX_TIM3_Init+0xe8>)
 8001174:	4a2d      	ldr	r2, [pc, #180]	; (800122c <MX_TIM3_Init+0xec>)
 8001176:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_TIM3_Init+0xe8>)
 800117a:	22a9      	movs	r2, #169	; 0xa9
 800117c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_TIM3_Init+0xe8>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_TIM3_Init+0xe8>)
 8001186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800118a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_TIM3_Init+0xe8>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_TIM3_Init+0xe8>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001198:	4823      	ldr	r0, [pc, #140]	; (8001228 <MX_TIM3_Init+0xe8>)
 800119a:	f002 fb3f 	bl	800381c <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011a4:	f000 fb1a 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b2:	4619      	mov	r1, r3
 80011b4:	481c      	ldr	r0, [pc, #112]	; (8001228 <MX_TIM3_Init+0xe8>)
 80011b6:	f003 f97d 	bl	80044b4 <HAL_TIM_ConfigClockSource>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011c0:	f000 fb0c 	bl	80017dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011c4:	4818      	ldr	r0, [pc, #96]	; (8001228 <MX_TIM3_Init+0xe8>)
 80011c6:	f002 fc69 	bl	8003a9c <HAL_TIM_PWM_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011d0:	f000 fb04 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_TIM3_Init+0xe8>)
 80011e4:	f003 ff44 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011ee:	f000 faf5 	bl	80017dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f2:	2360      	movs	r3, #96	; 0x60
 80011f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	2204      	movs	r2, #4
 8001206:	4619      	mov	r1, r3
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <MX_TIM3_Init+0xe8>)
 800120a:	f003 f83f 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001214:	f000 fae2 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <MX_TIM3_Init+0xe8>)
 800121a:	f000 fc4d 	bl	8001ab8 <HAL_TIM_MspPostInit>

}
 800121e:	bf00      	nop
 8001220:	3738      	adds	r7, #56	; 0x38
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200001b4 	.word	0x200001b4
 800122c:	40000400 	.word	0x40000400

08001230 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	; 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f005 f8aa 	bl	8006398 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_TIM4_Init+0xa4>)
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <MX_TIM4_Init+0xa8>)
 8001252:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <MX_TIM4_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_TIM4_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63487;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_TIM4_Init+0xa4>)
 8001262:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8001266:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_TIM4_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_TIM4_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001274:	2303      	movs	r3, #3
 8001276:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127c:	2301      	movs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128c:	2301      	movs	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <MX_TIM4_Init+0xa4>)
 80012a0:	f002 fd70 	bl	8003d84 <HAL_TIM_Encoder_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012aa:	f000 fa97 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <MX_TIM4_Init+0xa4>)
 80012bc:	f003 fed8 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012c6:	f000 fa89 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3730      	adds	r7, #48	; 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000200 	.word	0x20000200
 80012d8:	40000800 	.word	0x40000800

080012dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM5_Init+0x94>)
 80012fc:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <MX_TIM5_Init+0x98>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_TIM5_Init+0x94>)
 8001302:	22a9      	movs	r2, #169	; 0xa9
 8001304:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM5_Init+0x94>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM5_Init+0x94>)
 800130e:	f04f 32ff 	mov.w	r2, #4294967295
 8001312:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_TIM5_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM5_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <MX_TIM5_Init+0x94>)
 8001322:	f002 fa7b 	bl	800381c <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800132c:	f000 fa56 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_TIM5_Init+0x94>)
 800133e:	f003 f8b9 	bl	80044b4 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001348:	f000 fa48 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM5_Init+0x94>)
 800135a:	f003 fe89 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001364:	f000 fa3a 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000024c 	.word	0x2000024c
 8001374:	40000c00 	.word	0x40000c00

08001378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_DMA_Init+0x50>)
 8001380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <MX_DMA_Init+0x50>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6493      	str	r3, [r2, #72]	; 0x48
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_DMA_Init+0x50>)
 800138c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_DMA_Init+0x50>)
 8001398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <MX_DMA_Init+0x50>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6493      	str	r3, [r2, #72]	; 0x48
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_DMA_Init+0x50>)
 80013a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	200b      	movs	r0, #11
 80013b4:	f000 fd85 	bl	8001ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b8:	200b      	movs	r0, #11
 80013ba:	f000 fd9c 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <MX_GPIO_Init+0x118>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <MX_GPIO_Init+0x118>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <MX_GPIO_Init+0x118>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <MX_GPIO_Init+0x118>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a39      	ldr	r2, [pc, #228]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001400:	f043 0320 	orr.w	r3, r3, #32
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a33      	ldr	r2, [pc, #204]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <MX_GPIO_Init+0x118>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a2d      	ldr	r2, [pc, #180]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2120      	movs	r1, #32
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f001 f97b 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	4825      	ldr	r0, [pc, #148]	; (80014e8 <MX_GPIO_Init+0x11c>)
 8001454:	f001 f976 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	481f      	ldr	r0, [pc, #124]	; (80014ec <MX_GPIO_Init+0x120>)
 8001470:	f000 ffce 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001474:	2320      	movs	r3, #32
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f000 ffbf 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001492:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014aa:	f000 ffb1 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ae:	2340      	movs	r3, #64	; 0x40
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <MX_GPIO_Init+0x11c>)
 80014c6:	f000 ffa3 	bl	8002410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2028      	movs	r0, #40	; 0x28
 80014d0:	f000 fcf7 	bl	8001ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d4:	2028      	movs	r0, #40	; 0x28
 80014d6:	f000 fd0e 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800

080014f0 <HAL_UART_RxCpltCallback>:
	}
	z_diff_position = z_target_position - position;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_UART_RxCpltCallback+0x24>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d102      	bne.n	8001506 <HAL_UART_RxCpltCallback+0x16>
		{
			//(for string only) Add string stop symbol \0 to end string
			RxBuffer[9] = '\0';
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_UART_RxCpltCallback+0x28>)
 8001502:	2200      	movs	r2, #0
 8001504:	725a      	strb	r2, [r3, #9]
		}
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200000c0 	.word	0x200000c0
 8001518:	20000298 	.word	0x20000298

0800151c <UARTDMAConfig>:

void UARTDMAConfig()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	//start UART in DMA mode
	HAL_UART_Receive_DMA(&huart1, RxBuffer,9);
 8001520:	2209      	movs	r2, #9
 8001522:	4903      	ldr	r1, [pc, #12]	; (8001530 <UARTDMAConfig+0x14>)
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <UARTDMAConfig+0x18>)
 8001526:	f003 fecf 	bl	80052c8 <HAL_UART_Receive_DMA>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000298 	.word	0x20000298
 8001534:	200000c0 	.word	0x200000c0

08001538 <HAL_TIM_PeriodElapsedCallback>:
	z_floor[RxBuffer[(a+7)%9]-'0'-1] = z_target_position;
}

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001538:	b4b0      	push	{r4, r5, r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d108      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	1e54      	subs	r4, r2, #1
 8001550:	f143 0500 	adc.w	r5, r3, #0
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001556:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bcb0      	pop	{r4, r5, r7}
 8001562:	4770      	bx	lr
 8001564:	2000024c 	.word	0x2000024c
 8001568:	200002c8 	.word	0x200002c8

0800156c <micros>:

uint64_t micros()
{
 800156c:	b4b0      	push	{r4, r5, r7}
 800156e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <micros+0x2c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	2200      	movs	r2, #0
 8001578:	4618      	mov	r0, r3
 800157a:	4611      	mov	r1, r2
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <micros+0x30>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	1884      	adds	r4, r0, r2
 8001584:	eb41 0503 	adc.w	r5, r1, r3
 8001588:	4622      	mov	r2, r4
 800158a:	462b      	mov	r3, r5
}
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	bcb0      	pop	{r4, r5, r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2000024c 	.word	0x2000024c
 800159c:	200002c8 	.word	0x200002c8

080015a0 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 80015a6:	f7ff ffe1 	bl	800156c <micros>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4982      	ldr	r1, [pc, #520]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 80015b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 80015b4:	4b81      	ldr	r3, [pc, #516]	; (80017bc <QEIEncoderPosVel_Update+0x21c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	4a7f      	ldr	r2, [pc, #508]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 80015bc:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 2048;
 80015be:	4b7e      	ldr	r3, [pc, #504]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ce:	4b7a      	ldr	r3, [pc, #488]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 80015d0:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 80015d4:	4b78      	ldr	r3, [pc, #480]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b77      	ldr	r3, [pc, #476]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > 31744){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 80015e6:	dd08      	ble.n	80015fa <QEIEncoderPosVel_Update+0x5a>
		diffPosition -=63488;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 80015ee:	607b      	str	r3, [r7, #4]
		counter--;
 80015f0:	4b73      	ldr	r3, [pc, #460]	; (80017c0 <QEIEncoderPosVel_Update+0x220>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	4a72      	ldr	r2, [pc, #456]	; (80017c0 <QEIEncoderPosVel_Update+0x220>)
 80015f8:	6013      	str	r3, [r2, #0]
	}
	if(diffPosition < -31744){
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f513 4ff8 	cmn.w	r3, #31744	; 0x7c00
 8001600:	da08      	bge.n	8001614 <QEIEncoderPosVel_Update+0x74>
		diffPosition +=63488;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8001608:	607b      	str	r3, [r7, #4]
		counter++;
 800160a:	4b6d      	ldr	r3, [pc, #436]	; (80017c0 <QEIEncoderPosVel_Update+0x220>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	4a6b      	ldr	r2, [pc, #428]	; (80017c0 <QEIEncoderPosVel_Update+0x220>)
 8001612:	6013      	str	r3, [r2, #0]
	}
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8001614:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 8001616:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800161a:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 800161c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001620:	1a84      	subs	r4, r0, r2
 8001622:	eb61 0503 	sbc.w	r5, r1, r3
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7fe ff7b 	bl	8000524 <__aeabi_ul2d>
 800162e:	a35c      	add	r3, pc, #368	; (adr r3, 80017a0 <QEIEncoderPosVel_Update+0x200>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe ffac 	bl	8000590 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff f9e0 	bl	8000a04 <__aeabi_d2f>
 8001644:	4603      	mov	r3, r0
 8001646:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001652:	ed97 7a00 	vldr	s14, [r7]
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165a:	4b57      	ldr	r3, [pc, #348]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 800165c:	edc3 7a07 	vstr	s15, [r3, #28]

	velocity = QEIdata.QEIAngularVelocity/2048.0*2*M_PI;
 8001660:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff3b 	bl	80004e0 <__aeabi_f2d>
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <QEIEncoderPosVel_Update+0x224>)
 8001670:	f7ff f8b8 	bl	80007e4 <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	f7fe fdd0 	bl	8000224 <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	a346      	add	r3, pc, #280	; (adr r3, 80017a8 <QEIEncoderPosVel_Update+0x208>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ff7d 	bl	8000590 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff f9b1 	bl	8000a04 <__aeabi_d2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <QEIEncoderPosVel_Update+0x228>)
 80016a6:	6013      	str	r3, [r2, #0]
	angular_position = (QEIdata.Position[NEW]%2048)/2048.0*2*M_PI;
 80016a8:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fef3 	bl	800049c <__aeabi_ui2d>
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <QEIEncoderPosVel_Update+0x224>)
 80016bc:	f7ff f892 	bl	80007e4 <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	f7fe fdaa 	bl	8000224 <__adddf3>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	a333      	add	r3, pc, #204	; (adr r3, 80017a8 <QEIEncoderPosVel_Update+0x208>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ff57 	bl	8000590 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff f98b 	bl	8000a04 <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a36      	ldr	r2, [pc, #216]	; (80017cc <QEIEncoderPosVel_Update+0x22c>)
 80016f2:	6013      	str	r3, [r2, #0]
	position_round = (counter*31)+(int)(QEIdata.Position[NEW]/2048.0);
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <QEIEncoderPosVel_Update+0x220>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	015b      	lsls	r3, r3, #5
 80016fc:	1a9c      	subs	r4, r3, r2
 80016fe:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe feca 	bl	800049c <__aeabi_ui2d>
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <QEIEncoderPosVel_Update+0x224>)
 800170e:	f7ff f869 	bl	80007e4 <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f94b 	bl	80009b4 <__aeabi_d2iz>
 800171e:	4603      	mov	r3, r0
 8001720:	4423      	add	r3, r4
 8001722:	4a2b      	ldr	r2, [pc, #172]	; (80017d0 <QEIEncoderPosVel_Update+0x230>)
 8001724:	6013      	str	r3, [r2, #0]
	position = ((angular_position)/(2.0*M_PI)*14)+(14*position_round);
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <QEIEncoderPosVel_Update+0x22c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	a31f      	add	r3, pc, #124	; (adr r3, 80017b0 <QEIEncoderPosVel_Update+0x210>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7ff f855 	bl	80007e4 <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <QEIEncoderPosVel_Update+0x234>)
 8001748:	f7fe ff22 	bl	8000590 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4614      	mov	r4, r2
 8001752:	461d      	mov	r5, r3
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <QEIEncoderPosVel_Update+0x230>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe feab 	bl	80004bc <__aeabi_i2d>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4620      	mov	r0, r4
 800176c:	4629      	mov	r1, r5
 800176e:	f7fe fd59 	bl	8000224 <__adddf3>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f943 	bl	8000a04 <__aeabi_d2f>
 800177e:	4603      	mov	r3, r0
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <QEIEncoderPosVel_Update+0x238>)
 8001782:	6013      	str	r3, [r2, #0]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 800178a:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 800178e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001792:	4909      	ldr	r1, [pc, #36]	; (80017b8 <QEIEncoderPosVel_Update+0x218>)
 8001794:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bdb0      	pop	{r4, r5, r7, pc}
 80017a0:	a0b5ed8d 	.word	0xa0b5ed8d
 80017a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80017a8:	54442d18 	.word	0x54442d18
 80017ac:	400921fb 	.word	0x400921fb
 80017b0:	54442d18 	.word	0x54442d18
 80017b4:	401921fb 	.word	0x401921fb
 80017b8:	200002a8 	.word	0x200002a8
 80017bc:	20000200 	.word	0x20000200
 80017c0:	200002e0 	.word	0x200002e0
 80017c4:	40a00000 	.word	0x40a00000
 80017c8:	200002d0 	.word	0x200002d0
 80017cc:	200002d8 	.word	0x200002d8
 80017d0:	200002dc 	.word	0x200002dc
 80017d4:	402c0000 	.word	0x402c0000
 80017d8:	200002d4 	.word	0x200002d4

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_MspInit+0x44>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_MspInit+0x44>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6613      	str	r3, [r2, #96]	; 0x60
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_MspInit+0x44>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_MspInit+0x44>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x44>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6593      	str	r3, [r2, #88]	; 0x58
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x44>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800181e:	f001 f871 	bl	8002904 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0a0      	sub	sp, #128	; 0x80
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001848:	f107 0318 	add.w	r3, r7, #24
 800184c:	2254      	movs	r2, #84	; 0x54
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f004 fda1 	bl	8006398 <memset>
  if(huart->Instance==LPUART1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_UART_MspInit+0x174>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d137      	bne.n	80018d0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001860:	2320      	movs	r3, #32
 8001862:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001864:	2300      	movs	r3, #0
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	4618      	mov	r0, r3
 800186e:	f001 fd87 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001878:	f7ff ffb0 	bl	80017dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800187c:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <HAL_UART_MspInit+0x178>)
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	4a49      	ldr	r2, [pc, #292]	; (80019a8 <HAL_UART_MspInit+0x178>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_UART_MspInit+0x178>)
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <HAL_UART_MspInit+0x178>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	4a43      	ldr	r2, [pc, #268]	; (80019a8 <HAL_UART_MspInit+0x178>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a0:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_UART_MspInit+0x178>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80018ac:	230c      	movs	r3, #12
 80018ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80018bc:	230c      	movs	r3, #12
 80018be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ca:	f000 fda1 	bl	8002410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018ce:	e064      	b.n	800199a <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a35      	ldr	r2, [pc, #212]	; (80019ac <HAL_UART_MspInit+0x17c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d15f      	bne.n	800199a <HAL_UART_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e2:	f107 0318 	add.w	r3, r7, #24
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fd4a 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80018f2:	f7ff ff73 	bl	80017dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <HAL_UART_MspInit+0x178>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	4a2b      	ldr	r2, [pc, #172]	; (80019a8 <HAL_UART_MspInit+0x178>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6613      	str	r3, [r2, #96]	; 0x60
 8001902:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <HAL_UART_MspInit+0x178>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_UART_MspInit+0x178>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <HAL_UART_MspInit+0x178>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_UART_MspInit+0x178>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001926:	2330      	movs	r3, #48	; 0x30
 8001928:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001936:	2307      	movs	r3, #7
 8001938:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800193e:	4619      	mov	r1, r3
 8001940:	481b      	ldr	r0, [pc, #108]	; (80019b0 <HAL_UART_MspInit+0x180>)
 8001942:	f000 fd65 	bl	8002410 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_UART_MspInit+0x184>)
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_UART_MspInit+0x188>)
 800194a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_UART_MspInit+0x184>)
 800194e:	2218      	movs	r2, #24
 8001950:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_UART_MspInit+0x184>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_UART_MspInit+0x184>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_UART_MspInit+0x184>)
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_UART_MspInit+0x184>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_UART_MspInit+0x184>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_UART_MspInit+0x184>)
 8001972:	2220      	movs	r2, #32
 8001974:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_UART_MspInit+0x184>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <HAL_UART_MspInit+0x184>)
 800197e:	f000 fad5 	bl	8001f2c <HAL_DMA_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8001988:	f7ff ff28 	bl	80017dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <HAL_UART_MspInit+0x184>)
 8001990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_UART_MspInit+0x184>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6293      	str	r3, [r2, #40]	; 0x28
}
 800199a:	bf00      	nop
 800199c:	3780      	adds	r7, #128	; 0x80
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40008000 	.word	0x40008000
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40013800 	.word	0x40013800
 80019b0:	48000800 	.word	0x48000800
 80019b4:	20000154 	.word	0x20000154
 80019b8:	40020008 	.word	0x40020008

080019bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <HAL_TIM_Base_MspInit+0x68>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10c      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019e6:	e018      	b.n	8001a1a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_TIM_Base_MspInit+0x70>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d113      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2032      	movs	r0, #50	; 0x32
 8001a10:	f000 fa57 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a14:	2032      	movs	r0, #50	; 0x32
 8001a16:	f000 fa6e 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40000400 	.word	0x40000400
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40000c00 	.word	0x40000c00

08001a30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d129      	bne.n	8001aa6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001a94:	230a      	movs	r3, #10
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f000 fcb5 	bl	8002410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40000800 	.word	0x40000800
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_TIM_MspPostInit+0x64>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d11b      	bne.n	8001b12 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_TIM_MspPostInit+0x68>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_TIM_MspPostInit+0x68>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_TIM_MspPostInit+0x68>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <HAL_TIM_MspPostInit+0x6c>)
 8001b0e:	f000 fc7f 	bl	8002410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40000400 	.word	0x40000400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	48000800 	.word	0x48000800

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b2c:	e7fe      	b.n	8001b2c <NMI_Handler+0x4>

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b74:	f000 f8ac 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA1_Channel1_IRQHandler+0x10>)
 8001b82:	f000 faf6 	bl	8002172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000154 	.word	0x20000154

08001b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b98:	f000 fdec 	bl	8002774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <TIM5_IRQHandler+0x10>)
 8001ba6:	f002 fa21 	bl	8003fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000024c 	.word	0x2000024c

08001bb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <SystemInit+0x20>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <SystemInit+0x20>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bdc:	f7ff ffea 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001be2:	490d      	ldr	r1, [pc, #52]	; (8001c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <LoopForever+0xe>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	; (8001c24 <LoopForever+0x16>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c06:	f004 fbcf 	bl	80063a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0a:	f7ff f8c9 	bl	8000da0 <main>

08001c0e <LoopForever>:

LoopForever:
    b LoopForever
 8001c0e:	e7fe      	b.n	8001c0e <LoopForever>
  ldr   r0, =_estack
 8001c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c1c:	08006458 	.word	0x08006458
  ldr r2, =_sbss
 8001c20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c24:	200002fc 	.word	0x200002fc

08001c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC1_2_IRQHandler>

08001c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f939 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 f80e 	bl	8001c5c <HAL_InitTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	e001      	b.n	8001c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c4c:	f7ff fdcc 	bl	80017e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c50:	79fb      	ldrb	r3, [r7, #7]

}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_InitTick+0x68>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d022      	beq.n	8001cb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_InitTick+0x6c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_InitTick+0x68>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f944 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10f      	bne.n	8001cb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	d809      	bhi.n	8001caa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c96:	2200      	movs	r2, #0
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9e:	f000 f910 	bl	8001ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_InitTick+0x70>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e007      	b.n	8001cba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e004      	b.n	8001cba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e001      	b.n	8001cba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_IncTick+0x1c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_IncTick+0x20>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a03      	ldr	r2, [pc, #12]	; (8001cec <HAL_IncTick+0x1c>)
 8001ce0:	6013      	str	r3, [r2, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	200002f8 	.word	0x200002f8
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	200002f8 	.word	0x200002f8

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	; (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff29 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff40 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff90 	bl	8001e00 <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5f 	bl	8001dac <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff33 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa4 	bl	8001e68 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e08d      	b.n	800205a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_DMA_Init+0x138>)
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d80f      	bhi.n	8001f6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b45      	ldr	r3, [pc, #276]	; (8002068 <HAL_DMA_Init+0x13c>)
 8001f52:	4413      	add	r3, r2
 8001f54:	4a45      	ldr	r2, [pc, #276]	; (800206c <HAL_DMA_Init+0x140>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	009a      	lsls	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_DMA_Init+0x144>)
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
 8001f68:	e00e      	b.n	8001f88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_DMA_Init+0x148>)
 8001f72:	4413      	add	r3, r2
 8001f74:	4a3d      	ldr	r2, [pc, #244]	; (800206c <HAL_DMA_Init+0x140>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	009a      	lsls	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a3c      	ldr	r2, [pc, #240]	; (8002078 <HAL_DMA_Init+0x14c>)
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f9b6 	bl	800234c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fe8:	d102      	bne.n	8001ff0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002004:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <HAL_DMA_Init+0x104>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d80c      	bhi.n	8002030 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f9d6 	bl	80023c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e008      	b.n	8002042 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40020407 	.word	0x40020407
 8002068:	bffdfff8 	.word	0xbffdfff8
 800206c:	cccccccd 	.word	0xcccccccd
 8002070:	40020000 	.word	0x40020000
 8002074:	bffdfbf8 	.word	0xbffdfbf8
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_DMA_Start_IT+0x20>
 8002098:	2302      	movs	r3, #2
 800209a:	e066      	b.n	800216a <HAL_DMA_Start_IT+0xee>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d155      	bne.n	800215c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f8fb 	bl	80022d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 020e 	orr.w	r2, r2, #14
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e00f      	b.n	8002114 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0204 	bic.w	r2, r2, #4
 8002102:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 020a 	orr.w	r2, r2, #10
 8002112:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002130:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002148:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e005      	b.n	8002168 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002164:	2302      	movs	r3, #2
 8002166:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002168:	7dfb      	ldrb	r3, [r7, #23]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2204      	movs	r2, #4
 8002194:	409a      	lsls	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d026      	beq.n	80021ec <HAL_DMA_IRQHandler+0x7a>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d021      	beq.n	80021ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0204 	bic.w	r2, r2, #4
 80021c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f003 021f 	and.w	r2, r3, #31
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	2104      	movs	r1, #4
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d071      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021ea:	e06c      	b.n	80022c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2202      	movs	r2, #2
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02e      	beq.n	800225e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d029      	beq.n	800225e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 020a 	bic.w	r2, r2, #10
 8002226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	2102      	movs	r1, #2
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d038      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800225c:	e033      	b.n	80022c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2208      	movs	r2, #8
 8002268:	409a      	lsls	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d02a      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d025      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 020e 	bic.w	r2, r2, #14
 800228a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
}
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d004      	beq.n	80022fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f003 021f 	and.w	r2, r3, #31
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f202 	lsl.w	r2, r1, r2
 800230c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d108      	bne.n	8002330 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800232e:	e007      	b.n	8002340 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800235c:	429a      	cmp	r2, r3
 800235e:	d802      	bhi.n	8002366 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e001      	b.n	800236a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002368:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3b08      	subs	r3, #8
 8002376:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	009a      	lsls	r2, r3, #2
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	461a      	mov	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002396:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	2201      	movs	r2, #1
 80023a0:	409a      	lsls	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40020407 	.word	0x40020407
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020820 	.word	0x40020820
 80023c0:	cccccccd 	.word	0xcccccccd
 80023c4:	40020880 	.word	0x40020880

080023c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80023ea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2201      	movs	r2, #1
 80023f6:	409a      	lsls	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	1000823f 	.word	0x1000823f
 800240c:	40020940 	.word	0x40020940

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800241e:	e15a      	b.n	80026d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2101      	movs	r1, #1
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 814c 	beq.w	80026d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d005      	beq.n	8002450 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800244c:	2b02      	cmp	r3, #2
 800244e:	d130      	bne.n	80024b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002486:	2201      	movs	r2, #1
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0201 	and.w	r2, r3, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d017      	beq.n	80024ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d123      	bne.n	8002542 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	6939      	ldr	r1, [r7, #16]
 800253e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0203 	and.w	r2, r3, #3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80a6 	beq.w	80026d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002584:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <HAL_GPIO_Init+0x2e4>)
 8002586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002588:	4a5a      	ldr	r2, [pc, #360]	; (80026f4 <HAL_GPIO_Init+0x2e4>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6613      	str	r3, [r2, #96]	; 0x60
 8002590:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <HAL_GPIO_Init+0x2e4>)
 8002592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259c:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025c6:	d01f      	beq.n	8002608 <HAL_GPIO_Init+0x1f8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a4c      	ldr	r2, [pc, #304]	; (80026fc <HAL_GPIO_Init+0x2ec>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d019      	beq.n	8002604 <HAL_GPIO_Init+0x1f4>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a4b      	ldr	r2, [pc, #300]	; (8002700 <HAL_GPIO_Init+0x2f0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_GPIO_Init+0x1f0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a4a      	ldr	r2, [pc, #296]	; (8002704 <HAL_GPIO_Init+0x2f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00d      	beq.n	80025fc <HAL_GPIO_Init+0x1ec>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a49      	ldr	r2, [pc, #292]	; (8002708 <HAL_GPIO_Init+0x2f8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d007      	beq.n	80025f8 <HAL_GPIO_Init+0x1e8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a48      	ldr	r2, [pc, #288]	; (800270c <HAL_GPIO_Init+0x2fc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_GPIO_Init+0x1e4>
 80025f0:	2305      	movs	r3, #5
 80025f2:	e00a      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 80025f4:	2306      	movs	r3, #6
 80025f6:	e008      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 80025f8:	2304      	movs	r3, #4
 80025fa:	e006      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 80025fc:	2303      	movs	r3, #3
 80025fe:	e004      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 8002600:	2302      	movs	r3, #2
 8002602:	e002      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 8002608:	2300      	movs	r3, #0
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	f002 0203 	and.w	r2, r2, #3
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	4093      	lsls	r3, r2
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261a:	4937      	ldr	r1, [pc, #220]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_GPIO_Init+0x300>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800264c:	4a30      	ldr	r2, [pc, #192]	; (8002710 <HAL_GPIO_Init+0x300>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002652:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <HAL_GPIO_Init+0x300>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002676:	4a26      	ldr	r2, [pc, #152]	; (8002710 <HAL_GPIO_Init+0x300>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800267c:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_GPIO_Init+0x300>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026a0:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <HAL_GPIO_Init+0x300>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_GPIO_Init+0x300>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ca:	4a11      	ldr	r2, [pc, #68]	; (8002710 <HAL_GPIO_Init+0x300>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3301      	adds	r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f47f ae9d 	bne.w	8002420 <HAL_GPIO_Init+0x10>
  }
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40010000 	.word	0x40010000
 80026fc:	48000400 	.word	0x48000400
 8002700:	48000800 	.word	0x48000800
 8002704:	48000c00 	.word	0x48000c00
 8002708:	48001000 	.word	0x48001000
 800270c:	48001400 	.word	0x48001400
 8002710:	40010400 	.word	0x40010400

08002714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e001      	b.n	8002736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002760:	e002      	b.n	8002768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f806 	bl	80027a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40010400 	.word	0x40010400

080027a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d141      	bne.n	800284e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ca:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d131      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d8:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027de:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e8:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027f0:	4a41      	ldr	r2, [pc, #260]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027f8:	4b40      	ldr	r3, [pc, #256]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2232      	movs	r2, #50	; 0x32
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	4a3f      	ldr	r2, [pc, #252]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	0c9b      	lsrs	r3, r3, #18
 800280a:	3301      	adds	r3, #1
 800280c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800280e:	e002      	b.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3b01      	subs	r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002822:	d102      	bne.n	800282a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f2      	bne.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800282a:	4b33      	ldr	r3, [pc, #204]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002836:	d158      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e057      	b.n	80028ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800283c:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800283e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002842:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800284c:	e04d      	b.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002854:	d141      	bne.n	80028da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002856:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d131      	bne.n	80028c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286a:	4a23      	ldr	r2, [pc, #140]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287c:	4a1e      	ldr	r2, [pc, #120]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2232      	movs	r2, #50	; 0x32
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	3301      	adds	r3, #1
 8002898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800289a:	e002      	b.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3b01      	subs	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ae:	d102      	bne.n	80028b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f2      	bne.n	800289c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d112      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e011      	b.n	80028ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028d8:	e007      	b.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40007000 	.word	0x40007000
 80028fc:	20000000 	.word	0x20000000
 8002900:	431bde83 	.word	0x431bde83

08002904 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800290e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002912:	6093      	str	r3, [r2, #8]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40007000 	.word	0x40007000

08002924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e2fe      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d075      	beq.n	8002a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002942:	4b97      	ldr	r3, [pc, #604]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800294c:	4b94      	ldr	r3, [pc, #592]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d102      	bne.n	8002962 <HAL_RCC_OscConfig+0x3e>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d002      	beq.n	8002968 <HAL_RCC_OscConfig+0x44>
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d10b      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	4b8d      	ldr	r3, [pc, #564]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d05b      	beq.n	8002a2c <HAL_RCC_OscConfig+0x108>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d157      	bne.n	8002a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e2d9      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d106      	bne.n	8002998 <HAL_RCC_OscConfig+0x74>
 800298a:	4b85      	ldr	r3, [pc, #532]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a84      	ldr	r2, [pc, #528]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e01d      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b7f      	ldr	r3, [pc, #508]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7e      	ldr	r2, [pc, #504]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b7c      	ldr	r3, [pc, #496]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7b      	ldr	r2, [pc, #492]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 80029bc:	4b78      	ldr	r3, [pc, #480]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a77      	ldr	r2, [pc, #476]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b75      	ldr	r3, [pc, #468]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a74      	ldr	r2, [pc, #464]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7ff f98a 	bl	8001cf4 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff f986 	bl	8001cf4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e29e      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f6:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0xc0>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7ff f976 	bl	8001cf4 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7ff f972 	bl	8001cf4 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e28a      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1e:	4b60      	ldr	r3, [pc, #384]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0xe8>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d075      	beq.n	8002b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a44:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_OscConfig+0x136>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d002      	beq.n	8002a60 <HAL_RCC_OscConfig+0x13c>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d11f      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x154>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e25d      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b49      	ldr	r3, [pc, #292]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	4946      	ldr	r1, [pc, #280]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a8c:	4b45      	ldr	r3, [pc, #276]	; (8002ba4 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff f8e3 	bl	8001c5c <HAL_InitTick>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d043      	beq.n	8002b24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e249      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3c      	ldr	r2, [pc, #240]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7ff f91e 	bl	8001cf4 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abc:	f7ff f91a 	bl	8001cf4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e232      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ace:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	061b      	lsls	r3, r3, #24
 8002ae8:	492d      	ldr	r1, [pc, #180]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
 8002aee:	e01a      	b.n	8002b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7ff f8fa 	bl	8001cf4 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b04:	f7ff f8f6 	bl	8001cf4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e20e      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x1e0>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d041      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b40:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7ff f8d3 	bl	8001cf4 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b52:	f7ff f8cf 	bl	8001cf4 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1e7      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0ef      	beq.n	8002b52 <HAL_RCC_OscConfig+0x22e>
 8002b72:	e020      	b.n	8002bb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7ff f8b6 	bl	8001cf4 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8a:	e00d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7ff f8b2 	bl	8001cf4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d906      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e1ca      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba8:	4b8c      	ldr	r3, [pc, #560]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1ea      	bne.n	8002b8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80a6 	beq.w	8002d10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bc8:	4b84      	ldr	r3, [pc, #528]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x2b4>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x2b6>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b7f      	ldr	r3, [pc, #508]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	4a7e      	ldr	r2, [pc, #504]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bea:	4b7c      	ldr	r3, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfa:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <HAL_RCC_OscConfig+0x4bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d118      	bne.n	8002c38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c06:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x4bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a75      	ldr	r2, [pc, #468]	; (8002de0 <HAL_RCC_OscConfig+0x4bc>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c12:	f7ff f86f 	bl	8001cf4 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1a:	f7ff f86b 	bl	8001cf4 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e183      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2c:	4b6c      	ldr	r3, [pc, #432]	; (8002de0 <HAL_RCC_OscConfig+0x4bc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d108      	bne.n	8002c52 <HAL_RCC_OscConfig+0x32e>
 8002c40:	4b66      	ldr	r3, [pc, #408]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	4a65      	ldr	r2, [pc, #404]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c50:	e024      	b.n	8002c9c <HAL_RCC_OscConfig+0x378>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d110      	bne.n	8002c7c <HAL_RCC_OscConfig+0x358>
 8002c5a:	4b60      	ldr	r3, [pc, #384]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	4a5e      	ldr	r2, [pc, #376]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	4a5a      	ldr	r2, [pc, #360]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCC_OscConfig+0x378>
 8002c7c:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d016      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7ff f826 	bl	8001cf4 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7ff f822 	bl	8001cf4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e138      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc2:	4b46      	ldr	r3, [pc, #280]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ed      	beq.n	8002cac <HAL_RCC_OscConfig+0x388>
 8002cd0:	e015      	b.n	8002cfe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7ff f80f 	bl	8001cf4 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7ff f80b 	bl	8001cf4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e121      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf0:	4b3a      	ldr	r3, [pc, #232]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ed      	bne.n	8002cda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cfe:	7ffb      	ldrb	r3, [r7, #31]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d04:	4b35      	ldr	r3, [pc, #212]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	4a34      	ldr	r2, [pc, #208]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d03c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d2a:	4a2c      	ldr	r2, [pc, #176]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe ffde 	bl	8001cf4 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d3c:	f7fe ffda 	bl	8001cf4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0f2      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ef      	beq.n	8002d3c <HAL_RCC_OscConfig+0x418>
 8002d5c:	e01b      	b.n	8002d96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fe ffc1 	bl	8001cf4 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d76:	f7fe ffbd 	bl	8001cf4 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0d5      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d88:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ef      	bne.n	8002d76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80c9 	beq.w	8002f32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	f000 8083 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d15e      	bne.n	8002e74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_RCC_OscConfig+0x4b8>)
 8002dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe ff97 	bl	8001cf4 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc8:	e00c      	b.n	8002de4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fe ff93 	bl	8001cf4 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d905      	bls.n	8002de4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0ab      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ec      	bne.n	8002dca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df0:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	4b52      	ldr	r3, [pc, #328]	; (8002f40 <HAL_RCC_OscConfig+0x61c>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6a11      	ldr	r1, [r2, #32]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e00:	3a01      	subs	r2, #1
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	4311      	orrs	r1, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e0a:	0212      	lsls	r2, r2, #8
 8002e0c:	4311      	orrs	r1, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e12:	0852      	lsrs	r2, r2, #1
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0552      	lsls	r2, r2, #21
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e1e:	0852      	lsrs	r2, r2, #1
 8002e20:	3a01      	subs	r2, #1
 8002e22:	0652      	lsls	r2, r2, #25
 8002e24:	4311      	orrs	r1, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e2a:	06d2      	lsls	r2, r2, #27
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	4943      	ldr	r1, [pc, #268]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a40      	ldr	r2, [pc, #256]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a3d      	ldr	r2, [pc, #244]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe ff52 	bl	8001cf4 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe ff4e 	bl	8001cf4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e066      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x530>
 8002e72:	e05e      	b.n	8002f32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a30      	ldr	r2, [pc, #192]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe ff38 	bl	8001cf4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe ff34 	bl	8001cf4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e04c      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9a:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ea6:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	4924      	ldr	r1, [pc, #144]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_RCC_OscConfig+0x620>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60cb      	str	r3, [r1, #12]
 8002eb2:	e03e      	b.n	8002f32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e039      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ec0:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d12c      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d123      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11b      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d113      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	3b01      	subs	r3, #1
 8002f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	019f800c 	.word	0x019f800c
 8002f44:	feeefffc 	.word	0xfeeefffc

08002f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e11e      	b.n	800319e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b91      	ldr	r3, [pc, #580]	; (80031a8 <HAL_RCC_ClockConfig+0x260>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d910      	bls.n	8002f90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b8e      	ldr	r3, [pc, #568]	; (80031a8 <HAL_RCC_ClockConfig+0x260>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 020f 	bic.w	r2, r3, #15
 8002f76:	498c      	ldr	r1, [pc, #560]	; (80031a8 <HAL_RCC_ClockConfig+0x260>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b8a      	ldr	r3, [pc, #552]	; (80031a8 <HAL_RCC_ClockConfig+0x260>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e106      	b.n	800319e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d073      	beq.n	8003084 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d129      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa4:	4b81      	ldr	r3, [pc, #516]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0f4      	b.n	800319e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fb4:	f000 f99e 	bl	80032f4 <RCC_GetSysClockFreqFromPLLSource>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4a7c      	ldr	r2, [pc, #496]	; (80031b0 <HAL_RCC_ClockConfig+0x268>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d93f      	bls.n	8003042 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fc2:	4b7a      	ldr	r3, [pc, #488]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d033      	beq.n	8003042 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d12f      	bne.n	8003042 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fe2:	4b72      	ldr	r3, [pc, #456]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fea:	4a70      	ldr	r2, [pc, #448]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8002fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e024      	b.n	8003042 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0c6      	b.n	800319e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	4b66      	ldr	r3, [pc, #408]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0be      	b.n	800319e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003020:	f000 f8ce 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8003024:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <HAL_RCC_ClockConfig+0x268>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d909      	bls.n	8003042 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800302e:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003036:	4a5d      	ldr	r2, [pc, #372]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8003038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b5a      	ldr	r3, [pc, #360]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4957      	ldr	r1, [pc, #348]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fe fe4e 	bl	8001cf4 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fe fe4a 	bl	8001cf4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e095      	b.n	800319e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b4e      	ldr	r3, [pc, #312]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d023      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800309c:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 80030a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030b4:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030bc:	4a3b      	ldr	r2, [pc, #236]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 80030be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4936      	ldr	r1, [pc, #216]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
 80030d6:	e008      	b.n	80030ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b80      	cmp	r3, #128	; 0x80
 80030dc:	d105      	bne.n	80030ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030de:	4b33      	ldr	r3, [pc, #204]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4a32      	ldr	r2, [pc, #200]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 80030e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ea:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d21d      	bcs.n	8003134 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_RCC_ClockConfig+0x260>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 020f 	bic.w	r2, r3, #15
 8003100:	4929      	ldr	r1, [pc, #164]	; (80031a8 <HAL_RCC_ClockConfig+0x260>)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003108:	f7fe fdf4 	bl	8001cf4 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	e00a      	b.n	8003126 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7fe fdf0 	bl	8001cf4 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e03b      	b.n	800319e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_RCC_ClockConfig+0x260>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d1ed      	bne.n	8003110 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4917      	ldr	r1, [pc, #92]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	490f      	ldr	r1, [pc, #60]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003172:	f000 f825 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8003176:	4602      	mov	r2, r0
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_RCC_ClockConfig+0x264>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	490c      	ldr	r1, [pc, #48]	; (80031b4 <HAL_RCC_ClockConfig+0x26c>)
 8003184:	5ccb      	ldrb	r3, [r1, r3]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <HAL_RCC_ClockConfig+0x270>)
 8003190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_RCC_ClockConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fd60 	bl	8001c5c <HAL_InitTick>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40022000 	.word	0x40022000
 80031ac:	40021000 	.word	0x40021000
 80031b0:	04c4b400 	.word	0x04c4b400
 80031b4:	08006408 	.word	0x08006408
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000004 	.word	0x20000004

080031c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031c6:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d102      	bne.n	80031d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031d2:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	e047      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d102      	bne.n	80031ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031e4:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	e03e      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d136      	bne.n	8003264 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3301      	adds	r3, #1
 800320c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d10c      	bne.n	800322e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	4a16      	ldr	r2, [pc, #88]	; (8003278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800321e:	68d2      	ldr	r2, [r2, #12]
 8003220:	0a12      	lsrs	r2, r2, #8
 8003222:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	617b      	str	r3, [r7, #20]
      break;
 800322c:	e00c      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	fbb2 f3f3 	udiv	r3, r2, r3
 8003236:	4a10      	ldr	r2, [pc, #64]	; (8003278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003238:	68d2      	ldr	r2, [r2, #12]
 800323a:	0a12      	lsrs	r2, r2, #8
 800323c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
      break;
 8003246:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0e5b      	lsrs	r3, r3, #25
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	3301      	adds	r3, #1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	e001      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003268:	693b      	ldr	r3, [r7, #16]
}
 800326a:	4618      	mov	r0, r3
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
 800327c:	00f42400 	.word	0x00f42400
 8003280:	016e3600 	.word	0x016e3600

08003284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032a0:	f7ff fff0 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4904      	ldr	r1, [pc, #16]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08006418 	.word	0x08006418

080032c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032cc:	f7ff ffda 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	0adb      	lsrs	r3, r3, #11
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4904      	ldr	r1, [pc, #16]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	08006418 	.word	0x08006418

080032f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032fa:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	3301      	adds	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d10c      	bne.n	8003332 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003318:	4a17      	ldr	r2, [pc, #92]	; (8003378 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003322:	68d2      	ldr	r2, [r2, #12]
 8003324:	0a12      	lsrs	r2, r2, #8
 8003326:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	617b      	str	r3, [r7, #20]
    break;
 8003330:	e00c      	b.n	800334c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800333c:	68d2      	ldr	r2, [r2, #12]
 800333e:	0a12      	lsrs	r2, r2, #8
 8003340:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
    break;
 800334a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0e5b      	lsrs	r3, r3, #25
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003366:	687b      	ldr	r3, [r7, #4]
}
 8003368:	4618      	mov	r0, r3
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40021000 	.word	0x40021000
 8003378:	016e3600 	.word	0x016e3600
 800337c:	00f42400 	.word	0x00f42400

08003380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003388:	2300      	movs	r3, #0
 800338a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800338c:	2300      	movs	r3, #0
 800338e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8098 	beq.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	4b40      	ldr	r3, [pc, #256]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	4a3f      	ldr	r2, [pc, #252]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6593      	str	r3, [r2, #88]	; 0x58
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ca:	4b3a      	ldr	r3, [pc, #232]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a39      	ldr	r2, [pc, #228]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033d6:	f7fe fc8d 	bl	8001cf4 <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033dc:	e009      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033de:	f7fe fc89 	bl	8001cf4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d902      	bls.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	74fb      	strb	r3, [r7, #19]
        break;
 80033f0:	e005      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f2:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0ef      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d159      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01e      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	d019      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003420:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800342c:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800343c:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800344c:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fc49 	bl	8001cf4 <HAL_GetTick>
 8003462:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003464:	e00b      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7fe fc45 	bl	8001cf4 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	; 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d902      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	74fb      	strb	r3, [r7, #19]
            break;
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ec      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	4903      	ldr	r1, [pc, #12]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034a8:	e008      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	74bb      	strb	r3, [r7, #18]
 80034ae:	e005      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034bc:	7c7b      	ldrb	r3, [r7, #17]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4ba7      	ldr	r3, [pc, #668]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	4aa6      	ldr	r2, [pc, #664]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034da:	4ba1      	ldr	r3, [pc, #644]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f023 0203 	bic.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	499d      	ldr	r1, [pc, #628]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fc:	4b98      	ldr	r3, [pc, #608]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f023 020c 	bic.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4995      	ldr	r1, [pc, #596]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800351e:	4b90      	ldr	r3, [pc, #576]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	498c      	ldr	r1, [pc, #560]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003540:	4b87      	ldr	r3, [pc, #540]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	4984      	ldr	r1, [pc, #528]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003562:	4b7f      	ldr	r3, [pc, #508]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	497b      	ldr	r1, [pc, #492]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003584:	4b76      	ldr	r3, [pc, #472]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	4973      	ldr	r1, [pc, #460]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035a6:	4b6e      	ldr	r3, [pc, #440]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	496a      	ldr	r1, [pc, #424]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035c8:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4962      	ldr	r1, [pc, #392]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ea:	4b5d      	ldr	r3, [pc, #372]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	4959      	ldr	r1, [pc, #356]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800360c:	4b54      	ldr	r3, [pc, #336]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	4951      	ldr	r1, [pc, #324]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362e:	4b4c      	ldr	r3, [pc, #304]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	4948      	ldr	r1, [pc, #288]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003650:	4b43      	ldr	r3, [pc, #268]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4940      	ldr	r1, [pc, #256]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a3a      	ldr	r2, [pc, #232]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003688:	4b35      	ldr	r3, [pc, #212]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	4932      	ldr	r1, [pc, #200]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a6:	d105      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d015      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	4924      	ldr	r1, [pc, #144]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036de:	d105      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	4916      	ldr	r1, [pc, #88]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003716:	d105      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003722:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d019      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4908      	ldr	r1, [pc, #32]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374e:	d109      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a02      	ldr	r2, [pc, #8]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375a:	60d3      	str	r3, [r2, #12]
 800375c:	e002      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003770:	4b29      	ldr	r3, [pc, #164]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	4926      	ldr	r1, [pc, #152]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800378e:	d105      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	4918      	ldr	r1, [pc, #96]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a12      	ldr	r2, [pc, #72]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037e0:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	490a      	ldr	r1, [pc, #40]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800380a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800380c:	7cbb      	ldrb	r3, [r7, #18]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000

0800381c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e049      	b.n	80038c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe f8ba 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 ff68 	bl	8004730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d001      	beq.n	80038e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e04c      	b.n	800397e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <HAL_TIM_Base_Start+0xc0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d022      	beq.n	800393c <HAL_TIM_Base_Start+0x70>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d01d      	beq.n	800393c <HAL_TIM_Base_Start+0x70>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a22      	ldr	r2, [pc, #136]	; (8003990 <HAL_TIM_Base_Start+0xc4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d018      	beq.n	800393c <HAL_TIM_Base_Start+0x70>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a21      	ldr	r2, [pc, #132]	; (8003994 <HAL_TIM_Base_Start+0xc8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <HAL_TIM_Base_Start+0x70>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_TIM_Base_Start+0xcc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00e      	beq.n	800393c <HAL_TIM_Base_Start+0x70>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_TIM_Base_Start+0xd0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d009      	beq.n	800393c <HAL_TIM_Base_Start+0x70>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <HAL_TIM_Base_Start+0xd4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <HAL_TIM_Base_Start+0x70>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <HAL_TIM_Base_Start+0xd8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d115      	bne.n	8003968 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_TIM_Base_Start+0xdc>)
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b06      	cmp	r3, #6
 800394c:	d015      	beq.n	800397a <HAL_TIM_Base_Start+0xae>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d011      	beq.n	800397a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	e008      	b.n	800397a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e000      	b.n	800397c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40013400 	.word	0x40013400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40015000 	.word	0x40015000
 80039a8:	00010007 	.word	0x00010007

080039ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d001      	beq.n	80039c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e054      	b.n	8003a6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a26      	ldr	r2, [pc, #152]	; (8003a7c <HAL_TIM_Base_Start_IT+0xd0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d022      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x80>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d01d      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x80>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <HAL_TIM_Base_Start_IT+0xd4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x80>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a21      	ldr	r2, [pc, #132]	; (8003a84 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x80>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x80>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <HAL_TIM_Base_Start_IT+0xe0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x80>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x80>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d115      	bne.n	8003a58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_TIM_Base_Start_IT+0xec>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d015      	beq.n	8003a6a <HAL_TIM_Base_Start_IT+0xbe>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d011      	beq.n	8003a6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	e008      	b.n	8003a6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e000      	b.n	8003a6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40013400 	.word	0x40013400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40015000 	.word	0x40015000
 8003a98:	00010007 	.word	0x00010007

08003a9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e049      	b.n	8003b42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f841 	bl	8003b4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f000 fe28 	bl	8004730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_TIM_PWM_Start+0x24>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e03c      	b.n	8003bfe <HAL_TIM_PWM_Start+0x9e>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d109      	bne.n	8003b9e <HAL_TIM_PWM_Start+0x3e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	e02f      	b.n	8003bfe <HAL_TIM_PWM_Start+0x9e>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d109      	bne.n	8003bb8 <HAL_TIM_PWM_Start+0x58>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e022      	b.n	8003bfe <HAL_TIM_PWM_Start+0x9e>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d109      	bne.n	8003bd2 <HAL_TIM_PWM_Start+0x72>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	bf14      	ite	ne
 8003bca:	2301      	movne	r3, #1
 8003bcc:	2300      	moveq	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	e015      	b.n	8003bfe <HAL_TIM_PWM_Start+0x9e>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d109      	bne.n	8003bec <HAL_TIM_PWM_Start+0x8c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e008      	b.n	8003bfe <HAL_TIM_PWM_Start+0x9e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0a6      	b.n	8003d54 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <HAL_TIM_PWM_Start+0xb6>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c14:	e023      	b.n	8003c5e <HAL_TIM_PWM_Start+0xfe>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d104      	bne.n	8003c26 <HAL_TIM_PWM_Start+0xc6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c24:	e01b      	b.n	8003c5e <HAL_TIM_PWM_Start+0xfe>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_PWM_Start+0xd6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c34:	e013      	b.n	8003c5e <HAL_TIM_PWM_Start+0xfe>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_PWM_Start+0xe6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c44:	e00b      	b.n	8003c5e <HAL_TIM_PWM_Start+0xfe>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_PWM_Start+0xf6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c54:	e003      	b.n	8003c5e <HAL_TIM_PWM_Start+0xfe>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2201      	movs	r2, #1
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 f9dc 	bl	8005024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <HAL_TIM_PWM_Start+0x1fc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d018      	beq.n	8003ca8 <HAL_TIM_PWM_Start+0x148>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a39      	ldr	r2, [pc, #228]	; (8003d60 <HAL_TIM_PWM_Start+0x200>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d013      	beq.n	8003ca8 <HAL_TIM_PWM_Start+0x148>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a37      	ldr	r2, [pc, #220]	; (8003d64 <HAL_TIM_PWM_Start+0x204>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00e      	beq.n	8003ca8 <HAL_TIM_PWM_Start+0x148>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a36      	ldr	r2, [pc, #216]	; (8003d68 <HAL_TIM_PWM_Start+0x208>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_TIM_PWM_Start+0x148>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a34      	ldr	r2, [pc, #208]	; (8003d6c <HAL_TIM_PWM_Start+0x20c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_PWM_Start+0x148>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a33      	ldr	r2, [pc, #204]	; (8003d70 <HAL_TIM_PWM_Start+0x210>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_PWM_Start+0x14c>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_TIM_PWM_Start+0x14e>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a25      	ldr	r2, [pc, #148]	; (8003d5c <HAL_TIM_PWM_Start+0x1fc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x1b2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d01d      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x1b2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <HAL_TIM_PWM_Start+0x214>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x1b2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a24      	ldr	r2, [pc, #144]	; (8003d78 <HAL_TIM_PWM_Start+0x218>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x1b2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a23      	ldr	r2, [pc, #140]	; (8003d7c <HAL_TIM_PWM_Start+0x21c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x1b2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a19      	ldr	r2, [pc, #100]	; (8003d60 <HAL_TIM_PWM_Start+0x200>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x1b2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_TIM_PWM_Start+0x204>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x1b2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <HAL_TIM_PWM_Start+0x210>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d115      	bne.n	8003d3e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_TIM_PWM_Start+0x220>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	d015      	beq.n	8003d50 <HAL_TIM_PWM_Start+0x1f0>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d011      	beq.n	8003d50 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3c:	e008      	b.n	8003d50 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e000      	b.n	8003d52 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40013400 	.word	0x40013400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40014400 	.word	0x40014400
 8003d6c:	40014800 	.word	0x40014800
 8003d70:	40015000 	.word	0x40015000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	00010007 	.word	0x00010007

08003d84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e097      	b.n	8003ec8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fd fe3f 	bl	8001a30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003dc8:	f023 0307 	bic.w	r3, r3, #7
 8003dcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f000 fca9 	bl	8004730 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	4313      	orrs	r3, r2
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e24:	f023 030c 	bic.w	r3, r3, #12
 8003e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	4313      	orrs	r3, r2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	031b      	lsls	r3, r3, #12
 8003e54:	4313      	orrs	r3, r2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4313      	orrs	r3, r2
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ee8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ef0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ef8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d110      	bne.n	8003f22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d102      	bne.n	8003f0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f06:	7b7b      	ldrb	r3, [r7, #13]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d001      	beq.n	8003f10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e069      	b.n	8003fe4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f20:	e031      	b.n	8003f86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d110      	bne.n	8003f4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f28:	7bbb      	ldrb	r3, [r7, #14]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d102      	bne.n	8003f34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f2e:	7b3b      	ldrb	r3, [r7, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d001      	beq.n	8003f38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e055      	b.n	8003fe4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f48:	e01d      	b.n	8003f86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d108      	bne.n	8003f62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f50:	7bbb      	ldrb	r3, [r7, #14]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d105      	bne.n	8003f62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f56:	7b7b      	ldrb	r3, [r7, #13]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d102      	bne.n	8003f62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f5c:	7b3b      	ldrb	r3, [r7, #12]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d001      	beq.n	8003f66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e03e      	b.n	8003fe4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_TIM_Encoder_Start+0xc4>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d008      	beq.n	8003fa4 <HAL_TIM_Encoder_Start+0xd4>
 8003f92:	e00f      	b.n	8003fb4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 f841 	bl	8005024 <TIM_CCxChannelCmd>
      break;
 8003fa2:	e016      	b.n	8003fd2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	2104      	movs	r1, #4
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f839 	bl	8005024 <TIM_CCxChannelCmd>
      break;
 8003fb2:	e00e      	b.n	8003fd2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f001 f831 	bl	8005024 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	2104      	movs	r1, #4
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 f82a 	bl	8005024 <TIM_CCxChannelCmd>
      break;
 8003fd0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d020      	beq.n	8004050 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01b      	beq.n	8004050 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0202 	mvn.w	r2, #2
 8004020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fb5c 	bl	80046f4 <HAL_TIM_IC_CaptureCallback>
 800403c:	e005      	b.n	800404a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fb4e 	bl	80046e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fb5f 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d020      	beq.n	800409c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01b      	beq.n	800409c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0204 	mvn.w	r2, #4
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2202      	movs	r2, #2
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fb36 	bl	80046f4 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fb28 	bl	80046e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fb39 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d020      	beq.n	80040e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01b      	beq.n	80040e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0208 	mvn.w	r2, #8
 80040b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2204      	movs	r2, #4
 80040be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fb10 	bl	80046f4 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fb02 	bl	80046e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb13 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d020      	beq.n	8004134 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0210 	mvn.w	r2, #16
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2208      	movs	r2, #8
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 faea 	bl	80046f4 <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fadc 	bl	80046e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 faed 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00c      	beq.n	8004158 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0201 	mvn.w	r2, #1
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd f9f0 	bl	8001538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00c      	beq.n	8004186 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800417e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f001 f815 	bl	80051b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f001 f80d 	bl	80051c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 faa7 	bl	800471c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f06f 0220 	mvn.w	r2, #32
 80041ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 ffd5 	bl	800519c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00c      	beq.n	8004216 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800420e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 ffe1 	bl	80051d8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00c      	beq.n	800423a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 ffd9 	bl	80051ec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00c      	beq.n	800425e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 ffd1 	bl	8005200 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00c      	beq.n	8004282 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800427a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 ffc9 	bl	8005214 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e0ff      	b.n	80044aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b14      	cmp	r3, #20
 80042b6:	f200 80f0 	bhi.w	800449a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	08004315 	.word	0x08004315
 80042c4:	0800449b 	.word	0x0800449b
 80042c8:	0800449b 	.word	0x0800449b
 80042cc:	0800449b 	.word	0x0800449b
 80042d0:	08004355 	.word	0x08004355
 80042d4:	0800449b 	.word	0x0800449b
 80042d8:	0800449b 	.word	0x0800449b
 80042dc:	0800449b 	.word	0x0800449b
 80042e0:	08004397 	.word	0x08004397
 80042e4:	0800449b 	.word	0x0800449b
 80042e8:	0800449b 	.word	0x0800449b
 80042ec:	0800449b 	.word	0x0800449b
 80042f0:	080043d7 	.word	0x080043d7
 80042f4:	0800449b 	.word	0x0800449b
 80042f8:	0800449b 	.word	0x0800449b
 80042fc:	0800449b 	.word	0x0800449b
 8004300:	08004419 	.word	0x08004419
 8004304:	0800449b 	.word	0x0800449b
 8004308:	0800449b 	.word	0x0800449b
 800430c:	0800449b 	.word	0x0800449b
 8004310:	08004459 	.word	0x08004459
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fabc 	bl	8004898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0208 	orr.w	r2, r2, #8
 800432e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0204 	bic.w	r2, r2, #4
 800433e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6999      	ldr	r1, [r3, #24]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	619a      	str	r2, [r3, #24]
      break;
 8004352:	e0a5      	b.n	80044a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fb36 	bl	80049cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6999      	ldr	r1, [r3, #24]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	021a      	lsls	r2, r3, #8
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	619a      	str	r2, [r3, #24]
      break;
 8004394:	e084      	b.n	80044a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fba9 	bl	8004af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0208 	orr.w	r2, r2, #8
 80043b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0204 	bic.w	r2, r2, #4
 80043c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69d9      	ldr	r1, [r3, #28]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	61da      	str	r2, [r3, #28]
      break;
 80043d4:	e064      	b.n	80044a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fc1b 	bl	8004c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69d9      	ldr	r1, [r3, #28]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	021a      	lsls	r2, r3, #8
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	61da      	str	r2, [r3, #28]
      break;
 8004416:	e043      	b.n	80044a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fc8e 	bl	8004d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0208 	orr.w	r2, r2, #8
 8004432:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0204 	bic.w	r2, r2, #4
 8004442:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004456:	e023      	b.n	80044a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fcd8 	bl	8004e14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004472:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004482:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	021a      	lsls	r2, r3, #8
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004498:	e002      	b.n	80044a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
      break;
 800449e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop

080044b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e0f6      	b.n	80046be <HAL_TIM_ConfigClockSource+0x20a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80044ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6f      	ldr	r2, [pc, #444]	; (80046c8 <HAL_TIM_ConfigClockSource+0x214>)
 800450a:	4293      	cmp	r3, r2
 800450c:	f000 80c1 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 8004510:	4a6d      	ldr	r2, [pc, #436]	; (80046c8 <HAL_TIM_ConfigClockSource+0x214>)
 8004512:	4293      	cmp	r3, r2
 8004514:	f200 80c6 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004518:	4a6c      	ldr	r2, [pc, #432]	; (80046cc <HAL_TIM_ConfigClockSource+0x218>)
 800451a:	4293      	cmp	r3, r2
 800451c:	f000 80b9 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 8004520:	4a6a      	ldr	r2, [pc, #424]	; (80046cc <HAL_TIM_ConfigClockSource+0x218>)
 8004522:	4293      	cmp	r3, r2
 8004524:	f200 80be 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004528:	4a69      	ldr	r2, [pc, #420]	; (80046d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	f000 80b1 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 8004530:	4a67      	ldr	r2, [pc, #412]	; (80046d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	f200 80b6 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004538:	4a66      	ldr	r2, [pc, #408]	; (80046d4 <HAL_TIM_ConfigClockSource+0x220>)
 800453a:	4293      	cmp	r3, r2
 800453c:	f000 80a9 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 8004540:	4a64      	ldr	r2, [pc, #400]	; (80046d4 <HAL_TIM_ConfigClockSource+0x220>)
 8004542:	4293      	cmp	r3, r2
 8004544:	f200 80ae 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004548:	4a63      	ldr	r2, [pc, #396]	; (80046d8 <HAL_TIM_ConfigClockSource+0x224>)
 800454a:	4293      	cmp	r3, r2
 800454c:	f000 80a1 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 8004550:	4a61      	ldr	r2, [pc, #388]	; (80046d8 <HAL_TIM_ConfigClockSource+0x224>)
 8004552:	4293      	cmp	r3, r2
 8004554:	f200 80a6 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004558:	4a60      	ldr	r2, [pc, #384]	; (80046dc <HAL_TIM_ConfigClockSource+0x228>)
 800455a:	4293      	cmp	r3, r2
 800455c:	f000 8099 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 8004560:	4a5e      	ldr	r2, [pc, #376]	; (80046dc <HAL_TIM_ConfigClockSource+0x228>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f200 809e 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004568:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800456c:	f000 8091 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 8004570:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004574:	f200 8096 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457c:	f000 8089 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 8004580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004584:	f200 808e 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458c:	d03e      	beq.n	800460c <HAL_TIM_ConfigClockSource+0x158>
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004592:	f200 8087 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	f000 8086 	beq.w	80046aa <HAL_TIM_ConfigClockSource+0x1f6>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d87f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80045a4:	2b70      	cmp	r3, #112	; 0x70
 80045a6:	d01a      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x12a>
 80045a8:	2b70      	cmp	r3, #112	; 0x70
 80045aa:	d87b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d050      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x19e>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d877      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80045b4:	2b50      	cmp	r3, #80	; 0x50
 80045b6:	d03c      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x17e>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	d873      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d058      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x1be>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d86f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d064      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d86b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d060      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d867      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05c      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d05a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x1de>
 80045dc:	e062      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ee:	f000 fcf9 	bl	8004fe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	609a      	str	r2, [r3, #8]
      break;
 800460a:	e04f      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800461c:	f000 fce2 	bl	8004fe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462e:	609a      	str	r2, [r3, #8]
      break;
 8004630:	e03c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	461a      	mov	r2, r3
 8004640:	f000 fc54 	bl	8004eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2150      	movs	r1, #80	; 0x50
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fcad 	bl	8004faa <TIM_ITRx_SetConfig>
      break;
 8004650:	e02c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800465e:	461a      	mov	r2, r3
 8004660:	f000 fc73 	bl	8004f4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2160      	movs	r1, #96	; 0x60
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fc9d 	bl	8004faa <TIM_ITRx_SetConfig>
      break;
 8004670:	e01c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800467e:	461a      	mov	r2, r3
 8004680:	f000 fc34 	bl	8004eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fc8d 	bl	8004faa <TIM_ITRx_SetConfig>
      break;
 8004690:	e00c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f000 fc84 	bl	8004faa <TIM_ITRx_SetConfig>
      break;
 80046a2:	e003      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e000      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80046aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	00100070 	.word	0x00100070
 80046cc:	00100060 	.word	0x00100060
 80046d0:	00100050 	.word	0x00100050
 80046d4:	00100040 	.word	0x00100040
 80046d8:	00100030 	.word	0x00100030
 80046dc:	00100020 	.word	0x00100020

080046e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a4c      	ldr	r2, [pc, #304]	; (8004874 <TIM_Base_SetConfig+0x144>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d017      	beq.n	8004778 <TIM_Base_SetConfig+0x48>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d013      	beq.n	8004778 <TIM_Base_SetConfig+0x48>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a49      	ldr	r2, [pc, #292]	; (8004878 <TIM_Base_SetConfig+0x148>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00f      	beq.n	8004778 <TIM_Base_SetConfig+0x48>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a48      	ldr	r2, [pc, #288]	; (800487c <TIM_Base_SetConfig+0x14c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0x48>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a47      	ldr	r2, [pc, #284]	; (8004880 <TIM_Base_SetConfig+0x150>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0x48>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a46      	ldr	r2, [pc, #280]	; (8004884 <TIM_Base_SetConfig+0x154>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0x48>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a45      	ldr	r2, [pc, #276]	; (8004888 <TIM_Base_SetConfig+0x158>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d108      	bne.n	800478a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a39      	ldr	r2, [pc, #228]	; (8004874 <TIM_Base_SetConfig+0x144>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d023      	beq.n	80047da <TIM_Base_SetConfig+0xaa>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004798:	d01f      	beq.n	80047da <TIM_Base_SetConfig+0xaa>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a36      	ldr	r2, [pc, #216]	; (8004878 <TIM_Base_SetConfig+0x148>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01b      	beq.n	80047da <TIM_Base_SetConfig+0xaa>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a35      	ldr	r2, [pc, #212]	; (800487c <TIM_Base_SetConfig+0x14c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d017      	beq.n	80047da <TIM_Base_SetConfig+0xaa>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a34      	ldr	r2, [pc, #208]	; (8004880 <TIM_Base_SetConfig+0x150>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <TIM_Base_SetConfig+0xaa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a33      	ldr	r2, [pc, #204]	; (8004884 <TIM_Base_SetConfig+0x154>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00f      	beq.n	80047da <TIM_Base_SetConfig+0xaa>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a33      	ldr	r2, [pc, #204]	; (800488c <TIM_Base_SetConfig+0x15c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00b      	beq.n	80047da <TIM_Base_SetConfig+0xaa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a32      	ldr	r2, [pc, #200]	; (8004890 <TIM_Base_SetConfig+0x160>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <TIM_Base_SetConfig+0xaa>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a31      	ldr	r2, [pc, #196]	; (8004894 <TIM_Base_SetConfig+0x164>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_Base_SetConfig+0xaa>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <TIM_Base_SetConfig+0x158>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d108      	bne.n	80047ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a18      	ldr	r2, [pc, #96]	; (8004874 <TIM_Base_SetConfig+0x144>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <TIM_Base_SetConfig+0x110>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a1a      	ldr	r2, [pc, #104]	; (8004884 <TIM_Base_SetConfig+0x154>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00f      	beq.n	8004840 <TIM_Base_SetConfig+0x110>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a1a      	ldr	r2, [pc, #104]	; (800488c <TIM_Base_SetConfig+0x15c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0x110>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a19      	ldr	r2, [pc, #100]	; (8004890 <TIM_Base_SetConfig+0x160>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0x110>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <TIM_Base_SetConfig+0x164>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0x110>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a13      	ldr	r2, [pc, #76]	; (8004888 <TIM_Base_SetConfig+0x158>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b01      	cmp	r3, #1
 8004858:	d105      	bne.n	8004866 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	611a      	str	r2, [r3, #16]
  }
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40015000 	.word	0x40015000
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f023 0201 	bic.w	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 0302 	bic.w	r3, r3, #2
 80048e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a30      	ldr	r2, [pc, #192]	; (80049b4 <TIM_OC1_SetConfig+0x11c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d013      	beq.n	8004920 <TIM_OC1_SetConfig+0x88>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a2f      	ldr	r2, [pc, #188]	; (80049b8 <TIM_OC1_SetConfig+0x120>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00f      	beq.n	8004920 <TIM_OC1_SetConfig+0x88>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a2e      	ldr	r2, [pc, #184]	; (80049bc <TIM_OC1_SetConfig+0x124>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00b      	beq.n	8004920 <TIM_OC1_SetConfig+0x88>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a2d      	ldr	r2, [pc, #180]	; (80049c0 <TIM_OC1_SetConfig+0x128>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <TIM_OC1_SetConfig+0x88>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <TIM_OC1_SetConfig+0x12c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC1_SetConfig+0x88>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <TIM_OC1_SetConfig+0x130>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10c      	bne.n	800493a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0308 	bic.w	r3, r3, #8
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <TIM_OC1_SetConfig+0x11c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <TIM_OC1_SetConfig+0xd2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <TIM_OC1_SetConfig+0x120>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00f      	beq.n	800496a <TIM_OC1_SetConfig+0xd2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <TIM_OC1_SetConfig+0x124>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_OC1_SetConfig+0xd2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <TIM_OC1_SetConfig+0x128>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_OC1_SetConfig+0xd2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_OC1_SetConfig+0x12c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_OC1_SetConfig+0xd2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <TIM_OC1_SetConfig+0x130>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d111      	bne.n	800498e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	621a      	str	r2, [r3, #32]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40015000 	.word	0x40015000

080049cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f023 0210 	bic.w	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f023 0320 	bic.w	r3, r3, #32
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	; (8004adc <TIM_OC2_SetConfig+0x110>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <TIM_OC2_SetConfig+0x74>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a2b      	ldr	r2, [pc, #172]	; (8004ae0 <TIM_OC2_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_OC2_SetConfig+0x74>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ae4 <TIM_OC2_SetConfig+0x118>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10d      	bne.n	8004a5c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <TIM_OC2_SetConfig+0x110>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d013      	beq.n	8004a8c <TIM_OC2_SetConfig+0xc0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <TIM_OC2_SetConfig+0x114>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <TIM_OC2_SetConfig+0xc0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <TIM_OC2_SetConfig+0x11c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00b      	beq.n	8004a8c <TIM_OC2_SetConfig+0xc0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <TIM_OC2_SetConfig+0x120>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_OC2_SetConfig+0xc0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <TIM_OC2_SetConfig+0x124>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC2_SetConfig+0xc0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a17      	ldr	r2, [pc, #92]	; (8004ae4 <TIM_OC2_SetConfig+0x118>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d113      	bne.n	8004ab4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40013400 	.word	0x40013400
 8004ae4:	40015000 	.word	0x40015000
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40014400 	.word	0x40014400
 8004af0:	40014800 	.word	0x40014800

08004af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a2b      	ldr	r2, [pc, #172]	; (8004c00 <TIM_OC3_SetConfig+0x10c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <TIM_OC3_SetConfig+0x72>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a2a      	ldr	r2, [pc, #168]	; (8004c04 <TIM_OC3_SetConfig+0x110>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d003      	beq.n	8004b66 <TIM_OC3_SetConfig+0x72>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <TIM_OC3_SetConfig+0x114>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d10d      	bne.n	8004b82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <TIM_OC3_SetConfig+0x10c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <TIM_OC3_SetConfig+0xbe>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <TIM_OC3_SetConfig+0x110>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00f      	beq.n	8004bb2 <TIM_OC3_SetConfig+0xbe>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <TIM_OC3_SetConfig+0x118>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <TIM_OC3_SetConfig+0xbe>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <TIM_OC3_SetConfig+0x11c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_OC3_SetConfig+0xbe>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <TIM_OC3_SetConfig+0x120>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC3_SetConfig+0xbe>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <TIM_OC3_SetConfig+0x114>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d113      	bne.n	8004bda <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40013400 	.word	0x40013400
 8004c08:	40015000 	.word	0x40015000
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800

08004c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	031b      	lsls	r3, r3, #12
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <TIM_OC4_SetConfig+0x110>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_OC4_SetConfig+0x74>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a2b      	ldr	r2, [pc, #172]	; (8004d2c <TIM_OC4_SetConfig+0x114>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_OC4_SetConfig+0x74>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <TIM_OC4_SetConfig+0x118>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d10d      	bne.n	8004ca8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	031b      	lsls	r3, r3, #12
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <TIM_OC4_SetConfig+0x110>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d013      	beq.n	8004cd8 <TIM_OC4_SetConfig+0xc0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <TIM_OC4_SetConfig+0x114>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00f      	beq.n	8004cd8 <TIM_OC4_SetConfig+0xc0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <TIM_OC4_SetConfig+0x11c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00b      	beq.n	8004cd8 <TIM_OC4_SetConfig+0xc0>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a1d      	ldr	r2, [pc, #116]	; (8004d38 <TIM_OC4_SetConfig+0x120>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_OC4_SetConfig+0xc0>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a1c      	ldr	r2, [pc, #112]	; (8004d3c <TIM_OC4_SetConfig+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC4_SetConfig+0xc0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <TIM_OC4_SetConfig+0x118>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d113      	bne.n	8004d00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ce6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	019b      	lsls	r3, r3, #6
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	019b      	lsls	r3, r3, #6
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40013400 	.word	0x40013400
 8004d30:	40015000 	.word	0x40015000
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800

08004d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <TIM_OC5_SetConfig+0xbc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <TIM_OC5_SetConfig+0x82>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <TIM_OC5_SetConfig+0xc0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00f      	beq.n	8004dc2 <TIM_OC5_SetConfig+0x82>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <TIM_OC5_SetConfig+0xc4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00b      	beq.n	8004dc2 <TIM_OC5_SetConfig+0x82>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <TIM_OC5_SetConfig+0xc8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <TIM_OC5_SetConfig+0x82>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <TIM_OC5_SetConfig+0xcc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d003      	beq.n	8004dc2 <TIM_OC5_SetConfig+0x82>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <TIM_OC5_SetConfig+0xd0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d109      	bne.n	8004dd6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	621a      	str	r2, [r3, #32]
}
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40013400 	.word	0x40013400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800
 8004e10:	40015000 	.word	0x40015000

08004e14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	051b      	lsls	r3, r3, #20
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <TIM_OC6_SetConfig+0xc0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <TIM_OC6_SetConfig+0x84>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <TIM_OC6_SetConfig+0xc4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00f      	beq.n	8004e98 <TIM_OC6_SetConfig+0x84>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a18      	ldr	r2, [pc, #96]	; (8004edc <TIM_OC6_SetConfig+0xc8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <TIM_OC6_SetConfig+0x84>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <TIM_OC6_SetConfig+0xcc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <TIM_OC6_SetConfig+0x84>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a16      	ldr	r2, [pc, #88]	; (8004ee4 <TIM_OC6_SetConfig+0xd0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_OC6_SetConfig+0x84>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <TIM_OC6_SetConfig+0xd4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d109      	bne.n	8004eac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	029b      	lsls	r3, r3, #10
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40013400 	.word	0x40013400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800
 8004ee8:	40015000 	.word	0x40015000

08004eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 030a 	bic.w	r3, r3, #10
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f023 0210 	bic.w	r2, r3, #16
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	031b      	lsls	r3, r3, #12
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f043 0307 	orr.w	r3, r3, #7
 8004fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	609a      	str	r2, [r3, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	431a      	orrs	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2201      	movs	r2, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	431a      	orrs	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e074      	b.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a34      	ldr	r2, [pc, #208]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a33      	ldr	r2, [pc, #204]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a31      	ldr	r2, [pc, #196]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d108      	bne.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a21      	ldr	r2, [pc, #132]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d022      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005108:	d01d      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1f      	ldr	r2, [pc, #124]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d018      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a15      	ldr	r2, [pc, #84]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a18      	ldr	r2, [pc, #96]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a11      	ldr	r2, [pc, #68]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10c      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4313      	orrs	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40013400 	.word	0x40013400
 8005188:	40015000 	.word	0x40015000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40014000 	.word	0x40014000

0800519c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e042      	b.n	80052c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7fc faef 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2224      	movs	r2, #36	; 0x24
 8005256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fb90 	bl	8005998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f891 	bl	80053a0 <UART_SetConfig>
 800527e:	4603      	mov	r3, r0
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e01b      	b.n	80052c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fc0f 	bl	8005adc <UART_CheckIdleState>
 80052be:	4603      	mov	r3, r0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d137      	bne.n	8005350 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Receive_DMA+0x24>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e030      	b.n	8005352 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a18      	ldr	r2, [pc, #96]	; (800535c <HAL_UART_Receive_DMA+0x94>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d01f      	beq.n	8005340 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d018      	beq.n	8005340 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	613b      	str	r3, [r7, #16]
   return(result);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	69f9      	ldr	r1, [r7, #28]
 8005332:	6a3a      	ldr	r2, [r7, #32]
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	61bb      	str	r3, [r7, #24]
   return(result);
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	461a      	mov	r2, r3
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fce0 	bl	8005d0c <UART_Start_Receive_DMA>
 800534c:	4603      	mov	r3, r0
 800534e:	e000      	b.n	8005352 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005350:	2302      	movs	r3, #2
  }
}
 8005352:	4618      	mov	r0, r3
 8005354:	3728      	adds	r7, #40	; 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40008000 	.word	0x40008000

08005360 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a4:	b08c      	sub	sp, #48	; 0x30
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	431a      	orrs	r2, r3
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4baa      	ldr	r3, [pc, #680]	; (8005678 <UART_SetConfig+0x2d8>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d8:	430b      	orrs	r3, r1
 80053da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a9f      	ldr	r2, [pc, #636]	; (800567c <UART_SetConfig+0x2dc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005408:	4313      	orrs	r3, r2
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005416:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005420:	430b      	orrs	r3, r1
 8005422:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	f023 010f 	bic.w	r1, r3, #15
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a90      	ldr	r2, [pc, #576]	; (8005680 <UART_SetConfig+0x2e0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d125      	bne.n	8005490 <UART_SetConfig+0xf0>
 8005444:	4b8f      	ldr	r3, [pc, #572]	; (8005684 <UART_SetConfig+0x2e4>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b03      	cmp	r3, #3
 8005450:	d81a      	bhi.n	8005488 <UART_SetConfig+0xe8>
 8005452:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <UART_SetConfig+0xb8>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	08005469 	.word	0x08005469
 800545c:	08005479 	.word	0x08005479
 8005460:	08005471 	.word	0x08005471
 8005464:	08005481 	.word	0x08005481
 8005468:	2301      	movs	r3, #1
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800546e:	e116      	b.n	800569e <UART_SetConfig+0x2fe>
 8005470:	2302      	movs	r3, #2
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005476:	e112      	b.n	800569e <UART_SetConfig+0x2fe>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800547e:	e10e      	b.n	800569e <UART_SetConfig+0x2fe>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005486:	e10a      	b.n	800569e <UART_SetConfig+0x2fe>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548e:	e106      	b.n	800569e <UART_SetConfig+0x2fe>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a7c      	ldr	r2, [pc, #496]	; (8005688 <UART_SetConfig+0x2e8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d138      	bne.n	800550c <UART_SetConfig+0x16c>
 800549a:	4b7a      	ldr	r3, [pc, #488]	; (8005684 <UART_SetConfig+0x2e4>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	2b0c      	cmp	r3, #12
 80054a6:	d82d      	bhi.n	8005504 <UART_SetConfig+0x164>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x110>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054e5 	.word	0x080054e5
 80054b4:	08005505 	.word	0x08005505
 80054b8:	08005505 	.word	0x08005505
 80054bc:	08005505 	.word	0x08005505
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	08005505 	.word	0x08005505
 80054c8:	08005505 	.word	0x08005505
 80054cc:	08005505 	.word	0x08005505
 80054d0:	080054ed 	.word	0x080054ed
 80054d4:	08005505 	.word	0x08005505
 80054d8:	08005505 	.word	0x08005505
 80054dc:	08005505 	.word	0x08005505
 80054e0:	080054fd 	.word	0x080054fd
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ea:	e0d8      	b.n	800569e <UART_SetConfig+0x2fe>
 80054ec:	2302      	movs	r3, #2
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f2:	e0d4      	b.n	800569e <UART_SetConfig+0x2fe>
 80054f4:	2304      	movs	r3, #4
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fa:	e0d0      	b.n	800569e <UART_SetConfig+0x2fe>
 80054fc:	2308      	movs	r3, #8
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005502:	e0cc      	b.n	800569e <UART_SetConfig+0x2fe>
 8005504:	2310      	movs	r3, #16
 8005506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800550a:	e0c8      	b.n	800569e <UART_SetConfig+0x2fe>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a5e      	ldr	r2, [pc, #376]	; (800568c <UART_SetConfig+0x2ec>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d125      	bne.n	8005562 <UART_SetConfig+0x1c2>
 8005516:	4b5b      	ldr	r3, [pc, #364]	; (8005684 <UART_SetConfig+0x2e4>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005520:	2b30      	cmp	r3, #48	; 0x30
 8005522:	d016      	beq.n	8005552 <UART_SetConfig+0x1b2>
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d818      	bhi.n	800555a <UART_SetConfig+0x1ba>
 8005528:	2b20      	cmp	r3, #32
 800552a:	d00a      	beq.n	8005542 <UART_SetConfig+0x1a2>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d814      	bhi.n	800555a <UART_SetConfig+0x1ba>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <UART_SetConfig+0x19a>
 8005534:	2b10      	cmp	r3, #16
 8005536:	d008      	beq.n	800554a <UART_SetConfig+0x1aa>
 8005538:	e00f      	b.n	800555a <UART_SetConfig+0x1ba>
 800553a:	2300      	movs	r3, #0
 800553c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005540:	e0ad      	b.n	800569e <UART_SetConfig+0x2fe>
 8005542:	2302      	movs	r3, #2
 8005544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005548:	e0a9      	b.n	800569e <UART_SetConfig+0x2fe>
 800554a:	2304      	movs	r3, #4
 800554c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005550:	e0a5      	b.n	800569e <UART_SetConfig+0x2fe>
 8005552:	2308      	movs	r3, #8
 8005554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005558:	e0a1      	b.n	800569e <UART_SetConfig+0x2fe>
 800555a:	2310      	movs	r3, #16
 800555c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005560:	e09d      	b.n	800569e <UART_SetConfig+0x2fe>
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4a      	ldr	r2, [pc, #296]	; (8005690 <UART_SetConfig+0x2f0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d125      	bne.n	80055b8 <UART_SetConfig+0x218>
 800556c:	4b45      	ldr	r3, [pc, #276]	; (8005684 <UART_SetConfig+0x2e4>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005576:	2bc0      	cmp	r3, #192	; 0xc0
 8005578:	d016      	beq.n	80055a8 <UART_SetConfig+0x208>
 800557a:	2bc0      	cmp	r3, #192	; 0xc0
 800557c:	d818      	bhi.n	80055b0 <UART_SetConfig+0x210>
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d00a      	beq.n	8005598 <UART_SetConfig+0x1f8>
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d814      	bhi.n	80055b0 <UART_SetConfig+0x210>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <UART_SetConfig+0x1f0>
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d008      	beq.n	80055a0 <UART_SetConfig+0x200>
 800558e:	e00f      	b.n	80055b0 <UART_SetConfig+0x210>
 8005590:	2300      	movs	r3, #0
 8005592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005596:	e082      	b.n	800569e <UART_SetConfig+0x2fe>
 8005598:	2302      	movs	r3, #2
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800559e:	e07e      	b.n	800569e <UART_SetConfig+0x2fe>
 80055a0:	2304      	movs	r3, #4
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055a6:	e07a      	b.n	800569e <UART_SetConfig+0x2fe>
 80055a8:	2308      	movs	r3, #8
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ae:	e076      	b.n	800569e <UART_SetConfig+0x2fe>
 80055b0:	2310      	movs	r3, #16
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b6:	e072      	b.n	800569e <UART_SetConfig+0x2fe>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a35      	ldr	r2, [pc, #212]	; (8005694 <UART_SetConfig+0x2f4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d12a      	bne.n	8005618 <UART_SetConfig+0x278>
 80055c2:	4b30      	ldr	r3, [pc, #192]	; (8005684 <UART_SetConfig+0x2e4>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d0:	d01a      	beq.n	8005608 <UART_SetConfig+0x268>
 80055d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d6:	d81b      	bhi.n	8005610 <UART_SetConfig+0x270>
 80055d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055dc:	d00c      	beq.n	80055f8 <UART_SetConfig+0x258>
 80055de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e2:	d815      	bhi.n	8005610 <UART_SetConfig+0x270>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <UART_SetConfig+0x250>
 80055e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ec:	d008      	beq.n	8005600 <UART_SetConfig+0x260>
 80055ee:	e00f      	b.n	8005610 <UART_SetConfig+0x270>
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055f6:	e052      	b.n	800569e <UART_SetConfig+0x2fe>
 80055f8:	2302      	movs	r3, #2
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055fe:	e04e      	b.n	800569e <UART_SetConfig+0x2fe>
 8005600:	2304      	movs	r3, #4
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005606:	e04a      	b.n	800569e <UART_SetConfig+0x2fe>
 8005608:	2308      	movs	r3, #8
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560e:	e046      	b.n	800569e <UART_SetConfig+0x2fe>
 8005610:	2310      	movs	r3, #16
 8005612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005616:	e042      	b.n	800569e <UART_SetConfig+0x2fe>
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <UART_SetConfig+0x2dc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d13a      	bne.n	8005698 <UART_SetConfig+0x2f8>
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <UART_SetConfig+0x2e4>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800562c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005630:	d01a      	beq.n	8005668 <UART_SetConfig+0x2c8>
 8005632:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005636:	d81b      	bhi.n	8005670 <UART_SetConfig+0x2d0>
 8005638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563c:	d00c      	beq.n	8005658 <UART_SetConfig+0x2b8>
 800563e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005642:	d815      	bhi.n	8005670 <UART_SetConfig+0x2d0>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <UART_SetConfig+0x2b0>
 8005648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564c:	d008      	beq.n	8005660 <UART_SetConfig+0x2c0>
 800564e:	e00f      	b.n	8005670 <UART_SetConfig+0x2d0>
 8005650:	2300      	movs	r3, #0
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005656:	e022      	b.n	800569e <UART_SetConfig+0x2fe>
 8005658:	2302      	movs	r3, #2
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800565e:	e01e      	b.n	800569e <UART_SetConfig+0x2fe>
 8005660:	2304      	movs	r3, #4
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005666:	e01a      	b.n	800569e <UART_SetConfig+0x2fe>
 8005668:	2308      	movs	r3, #8
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800566e:	e016      	b.n	800569e <UART_SetConfig+0x2fe>
 8005670:	2310      	movs	r3, #16
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005676:	e012      	b.n	800569e <UART_SetConfig+0x2fe>
 8005678:	cfff69f3 	.word	0xcfff69f3
 800567c:	40008000 	.word	0x40008000
 8005680:	40013800 	.word	0x40013800
 8005684:	40021000 	.word	0x40021000
 8005688:	40004400 	.word	0x40004400
 800568c:	40004800 	.word	0x40004800
 8005690:	40004c00 	.word	0x40004c00
 8005694:	40005000 	.word	0x40005000
 8005698:	2310      	movs	r3, #16
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4aae      	ldr	r2, [pc, #696]	; (800595c <UART_SetConfig+0x5bc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	f040 8097 	bne.w	80057d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d823      	bhi.n	80056fa <UART_SetConfig+0x35a>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0x318>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056fb 	.word	0x080056fb
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	080056eb 	.word	0x080056eb
 80056cc:	080056fb 	.word	0x080056fb
 80056d0:	080056fb 	.word	0x080056fb
 80056d4:	080056fb 	.word	0x080056fb
 80056d8:	080056f3 	.word	0x080056f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056dc:	f7fd fdde 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 80056e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056e2:	e010      	b.n	8005706 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b9e      	ldr	r3, [pc, #632]	; (8005960 <UART_SetConfig+0x5c0>)
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056e8:	e00d      	b.n	8005706 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7fd fd69 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 80056ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056f0:	e009      	b.n	8005706 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056f8:	e005      	b.n	8005706 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005704:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8130 	beq.w	800596e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	4a94      	ldr	r2, [pc, #592]	; (8005964 <UART_SetConfig+0x5c4>)
 8005714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005718:	461a      	mov	r2, r3
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005720:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	4413      	add	r3, r2
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	429a      	cmp	r2, r3
 8005730:	d305      	bcc.n	800573e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	429a      	cmp	r2, r3
 800573c:	d903      	bls.n	8005746 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005744:	e113      	b.n	800596e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	2200      	movs	r2, #0
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	60fa      	str	r2, [r7, #12]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	4a84      	ldr	r2, [pc, #528]	; (8005964 <UART_SetConfig+0x5c4>)
 8005754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005758:	b29b      	uxth	r3, r3
 800575a:	2200      	movs	r2, #0
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005764:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005768:	f7fb f99c 	bl	8000aa4 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	020b      	lsls	r3, r1, #8
 800577e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005782:	0202      	lsls	r2, r0, #8
 8005784:	6979      	ldr	r1, [r7, #20]
 8005786:	6849      	ldr	r1, [r1, #4]
 8005788:	0849      	lsrs	r1, r1, #1
 800578a:	2000      	movs	r0, #0
 800578c:	460c      	mov	r4, r1
 800578e:	4605      	mov	r5, r0
 8005790:	eb12 0804 	adds.w	r8, r2, r4
 8005794:	eb43 0905 	adc.w	r9, r3, r5
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	469a      	mov	sl, r3
 80057a0:	4693      	mov	fp, r2
 80057a2:	4652      	mov	r2, sl
 80057a4:	465b      	mov	r3, fp
 80057a6:	4640      	mov	r0, r8
 80057a8:	4649      	mov	r1, r9
 80057aa:	f7fb f97b 	bl	8000aa4 <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4613      	mov	r3, r2
 80057b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057bc:	d308      	bcc.n	80057d0 <UART_SetConfig+0x430>
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c4:	d204      	bcs.n	80057d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a3a      	ldr	r2, [r7, #32]
 80057cc:	60da      	str	r2, [r3, #12]
 80057ce:	e0ce      	b.n	800596e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057d6:	e0ca      	b.n	800596e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e0:	d166      	bne.n	80058b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80057e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d827      	bhi.n	800583a <UART_SetConfig+0x49a>
 80057ea:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <UART_SetConfig+0x450>)
 80057ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f0:	08005815 	.word	0x08005815
 80057f4:	0800581d 	.word	0x0800581d
 80057f8:	08005825 	.word	0x08005825
 80057fc:	0800583b 	.word	0x0800583b
 8005800:	0800582b 	.word	0x0800582b
 8005804:	0800583b 	.word	0x0800583b
 8005808:	0800583b 	.word	0x0800583b
 800580c:	0800583b 	.word	0x0800583b
 8005810:	08005833 	.word	0x08005833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005814:	f7fd fd42 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8005818:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800581a:	e014      	b.n	8005846 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800581c:	f7fd fd54 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 8005820:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005822:	e010      	b.n	8005846 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005824:	4b4e      	ldr	r3, [pc, #312]	; (8005960 <UART_SetConfig+0x5c0>)
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005828:	e00d      	b.n	8005846 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582a:	f7fd fcc9 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800582e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005830:	e009      	b.n	8005846 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005838:	e005      	b.n	8005846 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8090 	beq.w	800596e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	4a44      	ldr	r2, [pc, #272]	; (8005964 <UART_SetConfig+0x5c4>)
 8005854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005858:	461a      	mov	r2, r3
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005860:	005a      	lsls	r2, r3, #1
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	441a      	add	r2, r3
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	2b0f      	cmp	r3, #15
 8005878:	d916      	bls.n	80058a8 <UART_SetConfig+0x508>
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	d212      	bcs.n	80058a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f023 030f 	bic.w	r3, r3, #15
 800588a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	b29b      	uxth	r3, r3
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	b29a      	uxth	r2, r3
 8005898:	8bfb      	ldrh	r3, [r7, #30]
 800589a:	4313      	orrs	r3, r2
 800589c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	8bfa      	ldrh	r2, [r7, #30]
 80058a4:	60da      	str	r2, [r3, #12]
 80058a6:	e062      	b.n	800596e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058ae:	e05e      	b.n	800596e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d828      	bhi.n	800590a <UART_SetConfig+0x56a>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <UART_SetConfig+0x520>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	0800590b 	.word	0x0800590b
 80058d0:	080058fb 	.word	0x080058fb
 80058d4:	0800590b 	.word	0x0800590b
 80058d8:	0800590b 	.word	0x0800590b
 80058dc:	0800590b 	.word	0x0800590b
 80058e0:	08005903 	.word	0x08005903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e4:	f7fd fcda 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 80058e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ea:	e014      	b.n	8005916 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7fd fcec 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 80058f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058f2:	e010      	b.n	8005916 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f4:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <UART_SetConfig+0x5c0>)
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058f8:	e00d      	b.n	8005916 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058fa:	f7fd fc61 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 80058fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005900:	e009      	b.n	8005916 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005908:	e005      	b.n	8005916 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005914:	bf00      	nop
    }

    if (pclk != 0U)
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d028      	beq.n	800596e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	4a10      	ldr	r2, [pc, #64]	; (8005964 <UART_SetConfig+0x5c4>)
 8005922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005926:	461a      	mov	r2, r3
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	fbb3 f2f2 	udiv	r2, r3, r2
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	441a      	add	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	2b0f      	cmp	r3, #15
 8005944:	d910      	bls.n	8005968 <UART_SetConfig+0x5c8>
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d20c      	bcs.n	8005968 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	b29a      	uxth	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60da      	str	r2, [r3, #12]
 8005958:	e009      	b.n	800596e <UART_SetConfig+0x5ce>
 800595a:	bf00      	nop
 800595c:	40008000 	.word	0x40008000
 8005960:	00f42400 	.word	0x00f42400
 8005964:	08006420 	.word	0x08006420
      }
      else
      {
        ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2201      	movs	r2, #1
 8005972:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2201      	movs	r2, #1
 800597a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2200      	movs	r2, #0
 8005982:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2200      	movs	r2, #0
 8005988:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800598a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800598e:	4618      	mov	r0, r3
 8005990:	3730      	adds	r7, #48	; 0x30
 8005992:	46bd      	mov	sp, r7
 8005994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01a      	beq.n	8005aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a96:	d10a      	bne.n	8005aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b098      	sub	sp, #96	; 0x60
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aec:	f7fc f902 	bl	8001cf4 <HAL_GetTick>
 8005af0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d12f      	bne.n	8005b60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f88e 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d022      	beq.n	8005b60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b38:	647b      	str	r3, [r7, #68]	; 0x44
 8005b3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e6      	bne.n	8005b1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e063      	b.n	8005c28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d149      	bne.n	8005c02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b76:	2200      	movs	r2, #0
 8005b78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f857 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d03c      	beq.n	8005c02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	623b      	str	r3, [r7, #32]
   return(result);
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e6      	bne.n	8005b88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bda:	61fa      	str	r2, [r7, #28]
 8005bdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	69b9      	ldr	r1, [r7, #24]
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	617b      	str	r3, [r7, #20]
   return(result);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e5      	bne.n	8005bba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e012      	b.n	8005c28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3758      	adds	r7, #88	; 0x58
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c40:	e04f      	b.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d04b      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7fc f853 	bl	8001cf4 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e04e      	b.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d037      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b80      	cmp	r3, #128	; 0x80
 8005c76:	d034      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d031      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d110      	bne.n	8005cae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2208      	movs	r2, #8
 8005c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f920 	bl	8005eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e029      	b.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbc:	d111      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f906 	bl	8005eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e00f      	b.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4013      	ands	r3, r2
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	bf0c      	ite	eq
 8005cf2:	2301      	moveq	r3, #1
 8005cf4:	2300      	movne	r3, #0
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d0a0      	beq.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b096      	sub	sp, #88	; 0x58
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	4613      	mov	r3, r2
 8005d18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	88fa      	ldrh	r2, [r7, #6]
 8005d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2222      	movs	r2, #34	; 0x22
 8005d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d02d      	beq.n	8005d9e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d48:	4a40      	ldr	r2, [pc, #256]	; (8005e4c <UART_Start_Receive_DMA+0x140>)
 8005d4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d52:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <UART_Start_Receive_DMA+0x144>)
 8005d54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d5c:	4a3d      	ldr	r2, [pc, #244]	; (8005e54 <UART_Start_Receive_DMA+0x148>)
 8005d5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d66:	2200      	movs	r2, #0
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3324      	adds	r3, #36	; 0x24
 8005d76:	4619      	mov	r1, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	f7fc f97c 	bl	800207c <HAL_DMA_Start_IT>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e051      	b.n	8005e42 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d018      	beq.n	8005dd8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dba:	657b      	str	r3, [r7, #84]	; 0x54
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e6      	bne.n	8005da6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3308      	adds	r3, #8
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	653b      	str	r3, [r7, #80]	; 0x50
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3308      	adds	r3, #8
 8005df6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005df8:	637a      	str	r2, [r7, #52]	; 0x34
 8005dfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3308      	adds	r3, #8
 8005e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3308      	adds	r3, #8
 8005e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e2c:	623a      	str	r2, [r7, #32]
 8005e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	69f9      	ldr	r1, [r7, #28]
 8005e32:	6a3a      	ldr	r2, [r7, #32]
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e5      	bne.n	8005e0c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3758      	adds	r7, #88	; 0x58
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	08005fa7 	.word	0x08005fa7
 8005e50:	080060d3 	.word	0x080060d3
 8005e54:	08006111 	.word	0x08006111

08005e58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b08f      	sub	sp, #60	; 0x3c
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e80:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e6      	bne.n	8005e60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb2:	61ba      	str	r2, [r7, #24]
 8005eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6979      	ldr	r1, [r7, #20]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e5      	bne.n	8005e92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8005ece:	bf00      	nop
 8005ed0:	373c      	adds	r7, #60	; 0x3c
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b095      	sub	sp, #84	; 0x54
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f00:	643b      	str	r3, [r7, #64]	; 0x40
 8005f02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e6      	bne.n	8005ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	f023 0301 	bic.w	r3, r3, #1
 8005f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e3      	bne.n	8005f14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d118      	bne.n	8005f86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f023 0310 	bic.w	r3, r3, #16
 8005f68:	647b      	str	r3, [r7, #68]	; 0x44
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f72:	61bb      	str	r3, [r7, #24]
 8005f74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6979      	ldr	r1, [r7, #20]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e6      	bne.n	8005f54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f9a:	bf00      	nop
 8005f9c:	3754      	adds	r7, #84	; 0x54
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b09c      	sub	sp, #112	; 0x70
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d171      	bne.n	80060a6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fde:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e6      	bne.n	8005fca <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3308      	adds	r3, #8
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	f023 0301 	bic.w	r3, r3, #1
 8006012:	667b      	str	r3, [r7, #100]	; 0x64
 8006014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800601c:	647a      	str	r2, [r7, #68]	; 0x44
 800601e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e5      	bne.n	8005ffc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	623b      	str	r3, [r7, #32]
   return(result);
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006046:	663b      	str	r3, [r7, #96]	; 0x60
 8006048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006050:	633a      	str	r2, [r7, #48]	; 0x30
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e5      	bne.n	8006030 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006066:	2220      	movs	r2, #32
 8006068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d118      	bne.n	80060a6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	60fb      	str	r3, [r7, #12]
   return(result);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f023 0310 	bic.w	r3, r3, #16
 8006088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800608a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	69b9      	ldr	r1, [r7, #24]
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	617b      	str	r3, [r7, #20]
   return(result);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e6      	bne.n	8006074 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a8:	2200      	movs	r2, #0
 80060aa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d107      	bne.n	80060c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060ba:	4619      	mov	r1, r3
 80060bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060be:	f7ff f963 	bl	8005388 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060c2:	e002      	b.n	80060ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80060c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060c6:	f7fb fa13 	bl	80014f0 <HAL_UART_RxCpltCallback>
}
 80060ca:	bf00      	nop
 80060cc:	3770      	adds	r7, #112	; 0x70
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d109      	bne.n	8006102 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	4619      	mov	r1, r3
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7ff f944 	bl	8005388 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006100:	e002      	b.n	8006108 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff f92c 	bl	8005360 <HAL_UART_RxHalfCpltCallback>
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006124:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800612c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006138:	2b80      	cmp	r3, #128	; 0x80
 800613a:	d109      	bne.n	8006150 <UART_DMAError+0x40>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b21      	cmp	r3, #33	; 0x21
 8006140:	d106      	bne.n	8006150 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2200      	movs	r2, #0
 8006146:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800614a:	6978      	ldr	r0, [r7, #20]
 800614c:	f7ff fe84 	bl	8005e58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d109      	bne.n	8006172 <UART_DMAError+0x62>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b22      	cmp	r3, #34	; 0x22
 8006162:	d106      	bne.n	8006172 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2200      	movs	r2, #0
 8006168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800616c:	6978      	ldr	r0, [r7, #20]
 800616e:	f7ff feb4 	bl	8005eda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006178:	f043 0210 	orr.w	r2, r3, #16
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006182:	6978      	ldr	r0, [r7, #20]
 8006184:	f7ff f8f6 	bl	8005374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006188:	bf00      	nop
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e027      	b.n	80061f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2224      	movs	r2, #36	; 0x24
 80061b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006216:	2302      	movs	r3, #2
 8006218:	e02d      	b.n	8006276 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2224      	movs	r2, #36	; 0x24
 8006226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f850 	bl	80062fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006292:	2302      	movs	r3, #2
 8006294:	e02d      	b.n	80062f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2224      	movs	r2, #36	; 0x24
 80062a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f812 	bl	80062fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006308:	2b00      	cmp	r3, #0
 800630a:	d108      	bne.n	800631e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800631c:	e031      	b.n	8006382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800631e:	2308      	movs	r3, #8
 8006320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006322:	2308      	movs	r3, #8
 8006324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	0e5b      	lsrs	r3, r3, #25
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	0f5b      	lsrs	r3, r3, #29
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006346:	7bbb      	ldrb	r3, [r7, #14]
 8006348:	7b3a      	ldrb	r2, [r7, #12]
 800634a:	4911      	ldr	r1, [pc, #68]	; (8006390 <UARTEx_SetNbDataToProcess+0x94>)
 800634c:	5c8a      	ldrb	r2, [r1, r2]
 800634e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006352:	7b3a      	ldrb	r2, [r7, #12]
 8006354:	490f      	ldr	r1, [pc, #60]	; (8006394 <UARTEx_SetNbDataToProcess+0x98>)
 8006356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006358:	fb93 f3f2 	sdiv	r3, r3, r2
 800635c:	b29a      	uxth	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	7b7a      	ldrb	r2, [r7, #13]
 8006368:	4909      	ldr	r1, [pc, #36]	; (8006390 <UARTEx_SetNbDataToProcess+0x94>)
 800636a:	5c8a      	ldrb	r2, [r1, r2]
 800636c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006370:	7b7a      	ldrb	r2, [r7, #13]
 8006372:	4908      	ldr	r1, [pc, #32]	; (8006394 <UARTEx_SetNbDataToProcess+0x98>)
 8006374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006376:	fb93 f3f2 	sdiv	r3, r3, r2
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	08006438 	.word	0x08006438
 8006394:	08006440 	.word	0x08006440

08006398 <memset>:
 8006398:	4402      	add	r2, r0
 800639a:	4603      	mov	r3, r0
 800639c:	4293      	cmp	r3, r2
 800639e:	d100      	bne.n	80063a2 <memset+0xa>
 80063a0:	4770      	bx	lr
 80063a2:	f803 1b01 	strb.w	r1, [r3], #1
 80063a6:	e7f9      	b.n	800639c <memset+0x4>

080063a8 <__libc_init_array>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	4d0d      	ldr	r5, [pc, #52]	; (80063e0 <__libc_init_array+0x38>)
 80063ac:	4c0d      	ldr	r4, [pc, #52]	; (80063e4 <__libc_init_array+0x3c>)
 80063ae:	1b64      	subs	r4, r4, r5
 80063b0:	10a4      	asrs	r4, r4, #2
 80063b2:	2600      	movs	r6, #0
 80063b4:	42a6      	cmp	r6, r4
 80063b6:	d109      	bne.n	80063cc <__libc_init_array+0x24>
 80063b8:	4d0b      	ldr	r5, [pc, #44]	; (80063e8 <__libc_init_array+0x40>)
 80063ba:	4c0c      	ldr	r4, [pc, #48]	; (80063ec <__libc_init_array+0x44>)
 80063bc:	f000 f818 	bl	80063f0 <_init>
 80063c0:	1b64      	subs	r4, r4, r5
 80063c2:	10a4      	asrs	r4, r4, #2
 80063c4:	2600      	movs	r6, #0
 80063c6:	42a6      	cmp	r6, r4
 80063c8:	d105      	bne.n	80063d6 <__libc_init_array+0x2e>
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d0:	4798      	blx	r3
 80063d2:	3601      	adds	r6, #1
 80063d4:	e7ee      	b.n	80063b4 <__libc_init_array+0xc>
 80063d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063da:	4798      	blx	r3
 80063dc:	3601      	adds	r6, #1
 80063de:	e7f2      	b.n	80063c6 <__libc_init_array+0x1e>
 80063e0:	08006450 	.word	0x08006450
 80063e4:	08006450 	.word	0x08006450
 80063e8:	08006450 	.word	0x08006450
 80063ec:	08006454 	.word	0x08006454

080063f0 <_init>:
 80063f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f2:	bf00      	nop
 80063f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f6:	bc08      	pop	{r3}
 80063f8:	469e      	mov	lr, r3
 80063fa:	4770      	bx	lr

080063fc <_fini>:
 80063fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fe:	bf00      	nop
 8006400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006402:	bc08      	pop	{r3}
 8006404:	469e      	mov	lr, r3
 8006406:	4770      	bx	lr
