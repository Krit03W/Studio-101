
Studio-101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072cc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e4  080074e4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074ec  080074ec  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080074f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000080  08007574  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08007574  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001315c  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ce  00000000  00000000  0003324f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  00035720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5b  00000000  00000000  000367e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026486  00000000  00000000  0003753b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013872  00000000  00000000  0005d9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc0da  00000000  00000000  00071233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bb4  00000000  00000000  0016d310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00171ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000080 	.word	0x20000080
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800748c 	.word	0x0800748c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000084 	.word	0x20000084
 8000214:	0800748c 	.word	0x0800748c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b970 	b.w	8000f18 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9e08      	ldr	r6, [sp, #32]
 8000c56:	460d      	mov	r5, r1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	460f      	mov	r7, r1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d14a      	bne.n	8000cf6 <__udivmoddi4+0xa6>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	4694      	mov	ip, r2
 8000c64:	d965      	bls.n	8000d32 <__udivmoddi4+0xe2>
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	b143      	cbz	r3, 8000c7e <__udivmoddi4+0x2e>
 8000c6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c70:	f1c3 0220 	rsb	r2, r3, #32
 8000c74:	409f      	lsls	r7, r3
 8000c76:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7a:	4317      	orrs	r7, r2
 8000c7c:	409c      	lsls	r4, r3
 8000c7e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c82:	fa1f f58c 	uxth.w	r5, ip
 8000c86:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c8a:	0c22      	lsrs	r2, r4, #16
 8000c8c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c90:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c94:	fb01 f005 	mul.w	r0, r1, r5
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x62>
 8000c9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ca4:	f080 811c 	bcs.w	8000ee0 <__udivmoddi4+0x290>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f240 8119 	bls.w	8000ee0 <__udivmoddi4+0x290>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	4462      	add	r2, ip
 8000cb2:	1a12      	subs	r2, r2, r0
 8000cb4:	b2a4      	uxth	r4, r4
 8000cb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cbe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc2:	fb00 f505 	mul.w	r5, r0, r5
 8000cc6:	42a5      	cmp	r5, r4
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x90>
 8000cca:	eb1c 0404 	adds.w	r4, ip, r4
 8000cce:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd2:	f080 8107 	bcs.w	8000ee4 <__udivmoddi4+0x294>
 8000cd6:	42a5      	cmp	r5, r4
 8000cd8:	f240 8104 	bls.w	8000ee4 <__udivmoddi4+0x294>
 8000cdc:	4464      	add	r4, ip
 8000cde:	3802      	subs	r0, #2
 8000ce0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ce4:	1b64      	subs	r4, r4, r5
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	b11e      	cbz	r6, 8000cf2 <__udivmoddi4+0xa2>
 8000cea:	40dc      	lsrs	r4, r3
 8000cec:	2300      	movs	r3, #0
 8000cee:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0xbc>
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	f000 80ed 	beq.w	8000eda <__udivmoddi4+0x28a>
 8000d00:	2100      	movs	r1, #0
 8000d02:	e9c6 0500 	strd	r0, r5, [r6]
 8000d06:	4608      	mov	r0, r1
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	fab3 f183 	clz	r1, r3
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d149      	bne.n	8000da8 <__udivmoddi4+0x158>
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d302      	bcc.n	8000d1e <__udivmoddi4+0xce>
 8000d18:	4282      	cmp	r2, r0
 8000d1a:	f200 80f8 	bhi.w	8000f0e <__udivmoddi4+0x2be>
 8000d1e:	1a84      	subs	r4, r0, r2
 8000d20:	eb65 0203 	sbc.w	r2, r5, r3
 8000d24:	2001      	movs	r0, #1
 8000d26:	4617      	mov	r7, r2
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d0e2      	beq.n	8000cf2 <__udivmoddi4+0xa2>
 8000d2c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d30:	e7df      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xe6>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f382 	clz	r3, r2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 8090 	bne.w	8000e60 <__udivmoddi4+0x210>
 8000d40:	1a8a      	subs	r2, r1, r2
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d50:	fb07 2015 	mls	r0, r7, r5, r2
 8000d54:	0c22      	lsrs	r2, r4, #16
 8000d56:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d5a:	fb0e f005 	mul.w	r0, lr, r5
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x124>
 8000d62:	eb1c 0202 	adds.w	r2, ip, r2
 8000d66:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x122>
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2b8>
 8000d72:	4645      	mov	r5, r8
 8000d74:	1a12      	subs	r2, r2, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x14e>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x14c>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2c2>
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000da6:	e79f      	b.n	8000ce8 <__udivmoddi4+0x98>
 8000da8:	f1c1 0720 	rsb	r7, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa05 f401 	lsl.w	r4, r5, r1
 8000dba:	fa20 f307 	lsr.w	r3, r0, r7
 8000dbe:	40fd      	lsrs	r5, r7
 8000dc0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	fb09 5518 	mls	r5, r9, r8, r5
 8000dd2:	0c1c      	lsrs	r4, r3, #16
 8000dd4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd8:	fb08 f50e 	mul.w	r5, r8, lr
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	fa00 f001 	lsl.w	r0, r0, r1
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b0>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2b4>
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2b4>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4464      	add	r4, ip
 8000e00:	1b64      	subs	r4, r4, r5
 8000e02:	b29d      	uxth	r5, r3
 8000e04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e08:	fb09 4413 	mls	r4, r9, r3, r4
 8000e0c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e10:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1da>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2ac>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2ac>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	4464      	add	r4, ip
 8000e2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e2e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e32:	eba4 040e 	sub.w	r4, r4, lr
 8000e36:	42ac      	cmp	r4, r5
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46ae      	mov	lr, r5
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x29c>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x298>
 8000e40:	b156      	cbz	r6, 8000e58 <__udivmoddi4+0x208>
 8000e42:	ebb0 0208 	subs.w	r2, r0, r8
 8000e46:	eb64 040e 	sbc.w	r4, r4, lr
 8000e4a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e4e:	40ca      	lsrs	r2, r1
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	4317      	orrs	r7, r2
 8000e54:	e9c6 7400 	strd	r7, r4, [r6]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e60:	f1c3 0120 	rsb	r1, r3, #32
 8000e64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e68:	fa20 f201 	lsr.w	r2, r0, r1
 8000e6c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e70:	409d      	lsls	r5, r3
 8000e72:	432a      	orrs	r2, r5
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e80:	fb07 1510 	mls	r5, r7, r0, r1
 8000e84:	0c11      	lsrs	r1, r2, #16
 8000e86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e8a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e8e:	428d      	cmp	r5, r1
 8000e90:	fa04 f403 	lsl.w	r4, r4, r3
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x258>
 8000e96:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b0>
 8000ea0:	428d      	cmp	r5, r1
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b0>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	1b49      	subs	r1, r1, r5
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb0:	fb07 1115 	mls	r1, r7, r5, r1
 8000eb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ebc:	4291      	cmp	r1, r2
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x282>
 8000ec0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2a8>
 8000eca:	4291      	cmp	r1, r2
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2a8>
 8000ece:	3d02      	subs	r5, #2
 8000ed0:	4462      	add	r2, ip
 8000ed2:	1a52      	subs	r2, r2, r1
 8000ed4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0xfc>
 8000eda:	4631      	mov	r1, r6
 8000edc:	4630      	mov	r0, r6
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000ee0:	4639      	mov	r1, r7
 8000ee2:	e6e6      	b.n	8000cb2 <__udivmoddi4+0x62>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	e6fb      	b.n	8000ce0 <__udivmoddi4+0x90>
 8000ee8:	4548      	cmp	r0, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f0>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f0>
 8000ef8:	4645      	mov	r5, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x282>
 8000efc:	462b      	mov	r3, r5
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1da>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x258>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b0>
 8000f08:	3d02      	subs	r5, #2
 8000f0a:	4462      	add	r2, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x124>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e70a      	b.n	8000d28 <__udivmoddi4+0xd8>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x14e>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f001 fdc1 	bl	8002aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f8c8 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 faee 	bl	8001510 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f34:	f000 fac2 	bl	80014bc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000f38:	f000 f90e 	bl	8001158 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000f3c:	f000 f9a2 	bl	8001284 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f40:	f000 f954 	bl	80011ec <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f44:	f000 fa16 	bl	8001374 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f48:	f000 fa6a 	bl	8001420 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  UARTDMAConfig();
 8000f4c:	f000 fb88 	bl	8001660 <UARTDMAConfig>
  HAL_TIM_Base_Start(&htim3);
 8000f50:	484d      	ldr	r0, [pc, #308]	; (8001088 <main+0x168>)
 8000f52:	f003 fbfd 	bl	8004750 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f56:	2104      	movs	r1, #4
 8000f58:	484b      	ldr	r0, [pc, #300]	; (8001088 <main+0x168>)
 8000f5a:	f003 fd43 	bl	80049e4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000f5e:	213c      	movs	r1, #60	; 0x3c
 8000f60:	484a      	ldr	r0, [pc, #296]	; (800108c <main+0x16c>)
 8000f62:	f003 fef7 	bl	8004d54 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000f66:	484a      	ldr	r0, [pc, #296]	; (8001090 <main+0x170>)
 8000f68:	f003 fc62 	bl	8004830 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	4848      	ldr	r0, [pc, #288]	; (8001094 <main+0x174>)
 8000f72:	f002 fb29 	bl	80035c8 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  z_transition();
//	  update_position();
	  sensor1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f002 fb0b 	bl	8003598 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <main+0x178>)
 8000f88:	701a      	strb	r2, [r3, #0]
	  sensor2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f002 fb01 	bl	8003598 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b40      	ldr	r3, [pc, #256]	; (800109c <main+0x17c>)
 8000f9c:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa2:	483f      	ldr	r0, [pc, #252]	; (80010a0 <main+0x180>)
 8000fa4:	f002 faf8 	bl	8003598 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <main+0x9c>
		  mode = 1;
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <main+0x184>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
		  target_position = 600;
 8000fb4:	4b3c      	ldr	r3, [pc, #240]	; (80010a8 <main+0x188>)
 8000fb6:	4a3d      	ldr	r2, [pc, #244]	; (80010ac <main+0x18c>)
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e003      	b.n	8000fc4 <main+0xa4>
	  }
	  else{
		  target_position = 0;
 8000fbc:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <main+0x188>)
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
//			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
//			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
//		  }
//	  }

	  trajectory();
 8000fc4:	f000 fcb0 	bl	8001928 <trajectory>

	  static uint64_t timestamp_velocity_PID = 0;
	  uint64_t currentTime = micros();
 8000fc8:	f000 fb72 	bl	80016b0 <micros>
 8000fcc:	e9c7 0100 	strd	r0, r1, [r7]
	  if(currentTime > timestamp_velocity_PID)
 8000fd0:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <main+0x190>)
 8000fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fda:	4290      	cmp	r0, r2
 8000fdc:	eb71 0303 	sbcs.w	r3, r1, r3
 8000fe0:	d231      	bcs.n	8001046 <main+0x126>
	  {
		  timestamp_velocity_PID = currentTime + 1000;//us
 8000fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fe6:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8000fea:	f143 0500 	adc.w	r5, r3, #0
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <main+0x190>)
 8000ff0:	e9c3 4500 	strd	r4, r5, [r3]
		  QEIEncoderPosVel_Update();
 8000ff4:	f000 fb78 	bl	80016e8 <QEIEncoderPosVel_Update>
		  velocity = angular_velocity*14/2.0/M_PI;
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <main+0x194>)
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001006:	ee17 0a90 	vmov	r0, s15
 800100a:	f7ff fa69 	bl	80004e0 <__aeabi_f2d>
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001016:	f7ff fbe5 	bl	80007e4 <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	a317      	add	r3, pc, #92	; (adr r3, 8001080 <main+0x160>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff fbdc 	bl	80007e4 <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fda4 	bl	8000b80 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <main+0x198>)
 800103c:	6013      	str	r3, [r2, #0]
		  velocity_PID();
 800103e:	f001 f909 	bl	8002254 <velocity_PID>
		  setMotor();
 8001042:	f001 fa93 	bl	800256c <setMotor>
	  }

	  static uint64_t timestamp_position_PID = 0;
	  currentTime = micros();
 8001046:	f000 fb33 	bl	80016b0 <micros>
 800104a:	e9c7 0100 	strd	r0, r1, [r7]
	  if(currentTime > timestamp_position_PID)
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <main+0x19c>)
 8001050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001058:	4290      	cmp	r0, r2
 800105a:	eb71 0303 	sbcs.w	r3, r1, r3
 800105e:	d28a      	bcs.n	8000f76 <main+0x56>
	  {
		  timestamp_position_PID = currentTime + 5000;//us
 8001060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001064:	f241 3188 	movw	r1, #5000	; 0x1388
 8001068:	eb12 0801 	adds.w	r8, r2, r1
 800106c:	f143 0900 	adc.w	r9, r3, #0
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <main+0x19c>)
 8001072:	e9c3 8900 	strd	r8, r9, [r3]
		  position_PID();
 8001076:	f001 f9b7 	bl	80023e8 <position_PID>
  {
 800107a:	e77c      	b.n	8000f76 <main+0x56>
 800107c:	f3af 8000 	nop.w
 8001080:	54442d18 	.word	0x54442d18
 8001084:	400921fb 	.word	0x400921fb
 8001088:	20000224 	.word	0x20000224
 800108c:	20000270 	.word	0x20000270
 8001090:	200002bc 	.word	0x200002bc
 8001094:	48000400 	.word	0x48000400
 8001098:	20000312 	.word	0x20000312
 800109c:	20000313 	.word	0x20000313
 80010a0:	48000800 	.word	0x48000800
 80010a4:	20000358 	.word	0x20000358
 80010a8:	20000314 	.word	0x20000314
 80010ac:	44160000 	.word	0x44160000
 80010b0:	20000388 	.word	0x20000388
 80010b4:	2000034c 	.word	0x2000034c
 80010b8:	20000340 	.word	0x20000340
 80010bc:	20000390 	.word	0x20000390

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	2238      	movs	r2, #56	; 0x38
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f006 f8a4 	bl	800721c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f002 faac 	bl	8003640 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f2:	2340      	movs	r3, #64	; 0x40
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010fe:	2304      	movs	r3, #4
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001102:	2355      	movs	r3, #85	; 0x55
 8001104:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800110a:	2302      	movs	r3, #2
 800110c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	4618      	mov	r0, r3
 8001118:	f002 fb46 	bl	80037a8 <HAL_RCC_OscConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001122:	f001 fa9d 	bl	8002660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001126:	230f      	movs	r3, #15
 8001128:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112a:	2303      	movs	r3, #3
 800112c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2104      	movs	r1, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fe44 	bl	8003dcc <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800114a:	f001 fa89 	bl	8002660 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 800115e:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <MX_LPUART1_UART_Init+0x90>)
 8001160:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800119a:	4812      	ldr	r0, [pc, #72]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 800119c:	f004 ff86 	bl	80060ac <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011a6:	f001 fa5b 	bl	8002660 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 80011ae:	f005 ff6a 	bl	8007086 <HAL_UARTEx_SetTxFifoThreshold>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80011b8:	f001 fa52 	bl	8002660 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 80011c0:	f005 ff9f 	bl	8007102 <HAL_UARTEx_SetRxFifoThreshold>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011ca:	f001 fa49 	bl	8002660 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_LPUART1_UART_Init+0x8c>)
 80011d0:	f005 ff20 	bl	8007014 <HAL_UARTEx_DisableFifoMode>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80011da:	f001 fa41 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000009c 	.word	0x2000009c
 80011e8:	40008000 	.word	0x40008000

080011ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_USART1_UART_Init+0x90>)
 80011f2:	4a23      	ldr	r2, [pc, #140]	; (8001280 <MX_USART1_UART_Init+0x94>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_USART1_UART_Init+0x90>)
 80011f8:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80011fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_USART1_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_USART1_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_USART1_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_USART1_UART_Init+0x90>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_USART1_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_USART1_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_USART1_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_USART1_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_USART1_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_USART1_UART_Init+0x90>)
 8001236:	f004 ff39 	bl	80060ac <HAL_UART_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001240:	f001 fa0e 	bl	8002660 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_USART1_UART_Init+0x90>)
 8001248:	f005 ff1d 	bl	8007086 <HAL_UARTEx_SetTxFifoThreshold>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001252:	f001 fa05 	bl	8002660 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <MX_USART1_UART_Init+0x90>)
 800125a:	f005 ff52 	bl	8007102 <HAL_UARTEx_SetRxFifoThreshold>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001264:	f001 f9fc 	bl	8002660 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_USART1_UART_Init+0x90>)
 800126a:	f005 fed3 	bl	8007014 <HAL_UARTEx_DisableFifoMode>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001274:	f001 f9f4 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000130 	.word	0x20000130
 8001280:	40013800 	.word	0x40013800

08001284 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <MX_TIM3_Init+0xe8>)
 80012b8:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <MX_TIM3_Init+0xec>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <MX_TIM3_Init+0xe8>)
 80012be:	22a9      	movs	r2, #169	; 0xa9
 80012c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <MX_TIM3_Init+0xe8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_TIM3_Init+0xe8>)
 80012ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_TIM3_Init+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <MX_TIM3_Init+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012dc:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_TIM3_Init+0xe8>)
 80012de:	f003 f9df 	bl	80046a0 <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012e8:	f001 f9ba 	bl	8002660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	4619      	mov	r1, r3
 80012f8:	481c      	ldr	r0, [pc, #112]	; (800136c <MX_TIM3_Init+0xe8>)
 80012fa:	f004 f81d 	bl	8005338 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001304:	f001 f9ac 	bl	8002660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001308:	4818      	ldr	r0, [pc, #96]	; (800136c <MX_TIM3_Init+0xe8>)
 800130a:	f003 fb09 	bl	8004920 <HAL_TIM_PWM_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001314:	f001 f9a4 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <MX_TIM3_Init+0xe8>)
 8001328:	f004 fde4 	bl	8005ef4 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001332:	f001 f995 	bl	8002660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	; 0x60
 8001338:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	2204      	movs	r2, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM3_Init+0xe8>)
 800134e:	f003 fedf 	bl	8005110 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001358:	f001 f982 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM3_Init+0xe8>)
 800135e:	f001 faed 	bl	800293c <HAL_TIM_MspPostInit>

}
 8001362:	bf00      	nop
 8001364:	3738      	adds	r7, #56	; 0x38
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000224 	.word	0x20000224
 8001370:	40000400 	.word	0x40000400

08001374 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2224      	movs	r2, #36	; 0x24
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f005 ff4a 	bl	800721c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_TIM4_Init+0xa4>)
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <MX_TIM4_Init+0xa8>)
 8001396:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_TIM4_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_TIM4_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63487;
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_TIM4_Init+0xa4>)
 80013a6:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 80013aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_TIM4_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_TIM4_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013b8:	2303      	movs	r3, #3
 80013ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c0:	2301      	movs	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <MX_TIM4_Init+0xa4>)
 80013e4:	f003 fc10 	bl	8004c08 <HAL_TIM_Encoder_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013ee:	f001 f937 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_TIM4_Init+0xa4>)
 8001400:	f004 fd78 	bl	8005ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800140a:	f001 f929 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000270 	.word	0x20000270
 800141c:	40000800 	.word	0x40000800

08001420 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_TIM5_Init+0x94>)
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <MX_TIM5_Init+0x98>)
 8001442:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_TIM5_Init+0x94>)
 8001446:	22a9      	movs	r2, #169	; 0xa9
 8001448:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_TIM5_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_TIM5_Init+0x94>)
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_TIM5_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_TIM5_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001464:	4813      	ldr	r0, [pc, #76]	; (80014b4 <MX_TIM5_Init+0x94>)
 8001466:	f003 f91b 	bl	80046a0 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001470:	f001 f8f6 	bl	8002660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4619      	mov	r1, r3
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <MX_TIM5_Init+0x94>)
 8001482:	f003 ff59 	bl	8005338 <HAL_TIM_ConfigClockSource>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800148c:	f001 f8e8 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_TIM5_Init+0x94>)
 800149e:	f004 fd29 	bl	8005ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014a8:	f001 f8da 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200002bc 	.word	0x200002bc
 80014b8:	40000c00 	.word	0x40000c00

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_DMA_Init+0x50>)
 80014c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c6:	4a11      	ldr	r2, [pc, #68]	; (800150c <MX_DMA_Init+0x50>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6493      	str	r3, [r2, #72]	; 0x48
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_DMA_Init+0x50>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_DMA_Init+0x50>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <MX_DMA_Init+0x50>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6493      	str	r3, [r2, #72]	; 0x48
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_DMA_Init+0x50>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	200b      	movs	r0, #11
 80014f8:	f001 fc25 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014fc:	200b      	movs	r0, #11
 80014fe:	f001 fc3c 	bl	8002d7a <HAL_NVIC_EnableIRQ>

}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b40      	ldr	r3, [pc, #256]	; (8001628 <MX_GPIO_Init+0x118>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a3f      	ldr	r2, [pc, #252]	; (8001628 <MX_GPIO_Init+0x118>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <MX_GPIO_Init+0x118>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <MX_GPIO_Init+0x118>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a39      	ldr	r2, [pc, #228]	; (8001628 <MX_GPIO_Init+0x118>)
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <MX_GPIO_Init+0x118>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <MX_GPIO_Init+0x118>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a33      	ldr	r2, [pc, #204]	; (8001628 <MX_GPIO_Init+0x118>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <MX_GPIO_Init+0x118>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <MX_GPIO_Init+0x118>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <MX_GPIO_Init+0x118>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <MX_GPIO_Init+0x118>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2120      	movs	r1, #32
 800158a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158e:	f002 f81b 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2140      	movs	r1, #64	; 0x40
 8001596:	4825      	ldr	r0, [pc, #148]	; (800162c <MX_GPIO_Init+0x11c>)
 8001598:	f002 f816 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800159c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	481f      	ldr	r0, [pc, #124]	; (8001630 <MX_GPIO_Init+0x120>)
 80015b4:	f001 fe6e 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015b8:	2320      	movs	r3, #32
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f001 fe5f 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ee:	f001 fe51 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f2:	2340      	movs	r3, #64	; 0x40
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <MX_GPIO_Init+0x11c>)
 800160a:	f001 fe43 	bl	8003294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2028      	movs	r0, #40	; 0x28
 8001614:	f001 fb97 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001618:	2028      	movs	r0, #40	; 0x28
 800161a:	f001 fbae 	bl	8002d7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800

08001634 <HAL_UART_RxCpltCallback>:
	}
	z_diff_position = z_target_position - position;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_UART_RxCpltCallback+0x24>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d102      	bne.n	800164a <HAL_UART_RxCpltCallback+0x16>
		{
			//(for string only) Add string stop symbol \0 to end string
			RxBuffer[9] = '\0';
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_UART_RxCpltCallback+0x28>)
 8001646:	2200      	movs	r2, #0
 8001648:	725a      	strb	r2, [r3, #9]
		}
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000130 	.word	0x20000130
 800165c:	20000308 	.word	0x20000308

08001660 <UARTDMAConfig>:

void UARTDMAConfig()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	//start UART in DMA mode
	HAL_UART_Receive_DMA(&huart1, RxBuffer,9);
 8001664:	2209      	movs	r2, #9
 8001666:	4903      	ldr	r1, [pc, #12]	; (8001674 <UARTDMAConfig+0x14>)
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <UARTDMAConfig+0x18>)
 800166a:	f004 fd6f 	bl	800614c <HAL_UART_Receive_DMA>
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000308 	.word	0x20000308
 8001678:	20000130 	.word	0x20000130

0800167c <HAL_TIM_PeriodElapsedCallback>:
	z_floor[RxBuffer[(a+7)%9]-'0'-1] = z_target_position;
}

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b4b0      	push	{r4, r5, r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d108      	bne.n	800169e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	1e54      	subs	r4, r2, #1
 8001694:	f143 0500 	adc.w	r5, r3, #0
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800169a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bcb0      	pop	{r4, r5, r7}
 80016a6:	4770      	bx	lr
 80016a8:	200002bc 	.word	0x200002bc
 80016ac:	20000338 	.word	0x20000338

080016b0 <micros>:

uint64_t micros()
{
 80016b0:	b4b0      	push	{r4, r5, r7}
 80016b2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <micros+0x2c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	2200      	movs	r2, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	4611      	mov	r1, r2
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <micros+0x30>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	1884      	adds	r4, r0, r2
 80016c8:	eb41 0503 	adc.w	r5, r1, r3
 80016cc:	4622      	mov	r2, r4
 80016ce:	462b      	mov	r3, r5
}
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bcb0      	pop	{r4, r5, r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	200002bc 	.word	0x200002bc
 80016e0:	20000338 	.word	0x20000338
 80016e4:	00000000 	.word	0x00000000

080016e8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 80016ee:	f7ff ffdf 	bl	80016b0 <micros>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4982      	ldr	r1, [pc, #520]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 80016f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 80016fc:	4b81      	ldr	r3, [pc, #516]	; (8001904 <QEIEncoderPosVel_Update+0x21c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	4a7f      	ldr	r2, [pc, #508]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 8001704:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 2048;
 8001706:	4b7e      	ldr	r3, [pc, #504]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001716:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 8001718:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 800171c:	4b78      	ldr	r3, [pc, #480]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b77      	ldr	r3, [pc, #476]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > 31744){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 800172e:	dd08      	ble.n	8001742 <QEIEncoderPosVel_Update+0x5a>
		diffPosition -=63488;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8001736:	607b      	str	r3, [r7, #4]
		counter--;
 8001738:	4b73      	ldr	r3, [pc, #460]	; (8001908 <QEIEncoderPosVel_Update+0x220>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	4a72      	ldr	r2, [pc, #456]	; (8001908 <QEIEncoderPosVel_Update+0x220>)
 8001740:	6013      	str	r3, [r2, #0]
	}
	if(diffPosition < -31744){
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f513 4ff8 	cmn.w	r3, #31744	; 0x7c00
 8001748:	da08      	bge.n	800175c <QEIEncoderPosVel_Update+0x74>
		diffPosition +=63488;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8001750:	607b      	str	r3, [r7, #4]
		counter++;
 8001752:	4b6d      	ldr	r3, [pc, #436]	; (8001908 <QEIEncoderPosVel_Update+0x220>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	4a6b      	ldr	r2, [pc, #428]	; (8001908 <QEIEncoderPosVel_Update+0x220>)
 800175a:	6013      	str	r3, [r2, #0]
	}
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 800175c:	4b68      	ldr	r3, [pc, #416]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 800175e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001762:	4b67      	ldr	r3, [pc, #412]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 8001764:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001768:	1a84      	subs	r4, r0, r2
 800176a:	eb61 0503 	sbc.w	r5, r1, r3
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe fed7 	bl	8000524 <__aeabi_ul2d>
 8001776:	a35c      	add	r3, pc, #368	; (adr r3, 80018e8 <QEIEncoderPosVel_Update+0x200>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff08 	bl	8000590 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff f9fa 	bl	8000b80 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800179a:	ed97 7a00 	vldr	s14, [r7]
 800179e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a2:	4b57      	ldr	r3, [pc, #348]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 80017a4:	edc3 7a07 	vstr	s15, [r3, #28]

	angular_velocity = QEIdata.QEIAngularVelocity/2048.0*2*M_PI;
 80017a8:	4b55      	ldr	r3, [pc, #340]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fe97 	bl	80004e0 <__aeabi_f2d>
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b55      	ldr	r3, [pc, #340]	; (800190c <QEIEncoderPosVel_Update+0x224>)
 80017b8:	f7ff f814 	bl	80007e4 <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	f7fe fd2c 	bl	8000224 <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	a346      	add	r3, pc, #280	; (adr r3, 80018f0 <QEIEncoderPosVel_Update+0x208>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe fed9 	bl	8000590 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f9cb 	bl	8000b80 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a48      	ldr	r2, [pc, #288]	; (8001910 <QEIEncoderPosVel_Update+0x228>)
 80017ee:	6013      	str	r3, [r2, #0]
	angular_position = (QEIdata.Position[NEW]%2048)/2048.0*2*M_PI;
 80017f0:	4b43      	ldr	r3, [pc, #268]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe4f 	bl	800049c <__aeabi_ui2d>
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b42      	ldr	r3, [pc, #264]	; (800190c <QEIEncoderPosVel_Update+0x224>)
 8001804:	f7fe ffee 	bl	80007e4 <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	f7fe fd06 	bl	8000224 <__adddf3>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	a333      	add	r3, pc, #204	; (adr r3, 80018f0 <QEIEncoderPosVel_Update+0x208>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe feb3 	bl	8000590 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f9a5 	bl	8000b80 <__aeabi_d2f>
 8001836:	4603      	mov	r3, r0
 8001838:	4a36      	ldr	r2, [pc, #216]	; (8001914 <QEIEncoderPosVel_Update+0x22c>)
 800183a:	6013      	str	r3, [r2, #0]
	position_round = (counter*31)+(int)(QEIdata.Position[NEW]/2048.0);
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <QEIEncoderPosVel_Update+0x220>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	1a9c      	subs	r4, r3, r2
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe26 	bl	800049c <__aeabi_ui2d>
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <QEIEncoderPosVel_Update+0x224>)
 8001856:	f7fe ffc5 	bl	80007e4 <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f945 	bl	8000af0 <__aeabi_d2iz>
 8001866:	4603      	mov	r3, r0
 8001868:	4423      	add	r3, r4
 800186a:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <QEIEncoderPosVel_Update+0x230>)
 800186c:	6013      	str	r3, [r2, #0]
	position = ((angular_position)/(2.0*M_PI)*14)+(14*position_round);
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <QEIEncoderPosVel_Update+0x22c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe34 	bl	80004e0 <__aeabi_f2d>
 8001878:	a31f      	add	r3, pc, #124	; (adr r3, 80018f8 <QEIEncoderPosVel_Update+0x210>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe ffb1 	bl	80007e4 <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <QEIEncoderPosVel_Update+0x234>)
 8001890:	f7fe fe7e 	bl	8000590 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4614      	mov	r4, r2
 800189a:	461d      	mov	r5, r3
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <QEIEncoderPosVel_Update+0x230>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe07 	bl	80004bc <__aeabi_i2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f7fe fcb5 	bl	8000224 <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f95d 	bl	8000b80 <__aeabi_d2f>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a15      	ldr	r2, [pc, #84]	; (8001920 <QEIEncoderPosVel_Update+0x238>)
 80018ca:	6013      	str	r3, [r2, #0]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 80018d2:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 80018d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018da:	4909      	ldr	r1, [pc, #36]	; (8001900 <QEIEncoderPosVel_Update+0x218>)
 80018dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdb0      	pop	{r4, r5, r7, pc}
 80018e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80018ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80018f0:	54442d18 	.word	0x54442d18
 80018f4:	400921fb 	.word	0x400921fb
 80018f8:	54442d18 	.word	0x54442d18
 80018fc:	401921fb 	.word	0x401921fb
 8001900:	20000318 	.word	0x20000318
 8001904:	20000270 	.word	0x20000270
 8001908:	20000354 	.word	0x20000354
 800190c:	40a00000 	.word	0x40a00000
 8001910:	2000034c 	.word	0x2000034c
 8001914:	20000348 	.word	0x20000348
 8001918:	20000350 	.word	0x20000350
 800191c:	402c0000 	.word	0x402c0000
 8001920:	20000344 	.word	0x20000344
 8001924:	00000000 	.word	0x00000000

08001928 <trajectory>:

void trajectory(){
 8001928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
	static uint32_t Timestamp;
	if(trajec_target != 0 && trajec_state == 0){
 8001930:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <trajectory+0x1f8>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	eef5 7a40 	vcmp.f32	s15, #0.0
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	d00d      	beq.n	800195c <trajectory+0x34>
 8001940:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <trajectory+0x1fc>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <trajectory+0x34>
		trajec_state = 1;
 8001948:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <trajectory+0x1fc>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
		Timestamp = HAL_GetTick();
 800194e:	f001 f913 	bl	8002b78 <HAL_GetTick>
 8001952:	4603      	mov	r3, r0
 8001954:	4a74      	ldr	r2, [pc, #464]	; (8001b28 <trajectory+0x200>)
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	f000 bc50 	b.w	80021fc <trajectory+0x8d4>
	}
	else if(trajec_state == 1 && trajec_target >= 0){
 800195c:	4b71      	ldr	r3, [pc, #452]	; (8001b24 <trajectory+0x1fc>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	f040 820b 	bne.w	8001d7c <trajectory+0x454>
 8001966:	4b6e      	ldr	r3, [pc, #440]	; (8001b20 <trajectory+0x1f8>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	f2c0 8202 	blt.w	8001d7c <trajectory+0x454>
		float t = (HAL_GetTick() - Timestamp)*0.001;
 8001978:	f001 f8fe 	bl	8002b78 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <trajectory+0x200>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fd89 	bl	800049c <__aeabi_ui2d>
 800198a:	a361      	add	r3, pc, #388	; (adr r3, 8001b10 <trajectory+0x1e8>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fdfe 	bl	8000590 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f8f0 	bl	8000b80 <__aeabi_d2f>
 80019a0:	4603      	mov	r3, r0
 80019a2:	60fb      	str	r3, [r7, #12]
		float time = (-100 + sqrt(10000 + (2000*trajec_target)))/1000;
 80019a4:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <trajectory+0x1f8>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001b2c <trajectory+0x204>
 80019ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001b30 <trajectory+0x208>
 80019b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019ba:	ee17 0a90 	vmov	r0, s15
 80019be:	f7fe fd8f 	bl	80004e0 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b10 	vmov	d0, r2, r3
 80019ca:	f005 fc59 	bl	8007280 <sqrt>
 80019ce:	ec51 0b10 	vmov	r0, r1, d0
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <trajectory+0x20c>)
 80019d8:	f7fe fc22 	bl	8000220 <__aeabi_dsub>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <trajectory+0x210>)
 80019ea:	f7fe fefb 	bl	80007e4 <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f8c3 	bl	8000b80 <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	60bb      	str	r3, [r7, #8]
		if(HAL_GetTick() - Timestamp <= (time*1000)){
 80019fe:	f001 f8bb 	bl	8002b78 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <trajectory+0x200>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a16:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001b3c <trajectory+0x214>
 8001a1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	d81e      	bhi.n	8001a66 <trajectory+0x13e>
			trajec_acceleration = 500.0;
 8001a28:	4b45      	ldr	r3, [pc, #276]	; (8001b40 <trajectory+0x218>)
 8001a2a:	4a46      	ldr	r2, [pc, #280]	; (8001b44 <trajectory+0x21c>)
 8001a2c:	601a      	str	r2, [r3, #0]
			trajec_velocity = 500*t;
 8001a2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a32:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001b48 <trajectory+0x220>
 8001a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <trajectory+0x224>)
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = (250*t*t)+p0;
 8001a40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a44:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001b50 <trajectory+0x228>
 8001a48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a54:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <trajectory+0x22c>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <trajectory+0x230>)
 8001a60:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target >= 0){
 8001a64:	e3ca      	b.n	80021fc <trajectory+0x8d4>
		}
		else if(HAL_GetTick() - Timestamp <= ((time+0.2)*1000)){
 8001a66:	f001 f887 	bl	8002b78 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <trajectory+0x200>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd12 	bl	800049c <__aeabi_ui2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	68b8      	ldr	r0, [r7, #8]
 8001a7e:	f7fe fd2f 	bl	80004e0 <__aeabi_f2d>
 8001a82:	a325      	add	r3, pc, #148	; (adr r3, 8001b18 <trajectory+0x1f0>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fbcc 	bl	8000224 <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <trajectory+0x210>)
 8001a9a:	f7fe fd79 	bl	8000590 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe ffef 	bl	8000a88 <__aeabi_dcmple>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d055      	beq.n	8001b5c <trajectory+0x234>
			trajec_acceleration = 0;
 8001ab0:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <trajectory+0x218>)
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
			trajec_velocity = 500*time;
 8001ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001abc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001b48 <trajectory+0x220>
 8001ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <trajectory+0x224>)
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = ((500*time*(t-time))+(250*time*time))+p0;
 8001aca:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ace:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001b48 <trajectory+0x220>
 8001ad2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ad6:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ada:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ade:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aea:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001b50 <trajectory+0x228>
 8001aee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001af2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <trajectory+0x22c>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <trajectory+0x230>)
 8001b0a:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target >= 0){
 8001b0e:	e375      	b.n	80021fc <trajectory+0x8d4>
 8001b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b14:	3f50624d 	.word	0x3f50624d
 8001b18:	9999999a 	.word	0x9999999a
 8001b1c:	3fc99999 	.word	0x3fc99999
 8001b20:	20000368 	.word	0x20000368
 8001b24:	2000036c 	.word	0x2000036c
 8001b28:	20000398 	.word	0x20000398
 8001b2c:	44fa0000 	.word	0x44fa0000
 8001b30:	461c4000 	.word	0x461c4000
 8001b34:	40590000 	.word	0x40590000
 8001b38:	408f4000 	.word	0x408f4000
 8001b3c:	447a0000 	.word	0x447a0000
 8001b40:	20000364 	.word	0x20000364
 8001b44:	43fa0000 	.word	0x43fa0000
 8001b48:	43fa0000 	.word	0x43fa0000
 8001b4c:	20000360 	.word	0x20000360
 8001b50:	437a0000 	.word	0x437a0000
 8001b54:	20000370 	.word	0x20000370
 8001b58:	2000035c 	.word	0x2000035c
		}
		else if(HAL_GetTick() - Timestamp <= (((time*2)+0.2)*1000)){
 8001b5c:	f001 f80c 	bl	8002b78 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4bd3      	ldr	r3, [pc, #844]	; (8001eb0 <trajectory+0x588>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fc97 	bl	800049c <__aeabi_ui2d>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	460d      	mov	r5, r1
 8001b72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b7a:	ee17 0a90 	vmov	r0, s15
 8001b7e:	f7fe fcaf 	bl	80004e0 <__aeabi_f2d>
 8001b82:	a3c3      	add	r3, pc, #780	; (adr r3, 8001e90 <trajectory+0x568>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fb4c 	bl	8000224 <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4bc6      	ldr	r3, [pc, #792]	; (8001eb4 <trajectory+0x58c>)
 8001b9a:	f7fe fcf9 	bl	8000590 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe ff6f 	bl	8000a88 <__aeabi_dcmple>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80d9 	beq.w	8001d64 <trajectory+0x43c>
			trajec_acceleration = -500.0;
 8001bb2:	4bc1      	ldr	r3, [pc, #772]	; (8001eb8 <trajectory+0x590>)
 8001bb4:	4ac1      	ldr	r2, [pc, #772]	; (8001ebc <trajectory+0x594>)
 8001bb6:	601a      	str	r2, [r3, #0]
			trajec_velocity = (-500*(t-time-0.2))+(500*time);
 8001bb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc4:	ee17 0a90 	vmov	r0, s15
 8001bc8:	f7fe fc8a 	bl	80004e0 <__aeabi_f2d>
 8001bcc:	a3b0      	add	r3, pc, #704	; (adr r3, 8001e90 <trajectory+0x568>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fb25 	bl	8000220 <__aeabi_dsub>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	a3ae      	add	r3, pc, #696	; (adr r3, 8001e98 <trajectory+0x570>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fcd4 	bl	8000590 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001ec0 <trajectory+0x598>
 8001bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfc:	ee17 0a90 	vmov	r0, s15
 8001c00:	f7fe fc6e 	bl	80004e0 <__aeabi_f2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	f7fe fb0a 	bl	8000224 <__adddf3>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe ffb2 	bl	8000b80 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4aa9      	ldr	r2, [pc, #676]	; (8001ec4 <trajectory+0x59c>)
 8001c20:	6013      	str	r3, [r2, #0]
			trajec_position = ((-250*(t-time-0.2)*(t-time-0.2))+(500*time*(t-time-0.2))+(250*time*time)+(100*time))+p0;
 8001c22:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2e:	ee17 0a90 	vmov	r0, s15
 8001c32:	f7fe fc55 	bl	80004e0 <__aeabi_f2d>
 8001c36:	a396      	add	r3, pc, #600	; (adr r3, 8001e90 <trajectory+0x568>)
 8001c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3c:	f7fe faf0 	bl	8000220 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	a395      	add	r3, pc, #596	; (adr r3, 8001ea0 <trajectory+0x578>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fc9f 	bl	8000590 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c66:	ee17 0a90 	vmov	r0, s15
 8001c6a:	f7fe fc39 	bl	80004e0 <__aeabi_f2d>
 8001c6e:	a388      	add	r3, pc, #544	; (adr r3, 8001e90 <trajectory+0x568>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fad4 	bl	8000220 <__aeabi_dsub>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe fc86 	bl	8000590 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4690      	mov	r8, r2
 8001c8a:	4699      	mov	r9, r3
 8001c8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c90:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001ec0 <trajectory+0x598>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	ee17 0a90 	vmov	r0, s15
 8001c9c:	f7fe fc20 	bl	80004e0 <__aeabi_f2d>
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	460d      	mov	r5, r1
 8001ca4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ca8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	ee17 0a90 	vmov	r0, s15
 8001cb4:	f7fe fc14 	bl	80004e0 <__aeabi_f2d>
 8001cb8:	a375      	add	r3, pc, #468	; (adr r3, 8001e90 <trajectory+0x568>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe faaf 	bl	8000220 <__aeabi_dsub>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	4629      	mov	r1, r5
 8001cca:	f7fe fc61 	bl	8000590 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4640      	mov	r0, r8
 8001cd4:	4649      	mov	r1, r9
 8001cd6:	f7fe faa5 	bl	8000224 <__adddf3>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4614      	mov	r4, r2
 8001ce0:	461d      	mov	r5, r3
 8001ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce6:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001ec8 <trajectory+0x5a0>
 8001cea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	ee17 0a90 	vmov	r0, s15
 8001cfa:	f7fe fbf1 	bl	80004e0 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fa8d 	bl	8000224 <__adddf3>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4614      	mov	r4, r2
 8001d10:	461d      	mov	r5, r3
 8001d12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d16:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001ecc <trajectory+0x5a4>
 8001d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1e:	ee17 0a90 	vmov	r0, s15
 8001d22:	f7fe fbdd 	bl	80004e0 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	f7fe fa79 	bl	8000224 <__adddf3>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4614      	mov	r4, r2
 8001d38:	461d      	mov	r5, r3
 8001d3a:	4b65      	ldr	r3, [pc, #404]	; (8001ed0 <trajectory+0x5a8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fbce 	bl	80004e0 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7fe fa6a 	bl	8000224 <__adddf3>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe ff12 	bl	8000b80 <__aeabi_d2f>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <trajectory+0x5ac>)
 8001d60:	6013      	str	r3, [r2, #0]
	else if(trajec_state == 1 && trajec_target >= 0){
 8001d62:	e24b      	b.n	80021fc <trajectory+0x8d4>
		}
		else{
			trajec_acceleration = 0;
 8001d64:	4b54      	ldr	r3, [pc, #336]	; (8001eb8 <trajectory+0x590>)
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
//			trajec_velocity = 0;
//			trajec_position = 0;
			trajec_target = 0;
 8001d6c:	4b5a      	ldr	r3, [pc, #360]	; (8001ed8 <trajectory+0x5b0>)
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
			trajec_state = 0;
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <trajectory+0x5b4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
	else if(trajec_state == 1 && trajec_target >= 0){
 8001d7a:	e23f      	b.n	80021fc <trajectory+0x8d4>
		}
	}
	else if(trajec_state == 1 && trajec_target < 0){
 8001d7c:	4b57      	ldr	r3, [pc, #348]	; (8001edc <trajectory+0x5b4>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	f040 821f 	bne.w	80021c4 <trajectory+0x89c>
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <trajectory+0x5b0>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	f140 8216 	bpl.w	80021c4 <trajectory+0x89c>
		float t = (HAL_GetTick() - Timestamp)*0.001;
 8001d98:	f000 feee 	bl	8002b78 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <trajectory+0x588>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fb79 	bl	800049c <__aeabi_ui2d>
 8001daa:	a33f      	add	r3, pc, #252	; (adr r3, 8001ea8 <trajectory+0x580>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fbee 	bl	8000590 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fee0 	bl	8000b80 <__aeabi_d2f>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	607b      	str	r3, [r7, #4]
		float time = (-100 + sqrt(10000 + (-2000*trajec_target)))/1000;
 8001dc4:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <trajectory+0x5b0>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001ee0 <trajectory+0x5b8>
 8001dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001ee4 <trajectory+0x5bc>
 8001dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dda:	ee17 0a90 	vmov	r0, s15
 8001dde:	f7fe fb7f 	bl	80004e0 <__aeabi_f2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	ec43 2b10 	vmov	d0, r2, r3
 8001dea:	f005 fa49 	bl	8007280 <sqrt>
 8001dee:	ec51 0b10 	vmov	r0, r1, d0
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <trajectory+0x5c0>)
 8001df8:	f7fe fa12 	bl	8000220 <__aeabi_dsub>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <trajectory+0x58c>)
 8001e0a:	f7fe fceb 	bl	80007e4 <__aeabi_ddiv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe feb3 	bl	8000b80 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	603b      	str	r3, [r7, #0]
		if(HAL_GetTick() - Timestamp <= (time*1000)){
 8001e1e:	f000 feab 	bl	8002b78 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <trajectory+0x588>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e32:	edd7 7a00 	vldr	s15, [r7]
 8001e36:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001eec <trajectory+0x5c4>
 8001e3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	d853      	bhi.n	8001ef0 <trajectory+0x5c8>
			trajec_acceleration = -500.0;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <trajectory+0x590>)
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <trajectory+0x594>)
 8001e4c:	601a      	str	r2, [r3, #0]
			trajec_velocity = (500*t)*-1;
 8001e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e52:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001ec0 <trajectory+0x598>
 8001e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5a:	eef1 7a67 	vneg.f32	s15, s15
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <trajectory+0x59c>)
 8001e60:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = ((250*t*t)*-1)+p0;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <trajectory+0x5a8>)
 8001e66:	ed93 7a00 	vldr	s14, [r3]
 8001e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001ec8 <trajectory+0x5a0>
 8001e72:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <trajectory+0x5ac>)
 8001e84:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target < 0){
 8001e88:	e1b8      	b.n	80021fc <trajectory+0x8d4>
 8001e8a:	bf00      	nop
 8001e8c:	f3af 8000 	nop.w
 8001e90:	9999999a 	.word	0x9999999a
 8001e94:	3fc99999 	.word	0x3fc99999
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	c07f4000 	.word	0xc07f4000
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	c06f4000 	.word	0xc06f4000
 8001ea8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001eac:	3f50624d 	.word	0x3f50624d
 8001eb0:	20000398 	.word	0x20000398
 8001eb4:	408f4000 	.word	0x408f4000
 8001eb8:	20000364 	.word	0x20000364
 8001ebc:	c3fa0000 	.word	0xc3fa0000
 8001ec0:	43fa0000 	.word	0x43fa0000
 8001ec4:	20000360 	.word	0x20000360
 8001ec8:	437a0000 	.word	0x437a0000
 8001ecc:	42c80000 	.word	0x42c80000
 8001ed0:	20000370 	.word	0x20000370
 8001ed4:	2000035c 	.word	0x2000035c
 8001ed8:	20000368 	.word	0x20000368
 8001edc:	2000036c 	.word	0x2000036c
 8001ee0:	c4fa0000 	.word	0xc4fa0000
 8001ee4:	461c4000 	.word	0x461c4000
 8001ee8:	40590000 	.word	0x40590000
 8001eec:	447a0000 	.word	0x447a0000
		}
		else if(HAL_GetTick() - Timestamp <= ((time+0.2)*1000)){
 8001ef0:	f000 fe42 	bl	8002b78 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4bca      	ldr	r3, [pc, #808]	; (8002220 <trajectory+0x8f8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe facd 	bl	800049c <__aeabi_ui2d>
 8001f02:	4604      	mov	r4, r0
 8001f04:	460d      	mov	r5, r1
 8001f06:	6838      	ldr	r0, [r7, #0]
 8001f08:	f7fe faea 	bl	80004e0 <__aeabi_f2d>
 8001f0c:	a3be      	add	r3, pc, #760	; (adr r3, 8002208 <trajectory+0x8e0>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f7fe f987 	bl	8000224 <__adddf3>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	4bc0      	ldr	r3, [pc, #768]	; (8002224 <trajectory+0x8fc>)
 8001f24:	f7fe fb34 	bl	8000590 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4629      	mov	r1, r5
 8001f30:	f7fe fdaa 	bl	8000a88 <__aeabi_dcmple>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d031      	beq.n	8001f9e <trajectory+0x676>
			trajec_acceleration = 0;
 8001f3a:	4bbb      	ldr	r3, [pc, #748]	; (8002228 <trajectory+0x900>)
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
			trajec_velocity = (500*time)*-1;
 8001f42:	edd7 7a00 	vldr	s15, [r7]
 8001f46:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800222c <trajectory+0x904>
 8001f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f4e:	eef1 7a67 	vneg.f32	s15, s15
 8001f52:	4bb7      	ldr	r3, [pc, #732]	; (8002230 <trajectory+0x908>)
 8001f54:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = (((500*time*(t-time))+(250*time*time))*-1)+p0;
 8001f58:	4bb6      	ldr	r3, [pc, #728]	; (8002234 <trajectory+0x90c>)
 8001f5a:	ed93 7a00 	vldr	s14, [r3]
 8001f5e:	edd7 7a00 	vldr	s15, [r7]
 8001f62:	eddf 6ab2 	vldr	s13, [pc, #712]	; 800222c <trajectory+0x904>
 8001f66:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f6a:	ed97 6a01 	vldr	s12, [r7, #4]
 8001f6e:	edd7 7a00 	vldr	s15, [r7]
 8001f72:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f7a:	edd7 7a00 	vldr	s15, [r7]
 8001f7e:	ed9f 6aae 	vldr	s12, [pc, #696]	; 8002238 <trajectory+0x910>
 8001f82:	ee27 6a86 	vmul.f32	s12, s15, s12
 8001f86:	edd7 7a00 	vldr	s15, [r7]
 8001f8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f96:	4ba9      	ldr	r3, [pc, #676]	; (800223c <trajectory+0x914>)
 8001f98:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target < 0){
 8001f9c:	e12e      	b.n	80021fc <trajectory+0x8d4>
		}
		else if(HAL_GetTick() - Timestamp <= (((time*2)+0.2)*1000)){
 8001f9e:	f000 fdeb 	bl	8002b78 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b9e      	ldr	r3, [pc, #632]	; (8002220 <trajectory+0x8f8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fa76 	bl	800049c <__aeabi_ui2d>
 8001fb0:	4604      	mov	r4, r0
 8001fb2:	460d      	mov	r5, r1
 8001fb4:	edd7 7a00 	vldr	s15, [r7]
 8001fb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fbc:	ee17 0a90 	vmov	r0, s15
 8001fc0:	f7fe fa8e 	bl	80004e0 <__aeabi_f2d>
 8001fc4:	a390      	add	r3, pc, #576	; (adr r3, 8002208 <trajectory+0x8e0>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe f92b 	bl	8000224 <__adddf3>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b92      	ldr	r3, [pc, #584]	; (8002224 <trajectory+0x8fc>)
 8001fdc:	f7fe fad8 	bl	8000590 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	f7fe fd4e 	bl	8000a88 <__aeabi_dcmple>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80dc 	beq.w	80021ac <trajectory+0x884>
			trajec_acceleration = 500.0;
 8001ff4:	4b8c      	ldr	r3, [pc, #560]	; (8002228 <trajectory+0x900>)
 8001ff6:	4a92      	ldr	r2, [pc, #584]	; (8002240 <trajectory+0x918>)
 8001ff8:	601a      	str	r2, [r3, #0]
			trajec_velocity = ((-500*(t-time-0.2))+(500*time))*-1;
 8001ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ffe:	edd7 7a00 	vldr	s15, [r7]
 8002002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002006:	ee17 0a90 	vmov	r0, s15
 800200a:	f7fe fa69 	bl	80004e0 <__aeabi_f2d>
 800200e:	a37e      	add	r3, pc, #504	; (adr r3, 8002208 <trajectory+0x8e0>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe f904 	bl	8000220 <__aeabi_dsub>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	a37b      	add	r3, pc, #492	; (adr r3, 8002210 <trajectory+0x8e8>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe fab3 	bl	8000590 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4614      	mov	r4, r2
 8002030:	461d      	mov	r5, r3
 8002032:	edd7 7a00 	vldr	s15, [r7]
 8002036:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800222c <trajectory+0x904>
 800203a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800203e:	ee17 0a90 	vmov	r0, s15
 8002042:	f7fe fa4d 	bl	80004e0 <__aeabi_f2d>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4620      	mov	r0, r4
 800204c:	4629      	mov	r1, r5
 800204e:	f7fe f8e9 	bl	8000224 <__adddf3>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe fd91 	bl	8000b80 <__aeabi_d2f>
 800205e:	4603      	mov	r3, r0
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef1 7a67 	vneg.f32	s15, s15
 8002068:	4b71      	ldr	r3, [pc, #452]	; (8002230 <trajectory+0x908>)
 800206a:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = (((-250*(t-time-0.2)*(t-time-0.2))+(500*time*(t-time-0.2))+(250*time*time)+(100*time))*-1)+p0;
 800206e:	4b71      	ldr	r3, [pc, #452]	; (8002234 <trajectory+0x90c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fa34 	bl	80004e0 <__aeabi_f2d>
 8002078:	4604      	mov	r4, r0
 800207a:	460d      	mov	r5, r1
 800207c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002080:	edd7 7a00 	vldr	s15, [r7]
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002088:	ee17 0a90 	vmov	r0, s15
 800208c:	f7fe fa28 	bl	80004e0 <__aeabi_f2d>
 8002090:	a35d      	add	r3, pc, #372	; (adr r3, 8002208 <trajectory+0x8e0>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe f8c3 	bl	8000220 <__aeabi_dsub>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	a35d      	add	r3, pc, #372	; (adr r3, 8002218 <trajectory+0x8f0>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe fa72 	bl	8000590 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4690      	mov	r8, r2
 80020b2:	4699      	mov	r9, r3
 80020b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80020b8:	edd7 7a00 	vldr	s15, [r7]
 80020bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c0:	ee17 0a90 	vmov	r0, s15
 80020c4:	f7fe fa0c 	bl	80004e0 <__aeabi_f2d>
 80020c8:	a34f      	add	r3, pc, #316	; (adr r3, 8002208 <trajectory+0x8e0>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe f8a7 	bl	8000220 <__aeabi_dsub>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4640      	mov	r0, r8
 80020d8:	4649      	mov	r1, r9
 80020da:	f7fe fa59 	bl	8000590 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4692      	mov	sl, r2
 80020e4:	469b      	mov	fp, r3
 80020e6:	edd7 7a00 	vldr	s15, [r7]
 80020ea:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800222c <trajectory+0x904>
 80020ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f2:	ee17 0a90 	vmov	r0, s15
 80020f6:	f7fe f9f3 	bl	80004e0 <__aeabi_f2d>
 80020fa:	4680      	mov	r8, r0
 80020fc:	4689      	mov	r9, r1
 80020fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002102:	edd7 7a00 	vldr	s15, [r7]
 8002106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800210a:	ee17 0a90 	vmov	r0, s15
 800210e:	f7fe f9e7 	bl	80004e0 <__aeabi_f2d>
 8002112:	a33d      	add	r3, pc, #244	; (adr r3, 8002208 <trajectory+0x8e0>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe f882 	bl	8000220 <__aeabi_dsub>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4640      	mov	r0, r8
 8002122:	4649      	mov	r1, r9
 8002124:	f7fe fa34 	bl	8000590 <__aeabi_dmul>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4650      	mov	r0, sl
 800212e:	4659      	mov	r1, fp
 8002130:	f7fe f878 	bl	8000224 <__adddf3>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4690      	mov	r8, r2
 800213a:	4699      	mov	r9, r3
 800213c:	edd7 7a00 	vldr	s15, [r7]
 8002140:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002238 <trajectory+0x910>
 8002144:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002148:	edd7 7a00 	vldr	s15, [r7]
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002150:	ee17 0a90 	vmov	r0, s15
 8002154:	f7fe f9c4 	bl	80004e0 <__aeabi_f2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4640      	mov	r0, r8
 800215e:	4649      	mov	r1, r9
 8002160:	f7fe f860 	bl	8000224 <__adddf3>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4690      	mov	r8, r2
 800216a:	4699      	mov	r9, r3
 800216c:	edd7 7a00 	vldr	s15, [r7]
 8002170:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002244 <trajectory+0x91c>
 8002174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002178:	ee17 0a90 	vmov	r0, s15
 800217c:	f7fe f9b0 	bl	80004e0 <__aeabi_f2d>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4640      	mov	r0, r8
 8002186:	4649      	mov	r1, r9
 8002188:	f7fe f84c 	bl	8000224 <__adddf3>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4620      	mov	r0, r4
 8002192:	4629      	mov	r1, r5
 8002194:	f7fe f844 	bl	8000220 <__aeabi_dsub>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fcee 	bl	8000b80 <__aeabi_d2f>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4a25      	ldr	r2, [pc, #148]	; (800223c <trajectory+0x914>)
 80021a8:	6013      	str	r3, [r2, #0]
	else if(trajec_state == 1 && trajec_target < 0){
 80021aa:	e027      	b.n	80021fc <trajectory+0x8d4>
		}
		else{
			trajec_acceleration = 0;
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <trajectory+0x900>)
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
//			trajec_velocity = 0;
//			trajec_position = 0;
			trajec_target = 0;
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <trajectory+0x920>)
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
			trajec_state = 0;
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <trajectory+0x924>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
	else if(trajec_state == 1 && trajec_target < 0){
 80021c2:	e01b      	b.n	80021fc <trajectory+0x8d4>
		}
	}
	else if(trajec_state == 0 && trajec_target == 0){
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <trajectory+0x924>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d117      	bne.n	80021fc <trajectory+0x8d4>
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <trajectory+0x920>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	d10f      	bne.n	80021fc <trajectory+0x8d4>
		trajec_target = target_position-trajec_position;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <trajectory+0x928>)
 80021de:	ed93 7a00 	vldr	s14, [r3]
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <trajectory+0x914>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <trajectory+0x920>)
 80021ee:	edc3 7a00 	vstr	s15, [r3]
		p0 = trajec_position;
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <trajectory+0x914>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <trajectory+0x90c>)
 80021f8:	6013      	str	r3, [r2, #0]
	}
}
 80021fa:	e7ff      	b.n	80021fc <trajectory+0x8d4>
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002206:	bf00      	nop
 8002208:	9999999a 	.word	0x9999999a
 800220c:	3fc99999 	.word	0x3fc99999
 8002210:	00000000 	.word	0x00000000
 8002214:	c07f4000 	.word	0xc07f4000
 8002218:	00000000 	.word	0x00000000
 800221c:	c06f4000 	.word	0xc06f4000
 8002220:	20000398 	.word	0x20000398
 8002224:	408f4000 	.word	0x408f4000
 8002228:	20000364 	.word	0x20000364
 800222c:	43fa0000 	.word	0x43fa0000
 8002230:	20000360 	.word	0x20000360
 8002234:	20000370 	.word	0x20000370
 8002238:	437a0000 	.word	0x437a0000
 800223c:	2000035c 	.word	0x2000035c
 8002240:	43fa0000 	.word	0x43fa0000
 8002244:	42c80000 	.word	0x42c80000
 8002248:	20000368 	.word	0x20000368
 800224c:	2000036c 	.word	0x2000036c
 8002250:	20000314 	.word	0x20000314

08002254 <velocity_PID>:

void velocity_PID(){
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
	static float u_n;
	static float u_n1 = 0;
	static float u_n2 = 0;
	static float y_n;
	static float y_n1 = 0;
	float one = (2*velocity_Ts*velocity_Kp)+(velocity_Ki*velocity_Ts*velocity_Ts)+(2*velocity_Kd);
 800225a:	4b56      	ldr	r3, [pc, #344]	; (80023b4 <velocity_PID+0x160>)
 800225c:	edd3 7a00 	vldr	s15, [r3]
 8002260:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002264:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <velocity_PID+0x164>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800226e:	4b53      	ldr	r3, [pc, #332]	; (80023bc <velocity_PID+0x168>)
 8002270:	edd3 6a00 	vldr	s13, [r3]
 8002274:	4b4f      	ldr	r3, [pc, #316]	; (80023b4 <velocity_PID+0x160>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800227e:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <velocity_PID+0x160>)
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800228c:	4b4c      	ldr	r3, [pc, #304]	; (80023c0 <velocity_PID+0x16c>)
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	edc7 7a03 	vstr	s15, [r7, #12]
	float two = (-2*velocity_Ts*velocity_Kp)+(velocity_Ki*velocity_Ts*velocity_Ts)-(4*velocity_Kd);
 800229e:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <velocity_PID+0x160>)
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80022a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <velocity_PID+0x164>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <velocity_PID+0x168>)
 80022b8:	edd3 6a00 	vldr	s13, [r3]
 80022bc:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <velocity_PID+0x160>)
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <velocity_PID+0x160>)
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <velocity_PID+0x16c>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80022de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e6:	edc7 7a02 	vstr	s15, [r7, #8]
	float three = 2*velocity_Kd;
 80022ea:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <velocity_PID+0x16c>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022f4:	edc7 7a01 	vstr	s15, [r7, #4]
	float four = 2*velocity_Ts;
 80022f8:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <velocity_PID+0x160>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002302:	edc7 7a00 	vstr	s15, [r7]
	u_n = trajec_velocity + position_PID_output - velocity;
 8002306:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <velocity_PID+0x170>)
 8002308:	ed93 7a00 	vldr	s14, [r3]
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <velocity_PID+0x174>)
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002316:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <velocity_PID+0x178>)
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <velocity_PID+0x17c>)
 8002322:	edc3 7a00 	vstr	s15, [r3]
	y_n = ((one*u_n)+(two*u_n1)+(three*u_n2)+(four*y_n1))/four;
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <velocity_PID+0x17c>)
 8002328:	ed93 7a00 	vldr	s14, [r3]
 800232c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <velocity_PID+0x180>)
 8002336:	edd3 6a00 	vldr	s13, [r3]
 800233a:	edd7 7a02 	vldr	s15, [r7, #8]
 800233e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <velocity_PID+0x184>)
 8002348:	edd3 6a00 	vldr	s13, [r3]
 800234c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <velocity_PID+0x188>)
 800235a:	edd3 6a00 	vldr	s13, [r3]
 800235e:	edd7 7a00 	vldr	s15, [r7]
 8002362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002366:	ee77 6a27 	vadd.f32	s13, s14, s15
 800236a:	ed97 7a00 	vldr	s14, [r7]
 800236e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <velocity_PID+0x18c>)
 8002374:	edc3 7a00 	vstr	s15, [r3]

	velocity_PID_output += y_n;
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <velocity_PID+0x190>)
 800237a:	ed93 7a00 	vldr	s14, [r3]
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <velocity_PID+0x18c>)
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <velocity_PID+0x190>)
 800238a:	edc3 7a00 	vstr	s15, [r3]
	u_n2 = u_n1;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <velocity_PID+0x180>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <velocity_PID+0x184>)
 8002394:	6013      	str	r3, [r2, #0]
	u_n1 = u_n;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <velocity_PID+0x17c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <velocity_PID+0x180>)
 800239c:	6013      	str	r3, [r2, #0]
	y_n1 = y_n;
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <velocity_PID+0x18c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <velocity_PID+0x188>)
 80023a4:	6013      	str	r3, [r2, #0]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000010 	.word	0x20000010
 80023b8:	20000004 	.word	0x20000004
 80023bc:	20000008 	.word	0x20000008
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	20000360 	.word	0x20000360
 80023c8:	20000380 	.word	0x20000380
 80023cc:	20000340 	.word	0x20000340
 80023d0:	2000039c 	.word	0x2000039c
 80023d4:	200003a0 	.word	0x200003a0
 80023d8:	200003a4 	.word	0x200003a4
 80023dc:	200003a8 	.word	0x200003a8
 80023e0:	200003ac 	.word	0x200003ac
 80023e4:	20000384 	.word	0x20000384

080023e8 <position_PID>:

void position_PID(){
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
	static float u_n;
	static float u_n1 = 0;
	static float u_n2 = 0;
	static float y_n;
	static float y_n1 = 0;
	float one = (2*position_Ts*position_Kp)+(position_Ki*position_Ts*position_Ts)+(2*position_Kd);
 80023ee:	4b53      	ldr	r3, [pc, #332]	; (800253c <position_PID+0x154>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80023f8:	4b51      	ldr	r3, [pc, #324]	; (8002540 <position_PID+0x158>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002402:	4b50      	ldr	r3, [pc, #320]	; (8002544 <position_PID+0x15c>)
 8002404:	edd3 6a00 	vldr	s13, [r3]
 8002408:	4b4c      	ldr	r3, [pc, #304]	; (800253c <position_PID+0x154>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002412:	4b4a      	ldr	r3, [pc, #296]	; (800253c <position_PID+0x154>)
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800241c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002420:	4b49      	ldr	r3, [pc, #292]	; (8002548 <position_PID+0x160>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800242a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242e:	edc7 7a03 	vstr	s15, [r7, #12]
	float two = (-2*position_Ts*position_Kp)+(position_Ki*position_Ts*position_Ts)-(4*position_Kd);
 8002432:	4b42      	ldr	r3, [pc, #264]	; (800253c <position_PID+0x154>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800243c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002440:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <position_PID+0x158>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800244a:	4b3e      	ldr	r3, [pc, #248]	; (8002544 <position_PID+0x15c>)
 800244c:	edd3 6a00 	vldr	s13, [r3]
 8002450:	4b3a      	ldr	r3, [pc, #232]	; (800253c <position_PID+0x154>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800245a:	4b38      	ldr	r3, [pc, #224]	; (800253c <position_PID+0x154>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002468:	4b37      	ldr	r3, [pc, #220]	; (8002548 <position_PID+0x160>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002472:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247a:	edc7 7a02 	vstr	s15, [r7, #8]
	float three = 2*position_Kd;
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <position_PID+0x160>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002488:	edc7 7a01 	vstr	s15, [r7, #4]
	float four = 2*position_Ts;
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <position_PID+0x154>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002496:	edc7 7a00 	vstr	s15, [r7]
	u_n = trajec_position - position;
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <position_PID+0x164>)
 800249c:	ed93 7a00 	vldr	s14, [r3]
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <position_PID+0x168>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <position_PID+0x16c>)
 80024ac:	edc3 7a00 	vstr	s15, [r3]
	y_n = ((one*u_n)+(two*u_n1)+(three*u_n2)+(four*y_n1))/four;
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <position_PID+0x16c>)
 80024b2:	ed93 7a00 	vldr	s14, [r3]
 80024b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <position_PID+0x170>)
 80024c0:	edd3 6a00 	vldr	s13, [r3]
 80024c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <position_PID+0x174>)
 80024d2:	edd3 6a00 	vldr	s13, [r3]
 80024d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80024da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <position_PID+0x178>)
 80024e4:	edd3 6a00 	vldr	s13, [r3]
 80024e8:	edd7 7a00 	vldr	s15, [r7]
 80024ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80024f4:	ed97 7a00 	vldr	s14, [r7]
 80024f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <position_PID+0x17c>)
 80024fe:	edc3 7a00 	vstr	s15, [r3]

	position_PID_output += y_n;
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <position_PID+0x180>)
 8002504:	ed93 7a00 	vldr	s14, [r3]
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <position_PID+0x17c>)
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <position_PID+0x180>)
 8002514:	edc3 7a00 	vstr	s15, [r3]
	u_n2 = u_n1;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <position_PID+0x170>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0f      	ldr	r2, [pc, #60]	; (800255c <position_PID+0x174>)
 800251e:	6013      	str	r3, [r2, #0]
	u_n1 = u_n;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <position_PID+0x16c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <position_PID+0x170>)
 8002526:	6013      	str	r3, [r2, #0]
	y_n1 = y_n;
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <position_PID+0x17c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <position_PID+0x178>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	20000000 	.word	0x20000000
 8002540:	20000374 	.word	0x20000374
 8002544:	20000378 	.word	0x20000378
 8002548:	2000037c 	.word	0x2000037c
 800254c:	2000035c 	.word	0x2000035c
 8002550:	20000344 	.word	0x20000344
 8002554:	200003b0 	.word	0x200003b0
 8002558:	200003b4 	.word	0x200003b4
 800255c:	200003b8 	.word	0x200003b8
 8002560:	200003bc 	.word	0x200003bc
 8002564:	200003c0 	.word	0x200003c0
 8002568:	20000380 	.word	0x20000380

0800256c <setMotor>:

void setMotor()
{
 800256c:	b598      	push	{r3, r4, r7, lr}
 800256e:	af00      	add	r7, sp, #0
	if(velocity_PID_output > 24){
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <setMotor+0xd8>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800257a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	dd03      	ble.n	800258c <setMotor+0x20>
		velocity_PID_output = 24;
 8002584:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <setMotor+0xd8>)
 8002586:	4a30      	ldr	r2, [pc, #192]	; (8002648 <setMotor+0xdc>)
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e00c      	b.n	80025a6 <setMotor+0x3a>
	}
	else if(velocity_PID_output < -24){
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <setMotor+0xd8>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eebb 7a08 	vmov.f32	s14, #184	; 0xc1c00000 -24.0
 8002596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259e:	d502      	bpl.n	80025a6 <setMotor+0x3a>
		velocity_PID_output = -24;
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <setMotor+0xd8>)
 80025a2:	4a2a      	ldr	r2, [pc, #168]	; (800264c <setMotor+0xe0>)
 80025a4:	601a      	str	r2, [r3, #0]
	}
	if(velocity_PID_output > 0){
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <setMotor+0xd8>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	dd22      	ble.n	80025fc <setMotor+0x90>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2140      	movs	r1, #64	; 0x40
 80025ba:	4825      	ldr	r0, [pc, #148]	; (8002650 <setMotor+0xe4>)
 80025bc:	f001 f804 	bl	80035c8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (int)velocity_PID_output*999/24.0);
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <setMotor+0xd8>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ca:	ee17 2a90 	vmov	r2, s15
 80025ce:	f240 33e7 	movw	r3, #999	; 0x3e7
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ff70 	bl	80004bc <__aeabi_i2d>
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <setMotor+0xe8>)
 80025e2:	f7fe f8ff 	bl	80007e4 <__aeabi_ddiv>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	491b      	ldr	r1, [pc, #108]	; (8002658 <setMotor+0xec>)
 80025ec:	680c      	ldr	r4, [r1, #0]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fe faa5 	bl	8000b40 <__aeabi_d2uiz>
 80025f6:	4603      	mov	r3, r0
 80025f8:	63a3      	str	r3, [r4, #56]	; 0x38
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (int)velocity_PID_output*(-999)/24.0);
	}
}
 80025fa:	e020      	b.n	800263e <setMotor+0xd2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
 80025fc:	2201      	movs	r2, #1
 80025fe:	2140      	movs	r1, #64	; 0x40
 8002600:	4813      	ldr	r0, [pc, #76]	; (8002650 <setMotor+0xe4>)
 8002602:	f000 ffe1 	bl	80035c8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (int)velocity_PID_output*(-999)/24.0);
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <setMotor+0xd8>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002610:	ee17 2a90 	vmov	r2, s15
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <setMotor+0xf0>)
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff4e 	bl	80004bc <__aeabi_i2d>
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <setMotor+0xe8>)
 8002626:	f7fe f8dd 	bl	80007e4 <__aeabi_ddiv>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	490a      	ldr	r1, [pc, #40]	; (8002658 <setMotor+0xec>)
 8002630:	680c      	ldr	r4, [r1, #0]
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fe fa83 	bl	8000b40 <__aeabi_d2uiz>
 800263a:	4603      	mov	r3, r0
 800263c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800263e:	bf00      	nop
 8002640:	bd98      	pop	{r3, r4, r7, pc}
 8002642:	bf00      	nop
 8002644:	20000384 	.word	0x20000384
 8002648:	41c00000 	.word	0x41c00000
 800264c:	c1c00000 	.word	0xc1c00000
 8002650:	48000400 	.word	0x48000400
 8002654:	40380000 	.word	0x40380000
 8002658:	20000224 	.word	0x20000224
 800265c:	fffffc19 	.word	0xfffffc19

08002660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
}
 8002666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002668:	e7fe      	b.n	8002668 <Error_Handler+0x8>
	...

0800266c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <HAL_MspInit+0x44>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <HAL_MspInit+0x44>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6613      	str	r3, [r2, #96]	; 0x60
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_MspInit+0x44>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_MspInit+0x44>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_MspInit+0x44>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_MspInit+0x44>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80026a2:	f001 f871 	bl	8003788 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b0a0      	sub	sp, #128	; 0x80
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026cc:	f107 0318 	add.w	r3, r7, #24
 80026d0:	2254      	movs	r2, #84	; 0x54
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f004 fda1 	bl	800721c <memset>
  if(huart->Instance==LPUART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_UART_MspInit+0x174>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d137      	bne.n	8002754 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80026e4:	2320      	movs	r3, #32
 80026e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ec:	f107 0318 	add.w	r3, r7, #24
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 fd87 	bl	8004204 <HAL_RCCEx_PeriphCLKConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026fc:	f7ff ffb0 	bl	8002660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002700:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_UART_MspInit+0x178>)
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	4a49      	ldr	r2, [pc, #292]	; (800282c <HAL_UART_MspInit+0x178>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800270c:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_UART_MspInit+0x178>)
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	4b44      	ldr	r3, [pc, #272]	; (800282c <HAL_UART_MspInit+0x178>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	4a43      	ldr	r2, [pc, #268]	; (800282c <HAL_UART_MspInit+0x178>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002724:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_UART_MspInit+0x178>)
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002730:	230c      	movs	r3, #12
 8002732:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002740:	230c      	movs	r3, #12
 8002742:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002748:	4619      	mov	r1, r3
 800274a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800274e:	f000 fda1 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002752:	e064      	b.n	800281e <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a35      	ldr	r2, [pc, #212]	; (8002830 <HAL_UART_MspInit+0x17c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d15f      	bne.n	800281e <HAL_UART_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800275e:	2301      	movs	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002766:	f107 0318 	add.w	r3, r7, #24
 800276a:	4618      	mov	r0, r3
 800276c:	f001 fd4a 	bl	8004204 <HAL_RCCEx_PeriphCLKConfig>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002776:	f7ff ff73 	bl	8002660 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800277a:	4b2c      	ldr	r3, [pc, #176]	; (800282c <HAL_UART_MspInit+0x178>)
 800277c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277e:	4a2b      	ldr	r2, [pc, #172]	; (800282c <HAL_UART_MspInit+0x178>)
 8002780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002784:	6613      	str	r3, [r2, #96]	; 0x60
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <HAL_UART_MspInit+0x178>)
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <HAL_UART_MspInit+0x178>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	4a25      	ldr	r2, [pc, #148]	; (800282c <HAL_UART_MspInit+0x178>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_UART_MspInit+0x178>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027aa:	2330      	movs	r3, #48	; 0x30
 80027ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ba:	2307      	movs	r3, #7
 80027bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027c2:	4619      	mov	r1, r3
 80027c4:	481b      	ldr	r0, [pc, #108]	; (8002834 <HAL_UART_MspInit+0x180>)
 80027c6:	f000 fd65 	bl	8003294 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_UART_MspInit+0x184>)
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_UART_MspInit+0x188>)
 80027ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_UART_MspInit+0x184>)
 80027d2:	2218      	movs	r2, #24
 80027d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_UART_MspInit+0x184>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <HAL_UART_MspInit+0x184>)
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_UART_MspInit+0x184>)
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <HAL_UART_MspInit+0x184>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_UART_MspInit+0x184>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_UART_MspInit+0x184>)
 80027f6:	2220      	movs	r2, #32
 80027f8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_UART_MspInit+0x184>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002800:	480d      	ldr	r0, [pc, #52]	; (8002838 <HAL_UART_MspInit+0x184>)
 8002802:	f000 fad5 	bl	8002db0 <HAL_DMA_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800280c:	f7ff ff28 	bl	8002660 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_UART_MspInit+0x184>)
 8002814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_UART_MspInit+0x184>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800281e:	bf00      	nop
 8002820:	3780      	adds	r7, #128	; 0x80
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40008000 	.word	0x40008000
 800282c:	40021000 	.word	0x40021000
 8002830:	40013800 	.word	0x40013800
 8002834:	48000800 	.word	0x48000800
 8002838:	200001c4 	.word	0x200001c4
 800283c:	40020008 	.word	0x40020008

08002840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a16      	ldr	r2, [pc, #88]	; (80028a8 <HAL_TIM_Base_MspInit+0x68>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10c      	bne.n	800286c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_TIM_Base_MspInit+0x6c>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <HAL_TIM_Base_MspInit+0x6c>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	6593      	str	r3, [r2, #88]	; 0x58
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_TIM_Base_MspInit+0x6c>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800286a:	e018      	b.n	800289e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0f      	ldr	r2, [pc, #60]	; (80028b0 <HAL_TIM_Base_MspInit+0x70>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d113      	bne.n	800289e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_TIM_Base_MspInit+0x6c>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_TIM_Base_MspInit+0x6c>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	6593      	str	r3, [r2, #88]	; 0x58
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_TIM_Base_MspInit+0x6c>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2032      	movs	r0, #50	; 0x32
 8002894:	f000 fa57 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002898:	2032      	movs	r0, #50	; 0x32
 800289a:	f000 fa6e 	bl	8002d7a <HAL_NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40000400 	.word	0x40000400
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40000c00 	.word	0x40000c00

080028b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_TIM_Encoder_MspInit+0x80>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d129      	bne.n	800292a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	6593      	str	r3, [r2, #88]	; 0x58
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fa:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002906:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002918:	230a      	movs	r3, #10
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002926:	f000 fcb5 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800292a:	bf00      	nop
 800292c:	3728      	adds	r7, #40	; 0x28
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40000800 	.word	0x40000800
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_TIM_MspPostInit+0x64>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d11b      	bne.n	8002996 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_TIM_MspPostInit+0x68>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <HAL_TIM_MspPostInit+0x68>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_TIM_MspPostInit+0x68>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002986:	2302      	movs	r3, #2
 8002988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <HAL_TIM_MspPostInit+0x6c>)
 8002992:	f000 fc7f 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40021000 	.word	0x40021000
 80029a8:	48000800 	.word	0x48000800

080029ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029b0:	e7fe      	b.n	80029b0 <NMI_Handler+0x4>

080029b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b6:	e7fe      	b.n	80029b6 <HardFault_Handler+0x4>

080029b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <MemManage_Handler+0x4>

080029be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c2:	e7fe      	b.n	80029c2 <BusFault_Handler+0x4>

080029c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <UsageFault_Handler+0x4>

080029ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f8:	f000 f8ac 	bl	8002b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <DMA1_Channel1_IRQHandler+0x10>)
 8002a06:	f000 faf6 	bl	8002ff6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200001c4 	.word	0x200001c4

08002a14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a1c:	f000 fdec 	bl	80035f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <TIM5_IRQHandler+0x10>)
 8002a2a:	f002 fa21 	bl	8004e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200002bc 	.word	0x200002bc

08002a38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <SystemInit+0x20>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <SystemInit+0x20>)
 8002a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a5c:	480d      	ldr	r0, [pc, #52]	; (8002a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a60:	f7ff ffea 	bl	8002a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a64:	480c      	ldr	r0, [pc, #48]	; (8002a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a66:	490d      	ldr	r1, [pc, #52]	; (8002a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <LoopForever+0xe>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a6c:	e002      	b.n	8002a74 <LoopCopyDataInit>

08002a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a72:	3304      	adds	r3, #4

08002a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a78:	d3f9      	bcc.n	8002a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a7c:	4c0a      	ldr	r4, [pc, #40]	; (8002aa8 <LoopForever+0x16>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a80:	e001      	b.n	8002a86 <LoopFillZerobss>

08002a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a84:	3204      	adds	r2, #4

08002a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a88:	d3fb      	bcc.n	8002a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f004 fbd5 	bl	8007238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a8e:	f7fe fa47 	bl	8000f20 <main>

08002a92 <LoopForever>:

LoopForever:
    b LoopForever
 8002a92:	e7fe      	b.n	8002a92 <LoopForever>
  ldr   r0, =_estack
 8002a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a9c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002aa0:	080074f4 	.word	0x080074f4
  ldr r2, =_sbss
 8002aa4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002aa8:	20000500 	.word	0x20000500

08002aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <ADC1_2_IRQHandler>

08002aae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab8:	2003      	movs	r0, #3
 8002aba:	f000 f939 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f000 f80e 	bl	8002ae0 <HAL_InitTick>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	71fb      	strb	r3, [r7, #7]
 8002ace:	e001      	b.n	8002ad4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ad0:	f7ff fdcc 	bl	800266c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ad4:	79fb      	ldrb	r3, [r7, #7]

}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_InitTick+0x68>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d022      	beq.n	8002b3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_InitTick+0x6c>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_InitTick+0x68>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f944 	bl	8002d96 <HAL_SYSTICK_Config>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	d809      	bhi.n	8002b2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b22:	f000 f910 	bl	8002d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_InitTick+0x70>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e007      	b.n	8002b3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	e004      	b.n	8002b3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e001      	b.n	8002b3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	2000001c 	.word	0x2000001c
 8002b4c:	20000014 	.word	0x20000014
 8002b50:	20000018 	.word	0x20000018

08002b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_IncTick+0x1c>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_IncTick+0x20>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <HAL_IncTick+0x1c>)
 8002b64:	6013      	str	r3, [r2, #0]
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	200003c4 	.word	0x200003c4
 8002b74:	2000001c 	.word	0x2000001c

08002b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <HAL_GetTick+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	200003c4 	.word	0x200003c4

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db0b      	blt.n	8002c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	4907      	ldr	r1, [pc, #28]	; (8002c2c <__NVIC_EnableIRQ+0x38>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2001      	movs	r0, #1
 8002c16:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	; (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	bf28      	it	cs
 8002ca2:	2304      	movcs	r3, #4
 8002ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d902      	bls.n	8002cb4 <NVIC_EncodePriority+0x30>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3b03      	subs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <NVIC_EncodePriority+0x32>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	4313      	orrs	r3, r2
         );
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cfc:	d301      	bcc.n	8002d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00f      	b.n	8002d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <SysTick_Config+0x40>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f7ff ff8e 	bl	8002c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <SysTick_Config+0x40>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <SysTick_Config+0x40>)
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000e010 	.word	0xe000e010

08002d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ff29 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d54:	f7ff ff40 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	6978      	ldr	r0, [r7, #20]
 8002d60:	f7ff ff90 	bl	8002c84 <NVIC_EncodePriority>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff5f 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff33 	bl	8002bf4 <__NVIC_EnableIRQ>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ffa4 	bl	8002cec <SysTick_Config>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e08d      	b.n	8002ede <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_DMA_Init+0x138>)
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d80f      	bhi.n	8002dee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b45      	ldr	r3, [pc, #276]	; (8002eec <HAL_DMA_Init+0x13c>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_DMA_Init+0x140>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a42      	ldr	r2, [pc, #264]	; (8002ef4 <HAL_DMA_Init+0x144>)
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
 8002dec:	e00e      	b.n	8002e0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <HAL_DMA_Init+0x148>)
 8002df6:	4413      	add	r3, r2
 8002df8:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <HAL_DMA_Init+0x140>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	009a      	lsls	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a3c      	ldr	r2, [pc, #240]	; (8002efc <HAL_DMA_Init+0x14c>)
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f9b6 	bl	80031d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e6c:	d102      	bne.n	8002e74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_DMA_Init+0x104>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d80c      	bhi.n	8002eb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9d6 	bl	800324c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	e008      	b.n	8002ec6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40020407 	.word	0x40020407
 8002eec:	bffdfff8 	.word	0xbffdfff8
 8002ef0:	cccccccd 	.word	0xcccccccd
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	bffdfbf8 	.word	0xbffdfbf8
 8002efc:	40020400 	.word	0x40020400

08002f00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_DMA_Start_IT+0x20>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e066      	b.n	8002fee <HAL_DMA_Start_IT+0xee>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d155      	bne.n	8002fe0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f8fb 	bl	8003154 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 020e 	orr.w	r2, r2, #14
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e00f      	b.n	8002f98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 020a 	orr.w	r2, r2, #10
 8002f96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fcc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e005      	b.n	8002fec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2204      	movs	r2, #4
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d026      	beq.n	8003070 <HAL_DMA_IRQHandler+0x7a>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d021      	beq.n	8003070 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0204 	bic.w	r2, r2, #4
 8003048:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f003 021f 	and.w	r2, r3, #31
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2104      	movs	r1, #4
 8003058:	fa01 f202 	lsl.w	r2, r1, r2
 800305c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	2b00      	cmp	r3, #0
 8003064:	d071      	beq.n	800314a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800306e:	e06c      	b.n	800314a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2202      	movs	r2, #2
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d02e      	beq.n	80030e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d029      	beq.n	80030e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 020a 	bic.w	r2, r2, #10
 80030aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f003 021f 	and.w	r2, r3, #31
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2102      	movs	r1, #2
 80030c2:	fa01 f202 	lsl.w	r2, r1, r2
 80030c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d038      	beq.n	800314a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80030e0:	e033      	b.n	800314a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2208      	movs	r2, #8
 80030ec:	409a      	lsls	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d02a      	beq.n	800314c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d025      	beq.n	800314c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 020e 	bic.w	r2, r2, #14
 800310e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	2101      	movs	r1, #1
 800311e:	fa01 f202 	lsl.w	r2, r1, r2
 8003122:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800314a:	bf00      	nop
 800314c:	bf00      	nop
}
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800316a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800317c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f003 021f 	and.w	r2, r3, #31
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f202 	lsl.w	r2, r1, r2
 8003190:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b10      	cmp	r3, #16
 80031a0:	d108      	bne.n	80031b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031b2:	e007      	b.n	80031c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	60da      	str	r2, [r3, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d802      	bhi.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e001      	b.n	80031ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031ec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3b08      	subs	r3, #8
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	009a      	lsls	r2, r3, #2
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	461a      	mov	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800321a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2201      	movs	r2, #1
 8003224:	409a      	lsls	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	651a      	str	r2, [r3, #80]	; 0x50
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40020407 	.word	0x40020407
 800323c:	40020800 	.word	0x40020800
 8003240:	40020820 	.word	0x40020820
 8003244:	cccccccd 	.word	0xcccccccd
 8003248:	40020880 	.word	0x40020880

0800324c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	461a      	mov	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a08      	ldr	r2, [pc, #32]	; (8003290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800326e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3b01      	subs	r3, #1
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	1000823f 	.word	0x1000823f
 8003290:	40020940 	.word	0x40020940

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032a2:	e15a      	b.n	800355a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 814c 	beq.w	8003554 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d005      	beq.n	80032d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d130      	bne.n	8003336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	2203      	movs	r2, #3
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800330a:	2201      	movs	r2, #1
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0201 	and.w	r2, r3, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b03      	cmp	r3, #3
 8003340:	d017      	beq.n	8003372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	2203      	movs	r2, #3
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d123      	bne.n	80033c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	08da      	lsrs	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3208      	adds	r2, #8
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	2203      	movs	r2, #3
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80a6 	beq.w	8003554 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003408:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <HAL_GPIO_Init+0x2e4>)
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	4a5a      	ldr	r2, [pc, #360]	; (8003578 <HAL_GPIO_Init+0x2e4>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6613      	str	r3, [r2, #96]	; 0x60
 8003414:	4b58      	ldr	r3, [pc, #352]	; (8003578 <HAL_GPIO_Init+0x2e4>)
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003420:	4a56      	ldr	r2, [pc, #344]	; (800357c <HAL_GPIO_Init+0x2e8>)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	3302      	adds	r3, #2
 8003428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220f      	movs	r2, #15
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800344a:	d01f      	beq.n	800348c <HAL_GPIO_Init+0x1f8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_GPIO_Init+0x2ec>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d019      	beq.n	8003488 <HAL_GPIO_Init+0x1f4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a4b      	ldr	r2, [pc, #300]	; (8003584 <HAL_GPIO_Init+0x2f0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_GPIO_Init+0x1f0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a4a      	ldr	r2, [pc, #296]	; (8003588 <HAL_GPIO_Init+0x2f4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00d      	beq.n	8003480 <HAL_GPIO_Init+0x1ec>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a49      	ldr	r2, [pc, #292]	; (800358c <HAL_GPIO_Init+0x2f8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_GPIO_Init+0x1e8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a48      	ldr	r2, [pc, #288]	; (8003590 <HAL_GPIO_Init+0x2fc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_GPIO_Init+0x1e4>
 8003474:	2305      	movs	r3, #5
 8003476:	e00a      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 8003478:	2306      	movs	r3, #6
 800347a:	e008      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 800347c:	2304      	movs	r3, #4
 800347e:	e006      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 8003480:	2303      	movs	r3, #3
 8003482:	e004      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 8003484:	2302      	movs	r3, #2
 8003486:	e002      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 800348c:	2300      	movs	r3, #0
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	f002 0203 	and.w	r2, r2, #3
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	4093      	lsls	r3, r2
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800349e:	4937      	ldr	r1, [pc, #220]	; (800357c <HAL_GPIO_Init+0x2e8>)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	3302      	adds	r3, #2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <HAL_GPIO_Init+0x300>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034d0:	4a30      	ldr	r2, [pc, #192]	; (8003594 <HAL_GPIO_Init+0x300>)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_GPIO_Init+0x300>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <HAL_GPIO_Init+0x300>)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_GPIO_Init+0x300>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43db      	mvns	r3, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_GPIO_Init+0x300>)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_GPIO_Init+0x300>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	43db      	mvns	r3, r3
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800354e:	4a11      	ldr	r2, [pc, #68]	; (8003594 <HAL_GPIO_Init+0x300>)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f ae9d 	bne.w	80032a4 <HAL_GPIO_Init+0x10>
  }
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000
 800357c:	40010000 	.word	0x40010000
 8003580:	48000400 	.word	0x48000400
 8003584:	48000800 	.word	0x48000800
 8003588:	48000c00 	.word	0x48000c00
 800358c:	48001000 	.word	0x48001000
 8003590:	48001400 	.word	0x48001400
 8003594:	40010400 	.word	0x40010400

08003598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	887b      	ldrh	r3, [r7, #2]
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e001      	b.n	80035ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035e4:	e002      	b.n	80035ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f806 	bl	8003628 <HAL_GPIO_EXTI_Callback>
  }
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d141      	bne.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800364e:	4b4b      	ldr	r3, [pc, #300]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365a:	d131      	bne.n	80036c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003662:	4a46      	ldr	r2, [pc, #280]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800366c:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003674:	4a41      	ldr	r2, [pc, #260]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800367c:	4b40      	ldr	r3, [pc, #256]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2232      	movs	r2, #50	; 0x32
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	4a3f      	ldr	r2, [pc, #252]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	0c9b      	lsrs	r3, r3, #18
 800368e:	3301      	adds	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003692:	e002      	b.n	800369a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3b01      	subs	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369a:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d102      	bne.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f2      	bne.n	8003694 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ae:	4b33      	ldr	r3, [pc, #204]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d158      	bne.n	800376e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e057      	b.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c6:	4a2d      	ldr	r2, [pc, #180]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036d0:	e04d      	b.n	800376e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d8:	d141      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036da:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d131      	bne.n	800374c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ee:	4a23      	ldr	r2, [pc, #140]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003706:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2232      	movs	r2, #50	; 0x32
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	0c9b      	lsrs	r3, r3, #18
 800371a:	3301      	adds	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800371e:	e002      	b.n	8003726 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3b01      	subs	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d102      	bne.n	800373a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f2      	bne.n	8003720 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003746:	d112      	bne.n	800376e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e011      	b.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800375c:	e007      	b.n	800376e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003766:	4a05      	ldr	r2, [pc, #20]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40007000 	.word	0x40007000
 8003780:	20000014 	.word	0x20000014
 8003784:	431bde83 	.word	0x431bde83

08003788 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003796:	6093      	str	r3, [r2, #8]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40007000 	.word	0x40007000

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e2fe      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d075      	beq.n	80038b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c6:	4b97      	ldr	r3, [pc, #604]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d0:	4b94      	ldr	r3, [pc, #592]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d102      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3e>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_OscConfig+0x44>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b8d      	ldr	r3, [pc, #564]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05b      	beq.n	80038b0 <HAL_RCC_OscConfig+0x108>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d157      	bne.n	80038b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e2d9      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x74>
 800380e:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a84      	ldr	r2, [pc, #528]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e01d      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x98>
 8003826:	4b7f      	ldr	r3, [pc, #508]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7e      	ldr	r2, [pc, #504]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b7c      	ldr	r3, [pc, #496]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7b      	ldr	r2, [pc, #492]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 8003840:	4b78      	ldr	r3, [pc, #480]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a77      	ldr	r2, [pc, #476]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a74      	ldr	r2, [pc, #464]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7ff f98a 	bl	8002b78 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7ff f986 	bl	8002b78 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e29e      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0xc0>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7ff f976 	bl	8002b78 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003890:	f7ff f972 	bl	8002b78 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e28a      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a2:	4b60      	ldr	r3, [pc, #384]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0xe8>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d075      	beq.n	80039aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038be:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c8:	4b56      	ldr	r3, [pc, #344]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d102      	bne.n	80038de <HAL_RCC_OscConfig+0x136>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d002      	beq.n	80038e4 <HAL_RCC_OscConfig+0x13c>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d11f      	bne.n	8003924 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e4:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_OscConfig+0x154>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e25d      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b49      	ldr	r3, [pc, #292]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	4946      	ldr	r1, [pc, #280]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003910:	4b45      	ldr	r3, [pc, #276]	; (8003a28 <HAL_RCC_OscConfig+0x280>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff f8e3 	bl	8002ae0 <HAL_InitTick>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d043      	beq.n	80039a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e249      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d023      	beq.n	8003974 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392c:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3c      	ldr	r2, [pc, #240]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7ff f91e 	bl	8002b78 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003940:	f7ff f91a 	bl	8002b78 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e232      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	061b      	lsls	r3, r3, #24
 800396c:	492d      	ldr	r1, [pc, #180]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
 8003972:	e01a      	b.n	80039aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003974:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800397a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800397e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7ff f8fa 	bl	8002b78 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003988:	f7ff f8f6 	bl	8002b78 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e20e      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800399a:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x1e0>
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d041      	beq.n	8003a3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01c      	beq.n	80039f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039be:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c4:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7ff f8d3 	bl	8002b78 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d6:	f7ff f8cf 	bl	8002b78 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1e7      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0ef      	beq.n	80039d6 <HAL_RCC_OscConfig+0x22e>
 80039f6:	e020      	b.n	8003a3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7ff f8b6 	bl	8002b78 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a0e:	e00d      	b.n	8003a2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a10:	f7ff f8b2 	bl	8002b78 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d906      	bls.n	8003a2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1ca      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a2c:	4b8c      	ldr	r3, [pc, #560]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1ea      	bne.n	8003a10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80a6 	beq.w	8003b94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a4c:	4b84      	ldr	r3, [pc, #528]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2b4>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x2b6>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	4a7e      	ldr	r2, [pc, #504]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6e:	4b7c      	ldr	r3, [pc, #496]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7e:	4b79      	ldr	r3, [pc, #484]	; (8003c64 <HAL_RCC_OscConfig+0x4bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d118      	bne.n	8003abc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a8a:	4b76      	ldr	r3, [pc, #472]	; (8003c64 <HAL_RCC_OscConfig+0x4bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a75      	ldr	r2, [pc, #468]	; (8003c64 <HAL_RCC_OscConfig+0x4bc>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a96:	f7ff f86f 	bl	8002b78 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9e:	f7ff f86b 	bl	8002b78 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e183      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	; (8003c64 <HAL_RCC_OscConfig+0x4bc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d108      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x32e>
 8003ac4:	4b66      	ldr	r3, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	4a65      	ldr	r2, [pc, #404]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad4:	e024      	b.n	8003b20 <HAL_RCC_OscConfig+0x378>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d110      	bne.n	8003b00 <HAL_RCC_OscConfig+0x358>
 8003ade:	4b60      	ldr	r3, [pc, #384]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	4a5e      	ldr	r2, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	4a5a      	ldr	r2, [pc, #360]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003afe:	e00f      	b.n	8003b20 <HAL_RCC_OscConfig+0x378>
 8003b00:	4b57      	ldr	r3, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	4a56      	ldr	r2, [pc, #344]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b10:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	4a52      	ldr	r2, [pc, #328]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d016      	beq.n	8003b56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7ff f826 	bl	8002b78 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7ff f822 	bl	8002b78 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e138      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b46:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ed      	beq.n	8003b30 <HAL_RCC_OscConfig+0x388>
 8003b54:	e015      	b.n	8003b82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7ff f80f 	bl	8002b78 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f7ff f80b 	bl	8002b78 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e121      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b74:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ed      	bne.n	8003b5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b82:	7ffb      	ldrb	r3, [r7, #31]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d105      	bne.n	8003b94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	4a34      	ldr	r2, [pc, #208]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d03c      	beq.n	8003c1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bae:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fe ffde 	bl	8002b78 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bc0:	f7fe ffda 	bl	8002b78 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e0f2      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ef      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x418>
 8003be0:	e01b      	b.n	8003c1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003be2:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fe ffc1 	bl	8002b78 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bfa:	f7fe ffbd 	bl	8002b78 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0d5      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1ef      	bne.n	8003bfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80c9 	beq.w	8003db6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 030c 	and.w	r3, r3, #12
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	f000 8083 	beq.w	8003d38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d15e      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe ff97 	bl	8002b78 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4c:	e00c      	b.n	8003c68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe ff93 	bl	8002b78 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d905      	bls.n	8003c68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e0ab      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c68:	4b55      	ldr	r3, [pc, #340]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ec      	bne.n	8003c4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c74:	4b52      	ldr	r3, [pc, #328]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	4b52      	ldr	r3, [pc, #328]	; (8003dc4 <HAL_RCC_OscConfig+0x61c>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6a11      	ldr	r1, [r2, #32]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c84:	3a01      	subs	r2, #1
 8003c86:	0112      	lsls	r2, r2, #4
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c8e:	0212      	lsls	r2, r2, #8
 8003c90:	4311      	orrs	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c96:	0852      	lsrs	r2, r2, #1
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0552      	lsls	r2, r2, #21
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ca2:	0852      	lsrs	r2, r2, #1
 8003ca4:	3a01      	subs	r2, #1
 8003ca6:	0652      	lsls	r2, r2, #25
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cae:	06d2      	lsls	r2, r2, #27
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	4943      	ldr	r1, [pc, #268]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb8:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a40      	ldr	r2, [pc, #256]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc4:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a3d      	ldr	r2, [pc, #244]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fe ff52 	bl	8002b78 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe ff4e 	bl	8002b78 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e066      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x530>
 8003cf6:	e05e      	b.n	8003db6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf8:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe ff38 	bl	8002b78 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fe ff34 	bl	8002b78 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e04c      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1e:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d2a:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	4924      	ldr	r1, [pc, #144]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_OscConfig+0x620>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	60cb      	str	r3, [r1, #12]
 8003d36:	e03e      	b.n	8003db6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e039      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 0203 	and.w	r2, r3, #3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d12c      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	3b01      	subs	r3, #1
 8003d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d123      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d11b      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d113      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	019f800c 	.word	0x019f800c
 8003dc8:	feeefffc 	.word	0xfeeefffc

08003dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e11e      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de4:	4b91      	ldr	r3, [pc, #580]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d910      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b8e      	ldr	r3, [pc, #568]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 020f 	bic.w	r2, r3, #15
 8003dfa:	498c      	ldr	r1, [pc, #560]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b8a      	ldr	r3, [pc, #552]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e106      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d073      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d129      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e28:	4b81      	ldr	r3, [pc, #516]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0f4      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e38:	f000 f99e 	bl	8004178 <RCC_GetSysClockFreqFromPLLSource>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4a7c      	ldr	r2, [pc, #496]	; (8004034 <HAL_RCC_ClockConfig+0x268>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d93f      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e46:	4b7a      	ldr	r3, [pc, #488]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d033      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d12f      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e66:	4b72      	ldr	r3, [pc, #456]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e6e:	4a70      	ldr	r2, [pc, #448]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e024      	b.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e84:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0c6      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e94:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0be      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ea4:	f000 f8ce 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4a61      	ldr	r2, [pc, #388]	; (8004034 <HAL_RCC_ClockConfig+0x268>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d909      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eb2:	4b5f      	ldr	r3, [pc, #380]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eba:	4a5d      	ldr	r2, [pc, #372]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ec6:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4957      	ldr	r1, [pc, #348]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fe fe4e 	bl	8002b78 <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f7fe fe4a 	bl	8002b78 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e095      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b4e      	ldr	r3, [pc, #312]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1eb      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d023      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f20:	4b43      	ldr	r3, [pc, #268]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a42      	ldr	r2, [pc, #264]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f38:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f40:	4a3b      	ldr	r2, [pc, #236]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f48:	4b39      	ldr	r3, [pc, #228]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4936      	ldr	r1, [pc, #216]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f62:	4b33      	ldr	r3, [pc, #204]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	4a32      	ldr	r2, [pc, #200]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6e:	4b2f      	ldr	r3, [pc, #188]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d21d      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 020f 	bic.w	r2, r3, #15
 8003f84:	4929      	ldr	r1, [pc, #164]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f8c:	f7fe fdf4 	bl	8002b78 <HAL_GetTick>
 8003f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f7fe fdf0 	bl	8002b78 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e03b      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1ed      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4917      	ldr	r1, [pc, #92]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490f      	ldr	r1, [pc, #60]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ff6:	f000 f825 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490c      	ldr	r1, [pc, #48]	; (8004038 <HAL_RCC_ClockConfig+0x26c>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	fa22 f303 	lsr.w	r3, r2, r3
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <HAL_RCC_ClockConfig+0x270>)
 8004014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x274>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fd60 	bl	8002ae0 <HAL_InitTick>
 8004020:	4603      	mov	r3, r0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40022000 	.word	0x40022000
 8004030:	40021000 	.word	0x40021000
 8004034:	04c4b400 	.word	0x04c4b400
 8004038:	080074a4 	.word	0x080074a4
 800403c:	20000014 	.word	0x20000014
 8004040:	20000018 	.word	0x20000018

08004044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800404a:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d102      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004056:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	e047      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b08      	cmp	r3, #8
 8004066:	d102      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004068:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e03e      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800406e:	4b23      	ldr	r3, [pc, #140]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d136      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3301      	adds	r3, #1
 8004090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d10c      	bne.n	80040b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004098:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a2:	68d2      	ldr	r2, [r2, #12]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	617b      	str	r3, [r7, #20]
      break;
 80040b0:	e00c      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b2:	4a13      	ldr	r2, [pc, #76]	; (8004100 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	4a10      	ldr	r2, [pc, #64]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040bc:	68d2      	ldr	r2, [r2, #12]
 80040be:	0a12      	lsrs	r2, r2, #8
 80040c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]
      break;
 80040ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	0e5b      	lsrs	r3, r3, #25
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	3301      	adds	r3, #1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	e001      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040ec:	693b      	ldr	r3, [r7, #16]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	00f42400 	.word	0x00f42400
 8004104:	016e3600 	.word	0x016e3600

08004108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_GetHCLKFreq+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000014 	.word	0x20000014

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004124:	f7ff fff0 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4904      	ldr	r1, [pc, #16]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	080074b4 	.word	0x080074b4

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004150:	f7ff ffda 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0adb      	lsrs	r3, r3, #11
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4904      	ldr	r1, [pc, #16]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	080074b4 	.word	0x080074b4

08004178 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004188:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d10c      	bne.n	80041b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800419c:	4a17      	ldr	r2, [pc, #92]	; (80041fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a6:	68d2      	ldr	r2, [r2, #12]
 80041a8:	0a12      	lsrs	r2, r2, #8
 80041aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	617b      	str	r3, [r7, #20]
    break;
 80041b4:	e00c      	b.n	80041d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041c0:	68d2      	ldr	r2, [r2, #12]
 80041c2:	0a12      	lsrs	r2, r2, #8
 80041c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
    break;
 80041ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	0e5b      	lsrs	r3, r3, #25
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	3301      	adds	r3, #1
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041ea:	687b      	ldr	r3, [r7, #4]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40021000 	.word	0x40021000
 80041fc:	016e3600 	.word	0x016e3600
 8004200:	00f42400 	.word	0x00f42400

08004204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800420c:	2300      	movs	r3, #0
 800420e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004210:	2300      	movs	r3, #0
 8004212:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8098 	beq.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4b40      	ldr	r3, [pc, #256]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	4a3f      	ldr	r2, [pc, #252]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6593      	str	r3, [r2, #88]	; 0x58
 800423e:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424e:	4b3a      	ldr	r3, [pc, #232]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a39      	ldr	r2, [pc, #228]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425a:	f7fe fc8d 	bl	8002b78 <HAL_GetTick>
 800425e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004260:	e009      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fe fc89 	bl	8002b78 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d902      	bls.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	74fb      	strb	r3, [r7, #19]
        break;
 8004274:	e005      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004276:	4b30      	ldr	r3, [pc, #192]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0ef      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d159      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004288:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004292:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01e      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d019      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a4:	4b23      	ldr	r3, [pc, #140]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b0:	4b20      	ldr	r3, [pc, #128]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c0:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fe fc49 	bl	8002b78 <HAL_GetTick>
 80042e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e8:	e00b      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fe fc45 	bl	8002b78 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d902      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004300:	e006      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ec      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004324:	4903      	ldr	r1, [pc, #12]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800432c:	e008      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	74bb      	strb	r3, [r7, #18]
 8004332:	e005      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004334:	40021000 	.word	0x40021000
 8004338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004340:	7c7b      	ldrb	r3, [r7, #17]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d105      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004346:	4ba7      	ldr	r3, [pc, #668]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	4aa6      	ldr	r2, [pc, #664]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800435e:	4ba1      	ldr	r3, [pc, #644]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f023 0203 	bic.w	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	499d      	ldr	r1, [pc, #628]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004380:	4b98      	ldr	r3, [pc, #608]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f023 020c 	bic.w	r2, r3, #12
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	4995      	ldr	r1, [pc, #596]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a2:	4b90      	ldr	r3, [pc, #576]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	498c      	ldr	r1, [pc, #560]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c4:	4b87      	ldr	r3, [pc, #540]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	4984      	ldr	r1, [pc, #528]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043e6:	4b7f      	ldr	r3, [pc, #508]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	497b      	ldr	r1, [pc, #492]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004408:	4b76      	ldr	r3, [pc, #472]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	4973      	ldr	r1, [pc, #460]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800442a:	4b6e      	ldr	r3, [pc, #440]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004430:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	496a      	ldr	r1, [pc, #424]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800444c:	4b65      	ldr	r3, [pc, #404]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	4962      	ldr	r1, [pc, #392]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800446e:	4b5d      	ldr	r3, [pc, #372]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	4959      	ldr	r1, [pc, #356]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004490:	4b54      	ldr	r3, [pc, #336]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004496:	f023 0203 	bic.w	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	4951      	ldr	r1, [pc, #324]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b2:	4b4c      	ldr	r3, [pc, #304]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	4948      	ldr	r1, [pc, #288]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d4:	4b43      	ldr	r3, [pc, #268]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	4940      	ldr	r1, [pc, #256]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f4:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a3a      	ldr	r2, [pc, #232]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800450c:	4b35      	ldr	r3, [pc, #212]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	4932      	ldr	r1, [pc, #200]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452a:	d105      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800452c:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004536:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d015      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004544:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	4924      	ldr	r1, [pc, #144]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004562:	d105      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004564:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800456e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	4916      	ldr	r1, [pc, #88]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459a:	d105      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d019      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4908      	ldr	r1, [pc, #32]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d2:	d109      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	4a02      	ldr	r2, [pc, #8]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045de:	60d3      	str	r3, [r2, #12]
 80045e0:	e002      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045f4:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	4926      	ldr	r1, [pc, #152]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004612:	d105      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4a20      	ldr	r2, [pc, #128]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d015      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463a:	4918      	ldr	r1, [pc, #96]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d105      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a12      	ldr	r2, [pc, #72]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004656:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d015      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004664:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800466a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004672:	490a      	ldr	r1, [pc, #40]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004682:	d105      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4a04      	ldr	r2, [pc, #16]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800468e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004690:	7cbb      	ldrb	r3, [r7, #18]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000

080046a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e049      	b.n	8004746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fe f8ba 	bl	8002840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f000 ff68 	bl	80055b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d001      	beq.n	8004768 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e04c      	b.n	8004802 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a26      	ldr	r2, [pc, #152]	; (8004810 <HAL_TIM_Base_Start+0xc0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d022      	beq.n	80047c0 <HAL_TIM_Base_Start+0x70>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004782:	d01d      	beq.n	80047c0 <HAL_TIM_Base_Start+0x70>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a22      	ldr	r2, [pc, #136]	; (8004814 <HAL_TIM_Base_Start+0xc4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d018      	beq.n	80047c0 <HAL_TIM_Base_Start+0x70>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a21      	ldr	r2, [pc, #132]	; (8004818 <HAL_TIM_Base_Start+0xc8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <HAL_TIM_Base_Start+0x70>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1f      	ldr	r2, [pc, #124]	; (800481c <HAL_TIM_Base_Start+0xcc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <HAL_TIM_Base_Start+0x70>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <HAL_TIM_Base_Start+0xd0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <HAL_TIM_Base_Start+0x70>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <HAL_TIM_Base_Start+0xd4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_Base_Start+0x70>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <HAL_TIM_Base_Start+0xd8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d115      	bne.n	80047ec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_TIM_Base_Start+0xdc>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d015      	beq.n	80047fe <HAL_TIM_Base_Start+0xae>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d8:	d011      	beq.n	80047fe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	e008      	b.n	80047fe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e000      	b.n	8004800 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40000c00 	.word	0x40000c00
 8004820:	40013400 	.word	0x40013400
 8004824:	40014000 	.word	0x40014000
 8004828:	40015000 	.word	0x40015000
 800482c:	00010007 	.word	0x00010007

08004830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d001      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e054      	b.n	80048f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a26      	ldr	r2, [pc, #152]	; (8004900 <HAL_TIM_Base_Start_IT+0xd0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d022      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004872:	d01d      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a22      	ldr	r2, [pc, #136]	; (8004904 <HAL_TIM_Base_Start_IT+0xd4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a21      	ldr	r2, [pc, #132]	; (8004908 <HAL_TIM_Base_Start_IT+0xd8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1f      	ldr	r2, [pc, #124]	; (800490c <HAL_TIM_Base_Start_IT+0xdc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1e      	ldr	r2, [pc, #120]	; (8004910 <HAL_TIM_Base_Start_IT+0xe0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <HAL_TIM_Base_Start_IT+0xe4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <HAL_TIM_Base_Start_IT+0xe8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d115      	bne.n	80048dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_TIM_Base_Start_IT+0xec>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b06      	cmp	r3, #6
 80048c0:	d015      	beq.n	80048ee <HAL_TIM_Base_Start_IT+0xbe>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c8:	d011      	beq.n	80048ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	e008      	b.n	80048ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e000      	b.n	80048f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40013400 	.word	0x40013400
 8004914:	40014000 	.word	0x40014000
 8004918:	40015000 	.word	0x40015000
 800491c:	00010007 	.word	0x00010007

08004920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e049      	b.n	80049c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f841 	bl	80049ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3304      	adds	r3, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f000 fe28 	bl	80055b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d109      	bne.n	8004a08 <HAL_TIM_PWM_Start+0x24>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e03c      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d109      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x3e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	e02f      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d109      	bne.n	8004a3c <HAL_TIM_PWM_Start+0x58>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e022      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d109      	bne.n	8004a56 <HAL_TIM_PWM_Start+0x72>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e015      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d109      	bne.n	8004a70 <HAL_TIM_PWM_Start+0x8c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e008      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0a6      	b.n	8004bd8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_PWM_Start+0xb6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a98:	e023      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start+0xc6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa8:	e01b      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start+0xd6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab8:	e013      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_PWM_Start+0xe6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac8:	e00b      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_PWM_Start+0xf6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad8:	e003      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	6839      	ldr	r1, [r7, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 f9dc 	bl	8005ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a3a      	ldr	r2, [pc, #232]	; (8004be0 <HAL_TIM_PWM_Start+0x1fc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d018      	beq.n	8004b2c <HAL_TIM_PWM_Start+0x148>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a39      	ldr	r2, [pc, #228]	; (8004be4 <HAL_TIM_PWM_Start+0x200>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d013      	beq.n	8004b2c <HAL_TIM_PWM_Start+0x148>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a37      	ldr	r2, [pc, #220]	; (8004be8 <HAL_TIM_PWM_Start+0x204>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00e      	beq.n	8004b2c <HAL_TIM_PWM_Start+0x148>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a36      	ldr	r2, [pc, #216]	; (8004bec <HAL_TIM_PWM_Start+0x208>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d009      	beq.n	8004b2c <HAL_TIM_PWM_Start+0x148>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a34      	ldr	r2, [pc, #208]	; (8004bf0 <HAL_TIM_PWM_Start+0x20c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_TIM_PWM_Start+0x148>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a33      	ldr	r2, [pc, #204]	; (8004bf4 <HAL_TIM_PWM_Start+0x210>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIM_PWM_Start+0x14c>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <HAL_TIM_PWM_Start+0x14e>
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <HAL_TIM_PWM_Start+0x1fc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d022      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x1b2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d01d      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x1b2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <HAL_TIM_PWM_Start+0x214>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d018      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x1b2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a24      	ldr	r2, [pc, #144]	; (8004bfc <HAL_TIM_PWM_Start+0x218>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x1b2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <HAL_TIM_PWM_Start+0x21c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00e      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x1b2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_TIM_PWM_Start+0x200>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x1b2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <HAL_TIM_PWM_Start+0x204>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x1b2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_TIM_PWM_Start+0x210>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d115      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_TIM_PWM_Start+0x220>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b06      	cmp	r3, #6
 8004ba6:	d015      	beq.n	8004bd4 <HAL_TIM_PWM_Start+0x1f0>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bae:	d011      	beq.n	8004bd4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	e008      	b.n	8004bd4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e000      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	40013400 	.word	0x40013400
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40014400 	.word	0x40014400
 8004bf0:	40014800 	.word	0x40014800
 8004bf4:	40015000 	.word	0x40015000
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	00010007 	.word	0x00010007

08004c08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e097      	b.n	8004d4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fd fe3f 	bl	80028b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004c4c:	f023 0307 	bic.w	r3, r3, #7
 8004c50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f000 fca9 	bl	80055b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8a:	f023 0303 	bic.w	r3, r3, #3
 8004c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ca8:	f023 030c 	bic.w	r3, r3, #12
 8004cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	011a      	lsls	r2, r3, #4
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	031b      	lsls	r3, r3, #12
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d110      	bne.n	8004da6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d8a:	7b7b      	ldrb	r3, [r7, #13]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d001      	beq.n	8004d94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e069      	b.n	8004e68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da4:	e031      	b.n	8004e0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d110      	bne.n	8004dce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dac:	7bbb      	ldrb	r3, [r7, #14]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004db2:	7b3b      	ldrb	r3, [r7, #12]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d001      	beq.n	8004dbc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e055      	b.n	8004e68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dcc:	e01d      	b.n	8004e0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d108      	bne.n	8004de6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d105      	bne.n	8004de6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dda:	7b7b      	ldrb	r3, [r7, #13]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d102      	bne.n	8004de6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004de0:	7b3b      	ldrb	r3, [r7, #12]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d001      	beq.n	8004dea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e03e      	b.n	8004e68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_TIM_Encoder_Start+0xc4>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d008      	beq.n	8004e28 <HAL_TIM_Encoder_Start+0xd4>
 8004e16:	e00f      	b.n	8004e38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 f841 	bl	8005ea8 <TIM_CCxChannelCmd>
      break;
 8004e26:	e016      	b.n	8004e56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2104      	movs	r1, #4
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 f839 	bl	8005ea8 <TIM_CCxChannelCmd>
      break;
 8004e36:	e00e      	b.n	8004e56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4618      	mov	r0, r3
 8004e42:	f001 f831 	bl	8005ea8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2104      	movs	r1, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 f82a 	bl	8005ea8 <TIM_CCxChannelCmd>
      break;
 8004e54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d020      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0202 	mvn.w	r2, #2
 8004ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fb5c 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fb4e 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fb5f 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d020      	beq.n	8004f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01b      	beq.n	8004f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0204 	mvn.w	r2, #4
 8004ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fb36 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fb28 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fb39 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d020      	beq.n	8004f6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01b      	beq.n	8004f6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0208 	mvn.w	r2, #8
 8004f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2204      	movs	r2, #4
 8004f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fb10 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fb02 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fb13 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d020      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01b      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0210 	mvn.w	r2, #16
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 faea 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fadc 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 faed 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0201 	mvn.w	r2, #1
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fc fb50 	bl	800167c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d104      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00c      	beq.n	800500a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d007      	beq.n	800500a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 f815 	bl	8006034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00c      	beq.n	800502e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f001 f80d 	bl	8006048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00c      	beq.n	8005052 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800504a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 faa7 	bl	80055a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00c      	beq.n	8005076 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f06f 0220 	mvn.w	r2, #32
 800506e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 ffd5 	bl	8006020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00c      	beq.n	800509a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 ffe1 	bl	800605c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00c      	beq.n	80050be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80050b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 ffd9 	bl	8006070 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80050da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 ffd1 	bl	8006084 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00c      	beq.n	8005106 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80050fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 ffc9 	bl	8006098 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800512a:	2302      	movs	r3, #2
 800512c:	e0ff      	b.n	800532e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b14      	cmp	r3, #20
 800513a:	f200 80f0 	bhi.w	800531e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005199 	.word	0x08005199
 8005148:	0800531f 	.word	0x0800531f
 800514c:	0800531f 	.word	0x0800531f
 8005150:	0800531f 	.word	0x0800531f
 8005154:	080051d9 	.word	0x080051d9
 8005158:	0800531f 	.word	0x0800531f
 800515c:	0800531f 	.word	0x0800531f
 8005160:	0800531f 	.word	0x0800531f
 8005164:	0800521b 	.word	0x0800521b
 8005168:	0800531f 	.word	0x0800531f
 800516c:	0800531f 	.word	0x0800531f
 8005170:	0800531f 	.word	0x0800531f
 8005174:	0800525b 	.word	0x0800525b
 8005178:	0800531f 	.word	0x0800531f
 800517c:	0800531f 	.word	0x0800531f
 8005180:	0800531f 	.word	0x0800531f
 8005184:	0800529d 	.word	0x0800529d
 8005188:	0800531f 	.word	0x0800531f
 800518c:	0800531f 	.word	0x0800531f
 8005190:	0800531f 	.word	0x0800531f
 8005194:	080052dd 	.word	0x080052dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fabc 	bl	800571c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0208 	orr.w	r2, r2, #8
 80051b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0204 	bic.w	r2, r2, #4
 80051c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6999      	ldr	r1, [r3, #24]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	619a      	str	r2, [r3, #24]
      break;
 80051d6:	e0a5      	b.n	8005324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fb36 	bl	8005850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6999      	ldr	r1, [r3, #24]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	021a      	lsls	r2, r3, #8
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	619a      	str	r2, [r3, #24]
      break;
 8005218:	e084      	b.n	8005324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fba9 	bl	8005978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0208 	orr.w	r2, r2, #8
 8005234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0204 	bic.w	r2, r2, #4
 8005244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69d9      	ldr	r1, [r3, #28]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	61da      	str	r2, [r3, #28]
      break;
 8005258:	e064      	b.n	8005324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fc1b 	bl	8005a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69d9      	ldr	r1, [r3, #28]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	021a      	lsls	r2, r3, #8
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	61da      	str	r2, [r3, #28]
      break;
 800529a:	e043      	b.n	8005324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fc8e 	bl	8005bc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0208 	orr.w	r2, r2, #8
 80052b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0204 	bic.w	r2, r2, #4
 80052c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80052da:	e023      	b.n	8005324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fcd8 	bl	8005c98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	021a      	lsls	r2, r3, #8
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800531c:	e002      	b.n	8005324 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
      break;
 8005322:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800532c:	7dfb      	ldrb	r3, [r7, #23]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop

08005338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIM_ConfigClockSource+0x1c>
 8005350:	2302      	movs	r3, #2
 8005352:	e0f6      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x20a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005372:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800537e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6f      	ldr	r2, [pc, #444]	; (800554c <HAL_TIM_ConfigClockSource+0x214>)
 800538e:	4293      	cmp	r3, r2
 8005390:	f000 80c1 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 8005394:	4a6d      	ldr	r2, [pc, #436]	; (800554c <HAL_TIM_ConfigClockSource+0x214>)
 8005396:	4293      	cmp	r3, r2
 8005398:	f200 80c6 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 800539c:	4a6c      	ldr	r2, [pc, #432]	; (8005550 <HAL_TIM_ConfigClockSource+0x218>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	f000 80b9 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 80053a4:	4a6a      	ldr	r2, [pc, #424]	; (8005550 <HAL_TIM_ConfigClockSource+0x218>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	f200 80be 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 80053ac:	4a69      	ldr	r2, [pc, #420]	; (8005554 <HAL_TIM_ConfigClockSource+0x21c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	f000 80b1 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 80053b4:	4a67      	ldr	r2, [pc, #412]	; (8005554 <HAL_TIM_ConfigClockSource+0x21c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	f200 80b6 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 80053bc:	4a66      	ldr	r2, [pc, #408]	; (8005558 <HAL_TIM_ConfigClockSource+0x220>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	f000 80a9 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 80053c4:	4a64      	ldr	r2, [pc, #400]	; (8005558 <HAL_TIM_ConfigClockSource+0x220>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	f200 80ae 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 80053cc:	4a63      	ldr	r2, [pc, #396]	; (800555c <HAL_TIM_ConfigClockSource+0x224>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	f000 80a1 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 80053d4:	4a61      	ldr	r2, [pc, #388]	; (800555c <HAL_TIM_ConfigClockSource+0x224>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	f200 80a6 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 80053dc:	4a60      	ldr	r2, [pc, #384]	; (8005560 <HAL_TIM_ConfigClockSource+0x228>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	f000 8099 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 80053e4:	4a5e      	ldr	r2, [pc, #376]	; (8005560 <HAL_TIM_ConfigClockSource+0x228>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f200 809e 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 80053ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053f0:	f000 8091 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 80053f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053f8:	f200 8096 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 80053fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005400:	f000 8089 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 8005404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005408:	f200 808e 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005410:	d03e      	beq.n	8005490 <HAL_TIM_ConfigClockSource+0x158>
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005416:	f200 8087 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	f000 8086 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1f6>
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	d87f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 8005428:	2b70      	cmp	r3, #112	; 0x70
 800542a:	d01a      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x12a>
 800542c:	2b70      	cmp	r3, #112	; 0x70
 800542e:	d87b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 8005430:	2b60      	cmp	r3, #96	; 0x60
 8005432:	d050      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x19e>
 8005434:	2b60      	cmp	r3, #96	; 0x60
 8005436:	d877      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 8005438:	2b50      	cmp	r3, #80	; 0x50
 800543a:	d03c      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x17e>
 800543c:	2b50      	cmp	r3, #80	; 0x50
 800543e:	d873      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d058      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x1be>
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d86f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 8005448:	2b30      	cmp	r3, #48	; 0x30
 800544a:	d064      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	d86b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d060      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d867      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d05c      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 800545c:	2b10      	cmp	r3, #16
 800545e:	d05a      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x1de>
 8005460:	e062      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005472:	f000 fcf9 	bl	8005e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
      break;
 800548e:	e04f      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054a0:	f000 fce2 	bl	8005e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b2:	609a      	str	r2, [r3, #8]
      break;
 80054b4:	e03c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 fc54 	bl	8005d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2150      	movs	r1, #80	; 0x50
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fcad 	bl	8005e2e <TIM_ITRx_SetConfig>
      break;
 80054d4:	e02c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e2:	461a      	mov	r2, r3
 80054e4:	f000 fc73 	bl	8005dce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2160      	movs	r1, #96	; 0x60
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fc9d 	bl	8005e2e <TIM_ITRx_SetConfig>
      break;
 80054f4:	e01c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005502:	461a      	mov	r2, r3
 8005504:	f000 fc34 	bl	8005d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2140      	movs	r1, #64	; 0x40
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fc8d 	bl	8005e2e <TIM_ITRx_SetConfig>
      break;
 8005514:	e00c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f000 fc84 	bl	8005e2e <TIM_ITRx_SetConfig>
      break;
 8005526:	e003      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
      break;
 800552c:	e000      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800552e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	00100070 	.word	0x00100070
 8005550:	00100060 	.word	0x00100060
 8005554:	00100050 	.word	0x00100050
 8005558:	00100040 	.word	0x00100040
 800555c:	00100030 	.word	0x00100030
 8005560:	00100020 	.word	0x00100020

08005564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a4c      	ldr	r2, [pc, #304]	; (80056f8 <TIM_Base_SetConfig+0x144>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d017      	beq.n	80055fc <TIM_Base_SetConfig+0x48>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d2:	d013      	beq.n	80055fc <TIM_Base_SetConfig+0x48>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a49      	ldr	r2, [pc, #292]	; (80056fc <TIM_Base_SetConfig+0x148>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00f      	beq.n	80055fc <TIM_Base_SetConfig+0x48>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a48      	ldr	r2, [pc, #288]	; (8005700 <TIM_Base_SetConfig+0x14c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00b      	beq.n	80055fc <TIM_Base_SetConfig+0x48>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a47      	ldr	r2, [pc, #284]	; (8005704 <TIM_Base_SetConfig+0x150>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d007      	beq.n	80055fc <TIM_Base_SetConfig+0x48>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a46      	ldr	r2, [pc, #280]	; (8005708 <TIM_Base_SetConfig+0x154>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_Base_SetConfig+0x48>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a45      	ldr	r2, [pc, #276]	; (800570c <TIM_Base_SetConfig+0x158>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d108      	bne.n	800560e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a39      	ldr	r2, [pc, #228]	; (80056f8 <TIM_Base_SetConfig+0x144>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d023      	beq.n	800565e <TIM_Base_SetConfig+0xaa>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561c:	d01f      	beq.n	800565e <TIM_Base_SetConfig+0xaa>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a36      	ldr	r2, [pc, #216]	; (80056fc <TIM_Base_SetConfig+0x148>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01b      	beq.n	800565e <TIM_Base_SetConfig+0xaa>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a35      	ldr	r2, [pc, #212]	; (8005700 <TIM_Base_SetConfig+0x14c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d017      	beq.n	800565e <TIM_Base_SetConfig+0xaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a34      	ldr	r2, [pc, #208]	; (8005704 <TIM_Base_SetConfig+0x150>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <TIM_Base_SetConfig+0xaa>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a33      	ldr	r2, [pc, #204]	; (8005708 <TIM_Base_SetConfig+0x154>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00f      	beq.n	800565e <TIM_Base_SetConfig+0xaa>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a33      	ldr	r2, [pc, #204]	; (8005710 <TIM_Base_SetConfig+0x15c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_Base_SetConfig+0xaa>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a32      	ldr	r2, [pc, #200]	; (8005714 <TIM_Base_SetConfig+0x160>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <TIM_Base_SetConfig+0xaa>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a31      	ldr	r2, [pc, #196]	; (8005718 <TIM_Base_SetConfig+0x164>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_Base_SetConfig+0xaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2c      	ldr	r2, [pc, #176]	; (800570c <TIM_Base_SetConfig+0x158>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <TIM_Base_SetConfig+0x144>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <TIM_Base_SetConfig+0x110>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <TIM_Base_SetConfig+0x154>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00f      	beq.n	80056c4 <TIM_Base_SetConfig+0x110>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a1a      	ldr	r2, [pc, #104]	; (8005710 <TIM_Base_SetConfig+0x15c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <TIM_Base_SetConfig+0x110>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a19      	ldr	r2, [pc, #100]	; (8005714 <TIM_Base_SetConfig+0x160>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d007      	beq.n	80056c4 <TIM_Base_SetConfig+0x110>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a18      	ldr	r2, [pc, #96]	; (8005718 <TIM_Base_SetConfig+0x164>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_Base_SetConfig+0x110>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a13      	ldr	r2, [pc, #76]	; (800570c <TIM_Base_SetConfig+0x158>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d103      	bne.n	80056cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d105      	bne.n	80056ea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f023 0201 	bic.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	611a      	str	r2, [r3, #16]
  }
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40013400 	.word	0x40013400
 800570c:	40015000 	.word	0x40015000
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800

0800571c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f023 0201 	bic.w	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0302 	bic.w	r3, r3, #2
 8005768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a30      	ldr	r2, [pc, #192]	; (8005838 <TIM_OC1_SetConfig+0x11c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <TIM_OC1_SetConfig+0x88>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a2f      	ldr	r2, [pc, #188]	; (800583c <TIM_OC1_SetConfig+0x120>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00f      	beq.n	80057a4 <TIM_OC1_SetConfig+0x88>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a2e      	ldr	r2, [pc, #184]	; (8005840 <TIM_OC1_SetConfig+0x124>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00b      	beq.n	80057a4 <TIM_OC1_SetConfig+0x88>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a2d      	ldr	r2, [pc, #180]	; (8005844 <TIM_OC1_SetConfig+0x128>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <TIM_OC1_SetConfig+0x88>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a2c      	ldr	r2, [pc, #176]	; (8005848 <TIM_OC1_SetConfig+0x12c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC1_SetConfig+0x88>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a2b      	ldr	r2, [pc, #172]	; (800584c <TIM_OC1_SetConfig+0x130>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d10c      	bne.n	80057be <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0308 	bic.w	r3, r3, #8
 80057aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f023 0304 	bic.w	r3, r3, #4
 80057bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <TIM_OC1_SetConfig+0x11c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <TIM_OC1_SetConfig+0xd2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a1c      	ldr	r2, [pc, #112]	; (800583c <TIM_OC1_SetConfig+0x120>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00f      	beq.n	80057ee <TIM_OC1_SetConfig+0xd2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <TIM_OC1_SetConfig+0x124>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00b      	beq.n	80057ee <TIM_OC1_SetConfig+0xd2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <TIM_OC1_SetConfig+0x128>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <TIM_OC1_SetConfig+0xd2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a19      	ldr	r2, [pc, #100]	; (8005848 <TIM_OC1_SetConfig+0x12c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_OC1_SetConfig+0xd2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a18      	ldr	r2, [pc, #96]	; (800584c <TIM_OC1_SetConfig+0x130>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40013400 	.word	0x40013400
 8005840:	40014000 	.word	0x40014000
 8005844:	40014400 	.word	0x40014400
 8005848:	40014800 	.word	0x40014800
 800584c:	40015000 	.word	0x40015000

08005850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f023 0210 	bic.w	r2, r3, #16
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0320 	bic.w	r3, r3, #32
 800589e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a2c      	ldr	r2, [pc, #176]	; (8005960 <TIM_OC2_SetConfig+0x110>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d007      	beq.n	80058c4 <TIM_OC2_SetConfig+0x74>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a2b      	ldr	r2, [pc, #172]	; (8005964 <TIM_OC2_SetConfig+0x114>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <TIM_OC2_SetConfig+0x74>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a2a      	ldr	r2, [pc, #168]	; (8005968 <TIM_OC2_SetConfig+0x118>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d10d      	bne.n	80058e0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <TIM_OC2_SetConfig+0x110>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <TIM_OC2_SetConfig+0xc0>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <TIM_OC2_SetConfig+0x114>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00f      	beq.n	8005910 <TIM_OC2_SetConfig+0xc0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a1e      	ldr	r2, [pc, #120]	; (800596c <TIM_OC2_SetConfig+0x11c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_OC2_SetConfig+0xc0>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <TIM_OC2_SetConfig+0x120>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_OC2_SetConfig+0xc0>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <TIM_OC2_SetConfig+0x124>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC2_SetConfig+0xc0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a17      	ldr	r2, [pc, #92]	; (8005968 <TIM_OC2_SetConfig+0x118>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d113      	bne.n	8005938 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800591e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40013400 	.word	0x40013400
 8005968:	40015000 	.word	0x40015000
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2b      	ldr	r2, [pc, #172]	; (8005a84 <TIM_OC3_SetConfig+0x10c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_OC3_SetConfig+0x72>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <TIM_OC3_SetConfig+0x110>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_OC3_SetConfig+0x72>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a29      	ldr	r2, [pc, #164]	; (8005a8c <TIM_OC3_SetConfig+0x114>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d10d      	bne.n	8005a06 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <TIM_OC3_SetConfig+0x10c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d013      	beq.n	8005a36 <TIM_OC3_SetConfig+0xbe>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <TIM_OC3_SetConfig+0x110>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00f      	beq.n	8005a36 <TIM_OC3_SetConfig+0xbe>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <TIM_OC3_SetConfig+0x118>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00b      	beq.n	8005a36 <TIM_OC3_SetConfig+0xbe>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <TIM_OC3_SetConfig+0x11c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <TIM_OC3_SetConfig+0xbe>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <TIM_OC3_SetConfig+0x120>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_OC3_SetConfig+0xbe>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a16      	ldr	r2, [pc, #88]	; (8005a8c <TIM_OC3_SetConfig+0x114>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d113      	bne.n	8005a5e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400
 8005a8c:	40015000 	.word	0x40015000
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800

08005a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a2c      	ldr	r2, [pc, #176]	; (8005bac <TIM_OC4_SetConfig+0x110>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <TIM_OC4_SetConfig+0x74>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a2b      	ldr	r2, [pc, #172]	; (8005bb0 <TIM_OC4_SetConfig+0x114>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_OC4_SetConfig+0x74>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a2a      	ldr	r2, [pc, #168]	; (8005bb4 <TIM_OC4_SetConfig+0x118>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10d      	bne.n	8005b2c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a1f      	ldr	r2, [pc, #124]	; (8005bac <TIM_OC4_SetConfig+0x110>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <TIM_OC4_SetConfig+0xc0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <TIM_OC4_SetConfig+0x114>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00f      	beq.n	8005b5c <TIM_OC4_SetConfig+0xc0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <TIM_OC4_SetConfig+0x11c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00b      	beq.n	8005b5c <TIM_OC4_SetConfig+0xc0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <TIM_OC4_SetConfig+0x120>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d007      	beq.n	8005b5c <TIM_OC4_SetConfig+0xc0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <TIM_OC4_SetConfig+0x124>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC4_SetConfig+0xc0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <TIM_OC4_SetConfig+0x118>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d113      	bne.n	8005b84 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b62:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b6a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	019b      	lsls	r3, r3, #6
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	019b      	lsls	r3, r3, #6
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	40013400 	.word	0x40013400
 8005bb4:	40015000 	.word	0x40015000
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800

08005bc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	041b      	lsls	r3, r3, #16
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <TIM_OC5_SetConfig+0xbc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <TIM_OC5_SetConfig+0x82>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <TIM_OC5_SetConfig+0xc0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_OC5_SetConfig+0x82>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_OC5_SetConfig+0xc4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_OC5_SetConfig+0x82>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC5_SetConfig+0xc8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_OC5_SetConfig+0x82>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC5_SetConfig+0xcc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_OC5_SetConfig+0x82>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <TIM_OC5_SetConfig+0xd0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d109      	bne.n	8005c5a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	621a      	str	r2, [r3, #32]
}
 8005c74:	bf00      	nop
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40013400 	.word	0x40013400
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40014400 	.word	0x40014400
 8005c90:	40014800 	.word	0x40014800
 8005c94:	40015000 	.word	0x40015000

08005c98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	051b      	lsls	r3, r3, #20
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a1a      	ldr	r2, [pc, #104]	; (8005d58 <TIM_OC6_SetConfig+0xc0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <TIM_OC6_SetConfig+0x84>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a19      	ldr	r2, [pc, #100]	; (8005d5c <TIM_OC6_SetConfig+0xc4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00f      	beq.n	8005d1c <TIM_OC6_SetConfig+0x84>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <TIM_OC6_SetConfig+0xc8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00b      	beq.n	8005d1c <TIM_OC6_SetConfig+0x84>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <TIM_OC6_SetConfig+0xcc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <TIM_OC6_SetConfig+0x84>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <TIM_OC6_SetConfig+0xd0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_OC6_SetConfig+0x84>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <TIM_OC6_SetConfig+0xd4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d109      	bne.n	8005d30 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	029b      	lsls	r3, r3, #10
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40012c00 	.word	0x40012c00
 8005d5c:	40013400 	.word	0x40013400
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40014400 	.word	0x40014400
 8005d68:	40014800 	.word	0x40014800
 8005d6c:	40015000 	.word	0x40015000

08005d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f023 0201 	bic.w	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 030a 	bic.w	r3, r3, #10
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b087      	sub	sp, #28
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f023 0210 	bic.w	r2, r3, #16
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	031b      	lsls	r3, r3, #12
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f043 0307 	orr.w	r3, r3, #7
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	609a      	str	r2, [r3, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	021a      	lsls	r2, r3, #8
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	609a      	str	r2, [r3, #8]
}
 8005e9c:	bf00      	nop
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	2201      	movs	r2, #1
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a1a      	ldr	r2, [r3, #32]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	401a      	ands	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e074      	b.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a34      	ldr	r2, [pc, #208]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d009      	beq.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a33      	ldr	r2, [pc, #204]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d004      	beq.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a31      	ldr	r2, [pc, #196]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d108      	bne.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a21      	ldr	r2, [pc, #132]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d022      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d01d      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1f      	ldr	r2, [pc, #124]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d018      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1d      	ldr	r2, [pc, #116]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1c      	ldr	r2, [pc, #112]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00e      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a15      	ldr	r2, [pc, #84]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d009      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a18      	ldr	r2, [pc, #96]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d004      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a11      	ldr	r2, [pc, #68]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d10c      	bne.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40013400 	.word	0x40013400
 800600c:	40015000 	.word	0x40015000
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	40014000 	.word	0x40014000

08006020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e042      	b.n	8006144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fc faef 	bl	80026b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2224      	movs	r2, #36	; 0x24
 80060da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb90 	bl	800681c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f891 	bl	8006224 <UART_SetConfig>
 8006102:	4603      	mov	r3, r0
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e01b      	b.n	8006144 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800611a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800612a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fc0f 	bl	8006960 <UART_CheckIdleState>
 8006142:	4603      	mov	r3, r0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006160:	2b20      	cmp	r3, #32
 8006162:	d137      	bne.n	80061d4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_UART_Receive_DMA+0x24>
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e030      	b.n	80061d6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <HAL_UART_Receive_DMA+0x94>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d01f      	beq.n	80061c4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d018      	beq.n	80061c4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	613b      	str	r3, [r7, #16]
   return(result);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	69f9      	ldr	r1, [r7, #28]
 80061b6:	6a3a      	ldr	r2, [r7, #32]
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e6      	bne.n	8006192 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	461a      	mov	r2, r3
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 fce0 	bl	8006b90 <UART_Start_Receive_DMA>
 80061d0:	4603      	mov	r3, r0
 80061d2:	e000      	b.n	80061d6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
  }
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3728      	adds	r7, #40	; 0x28
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	40008000 	.word	0x40008000

080061e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006228:	b08c      	sub	sp, #48	; 0x30
 800622a:	af00      	add	r7, sp, #0
 800622c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	431a      	orrs	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	431a      	orrs	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	4313      	orrs	r3, r2
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4baa      	ldr	r3, [pc, #680]	; (80064fc <UART_SetConfig+0x2d8>)
 8006254:	4013      	ands	r3, r2
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800625c:	430b      	orrs	r3, r1
 800625e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a9f      	ldr	r2, [pc, #636]	; (8006500 <UART_SetConfig+0x2dc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628c:	4313      	orrs	r3, r2
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800629a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062a4:	430b      	orrs	r3, r1
 80062a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	f023 010f 	bic.w	r1, r3, #15
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a90      	ldr	r2, [pc, #576]	; (8006504 <UART_SetConfig+0x2e0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d125      	bne.n	8006314 <UART_SetConfig+0xf0>
 80062c8:	4b8f      	ldr	r3, [pc, #572]	; (8006508 <UART_SetConfig+0x2e4>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d81a      	bhi.n	800630c <UART_SetConfig+0xe8>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <UART_SetConfig+0xb8>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	080062ed 	.word	0x080062ed
 80062e0:	080062fd 	.word	0x080062fd
 80062e4:	080062f5 	.word	0x080062f5
 80062e8:	08006305 	.word	0x08006305
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062f2:	e116      	b.n	8006522 <UART_SetConfig+0x2fe>
 80062f4:	2302      	movs	r3, #2
 80062f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062fa:	e112      	b.n	8006522 <UART_SetConfig+0x2fe>
 80062fc:	2304      	movs	r3, #4
 80062fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006302:	e10e      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006304:	2308      	movs	r3, #8
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800630a:	e10a      	b.n	8006522 <UART_SetConfig+0x2fe>
 800630c:	2310      	movs	r3, #16
 800630e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006312:	e106      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a7c      	ldr	r2, [pc, #496]	; (800650c <UART_SetConfig+0x2e8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d138      	bne.n	8006390 <UART_SetConfig+0x16c>
 800631e:	4b7a      	ldr	r3, [pc, #488]	; (8006508 <UART_SetConfig+0x2e4>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	f003 030c 	and.w	r3, r3, #12
 8006328:	2b0c      	cmp	r3, #12
 800632a:	d82d      	bhi.n	8006388 <UART_SetConfig+0x164>
 800632c:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <UART_SetConfig+0x110>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	08006369 	.word	0x08006369
 8006338:	08006389 	.word	0x08006389
 800633c:	08006389 	.word	0x08006389
 8006340:	08006389 	.word	0x08006389
 8006344:	08006379 	.word	0x08006379
 8006348:	08006389 	.word	0x08006389
 800634c:	08006389 	.word	0x08006389
 8006350:	08006389 	.word	0x08006389
 8006354:	08006371 	.word	0x08006371
 8006358:	08006389 	.word	0x08006389
 800635c:	08006389 	.word	0x08006389
 8006360:	08006389 	.word	0x08006389
 8006364:	08006381 	.word	0x08006381
 8006368:	2300      	movs	r3, #0
 800636a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800636e:	e0d8      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006370:	2302      	movs	r3, #2
 8006372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006376:	e0d4      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006378:	2304      	movs	r3, #4
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800637e:	e0d0      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006380:	2308      	movs	r3, #8
 8006382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006386:	e0cc      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006388:	2310      	movs	r3, #16
 800638a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638e:	e0c8      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a5e      	ldr	r2, [pc, #376]	; (8006510 <UART_SetConfig+0x2ec>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d125      	bne.n	80063e6 <UART_SetConfig+0x1c2>
 800639a:	4b5b      	ldr	r3, [pc, #364]	; (8006508 <UART_SetConfig+0x2e4>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063a4:	2b30      	cmp	r3, #48	; 0x30
 80063a6:	d016      	beq.n	80063d6 <UART_SetConfig+0x1b2>
 80063a8:	2b30      	cmp	r3, #48	; 0x30
 80063aa:	d818      	bhi.n	80063de <UART_SetConfig+0x1ba>
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d00a      	beq.n	80063c6 <UART_SetConfig+0x1a2>
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d814      	bhi.n	80063de <UART_SetConfig+0x1ba>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <UART_SetConfig+0x19a>
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d008      	beq.n	80063ce <UART_SetConfig+0x1aa>
 80063bc:	e00f      	b.n	80063de <UART_SetConfig+0x1ba>
 80063be:	2300      	movs	r3, #0
 80063c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063c4:	e0ad      	b.n	8006522 <UART_SetConfig+0x2fe>
 80063c6:	2302      	movs	r3, #2
 80063c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063cc:	e0a9      	b.n	8006522 <UART_SetConfig+0x2fe>
 80063ce:	2304      	movs	r3, #4
 80063d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d4:	e0a5      	b.n	8006522 <UART_SetConfig+0x2fe>
 80063d6:	2308      	movs	r3, #8
 80063d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063dc:	e0a1      	b.n	8006522 <UART_SetConfig+0x2fe>
 80063de:	2310      	movs	r3, #16
 80063e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e4:	e09d      	b.n	8006522 <UART_SetConfig+0x2fe>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a4a      	ldr	r2, [pc, #296]	; (8006514 <UART_SetConfig+0x2f0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d125      	bne.n	800643c <UART_SetConfig+0x218>
 80063f0:	4b45      	ldr	r3, [pc, #276]	; (8006508 <UART_SetConfig+0x2e4>)
 80063f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063fa:	2bc0      	cmp	r3, #192	; 0xc0
 80063fc:	d016      	beq.n	800642c <UART_SetConfig+0x208>
 80063fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006400:	d818      	bhi.n	8006434 <UART_SetConfig+0x210>
 8006402:	2b80      	cmp	r3, #128	; 0x80
 8006404:	d00a      	beq.n	800641c <UART_SetConfig+0x1f8>
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d814      	bhi.n	8006434 <UART_SetConfig+0x210>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <UART_SetConfig+0x1f0>
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d008      	beq.n	8006424 <UART_SetConfig+0x200>
 8006412:	e00f      	b.n	8006434 <UART_SetConfig+0x210>
 8006414:	2300      	movs	r3, #0
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800641a:	e082      	b.n	8006522 <UART_SetConfig+0x2fe>
 800641c:	2302      	movs	r3, #2
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006422:	e07e      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006424:	2304      	movs	r3, #4
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642a:	e07a      	b.n	8006522 <UART_SetConfig+0x2fe>
 800642c:	2308      	movs	r3, #8
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e076      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006434:	2310      	movs	r3, #16
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800643a:	e072      	b.n	8006522 <UART_SetConfig+0x2fe>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a35      	ldr	r2, [pc, #212]	; (8006518 <UART_SetConfig+0x2f4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d12a      	bne.n	800649c <UART_SetConfig+0x278>
 8006446:	4b30      	ldr	r3, [pc, #192]	; (8006508 <UART_SetConfig+0x2e4>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006454:	d01a      	beq.n	800648c <UART_SetConfig+0x268>
 8006456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800645a:	d81b      	bhi.n	8006494 <UART_SetConfig+0x270>
 800645c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006460:	d00c      	beq.n	800647c <UART_SetConfig+0x258>
 8006462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006466:	d815      	bhi.n	8006494 <UART_SetConfig+0x270>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <UART_SetConfig+0x250>
 800646c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006470:	d008      	beq.n	8006484 <UART_SetConfig+0x260>
 8006472:	e00f      	b.n	8006494 <UART_SetConfig+0x270>
 8006474:	2300      	movs	r3, #0
 8006476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800647a:	e052      	b.n	8006522 <UART_SetConfig+0x2fe>
 800647c:	2302      	movs	r3, #2
 800647e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006482:	e04e      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006484:	2304      	movs	r3, #4
 8006486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800648a:	e04a      	b.n	8006522 <UART_SetConfig+0x2fe>
 800648c:	2308      	movs	r3, #8
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006492:	e046      	b.n	8006522 <UART_SetConfig+0x2fe>
 8006494:	2310      	movs	r3, #16
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649a:	e042      	b.n	8006522 <UART_SetConfig+0x2fe>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a17      	ldr	r2, [pc, #92]	; (8006500 <UART_SetConfig+0x2dc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d13a      	bne.n	800651c <UART_SetConfig+0x2f8>
 80064a6:	4b18      	ldr	r3, [pc, #96]	; (8006508 <UART_SetConfig+0x2e4>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064b4:	d01a      	beq.n	80064ec <UART_SetConfig+0x2c8>
 80064b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ba:	d81b      	bhi.n	80064f4 <UART_SetConfig+0x2d0>
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c0:	d00c      	beq.n	80064dc <UART_SetConfig+0x2b8>
 80064c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c6:	d815      	bhi.n	80064f4 <UART_SetConfig+0x2d0>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <UART_SetConfig+0x2b0>
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d0:	d008      	beq.n	80064e4 <UART_SetConfig+0x2c0>
 80064d2:	e00f      	b.n	80064f4 <UART_SetConfig+0x2d0>
 80064d4:	2300      	movs	r3, #0
 80064d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064da:	e022      	b.n	8006522 <UART_SetConfig+0x2fe>
 80064dc:	2302      	movs	r3, #2
 80064de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e2:	e01e      	b.n	8006522 <UART_SetConfig+0x2fe>
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ea:	e01a      	b.n	8006522 <UART_SetConfig+0x2fe>
 80064ec:	2308      	movs	r3, #8
 80064ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f2:	e016      	b.n	8006522 <UART_SetConfig+0x2fe>
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064fa:	e012      	b.n	8006522 <UART_SetConfig+0x2fe>
 80064fc:	cfff69f3 	.word	0xcfff69f3
 8006500:	40008000 	.word	0x40008000
 8006504:	40013800 	.word	0x40013800
 8006508:	40021000 	.word	0x40021000
 800650c:	40004400 	.word	0x40004400
 8006510:	40004800 	.word	0x40004800
 8006514:	40004c00 	.word	0x40004c00
 8006518:	40005000 	.word	0x40005000
 800651c:	2310      	movs	r3, #16
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4aae      	ldr	r2, [pc, #696]	; (80067e0 <UART_SetConfig+0x5bc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	f040 8097 	bne.w	800665c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800652e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006532:	2b08      	cmp	r3, #8
 8006534:	d823      	bhi.n	800657e <UART_SetConfig+0x35a>
 8006536:	a201      	add	r2, pc, #4	; (adr r2, 800653c <UART_SetConfig+0x318>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	08006561 	.word	0x08006561
 8006540:	0800657f 	.word	0x0800657f
 8006544:	08006569 	.word	0x08006569
 8006548:	0800657f 	.word	0x0800657f
 800654c:	0800656f 	.word	0x0800656f
 8006550:	0800657f 	.word	0x0800657f
 8006554:	0800657f 	.word	0x0800657f
 8006558:	0800657f 	.word	0x0800657f
 800655c:	08006577 	.word	0x08006577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006560:	f7fd fdde 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8006564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006566:	e010      	b.n	800658a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006568:	4b9e      	ldr	r3, [pc, #632]	; (80067e4 <UART_SetConfig+0x5c0>)
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800656c:	e00d      	b.n	800658a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800656e:	f7fd fd69 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006574:	e009      	b.n	800658a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800657c:	e005      	b.n	800658a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8130 	beq.w	80067f2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	4a94      	ldr	r2, [pc, #592]	; (80067e8 <UART_SetConfig+0x5c4>)
 8006598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800659c:	461a      	mov	r2, r3
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	4413      	add	r3, r2
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d305      	bcc.n	80065c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d903      	bls.n	80065ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065c8:	e113      	b.n	80067f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	2200      	movs	r2, #0
 80065ce:	60bb      	str	r3, [r7, #8]
 80065d0:	60fa      	str	r2, [r7, #12]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	4a84      	ldr	r2, [pc, #528]	; (80067e8 <UART_SetConfig+0x5c4>)
 80065d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2200      	movs	r2, #0
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065ec:	f7fa fb18 	bl	8000c20 <__aeabi_uldivmod>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4610      	mov	r0, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	020b      	lsls	r3, r1, #8
 8006602:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006606:	0202      	lsls	r2, r0, #8
 8006608:	6979      	ldr	r1, [r7, #20]
 800660a:	6849      	ldr	r1, [r1, #4]
 800660c:	0849      	lsrs	r1, r1, #1
 800660e:	2000      	movs	r0, #0
 8006610:	460c      	mov	r4, r1
 8006612:	4605      	mov	r5, r0
 8006614:	eb12 0804 	adds.w	r8, r2, r4
 8006618:	eb43 0905 	adc.w	r9, r3, r5
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	469a      	mov	sl, r3
 8006624:	4693      	mov	fp, r2
 8006626:	4652      	mov	r2, sl
 8006628:	465b      	mov	r3, fp
 800662a:	4640      	mov	r0, r8
 800662c:	4649      	mov	r1, r9
 800662e:	f7fa faf7 	bl	8000c20 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4613      	mov	r3, r2
 8006638:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006640:	d308      	bcc.n	8006654 <UART_SetConfig+0x430>
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006648:	d204      	bcs.n	8006654 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6a3a      	ldr	r2, [r7, #32]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	e0ce      	b.n	80067f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800665a:	e0ca      	b.n	80067f2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006664:	d166      	bne.n	8006734 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800666a:	2b08      	cmp	r3, #8
 800666c:	d827      	bhi.n	80066be <UART_SetConfig+0x49a>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <UART_SetConfig+0x450>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	08006699 	.word	0x08006699
 8006678:	080066a1 	.word	0x080066a1
 800667c:	080066a9 	.word	0x080066a9
 8006680:	080066bf 	.word	0x080066bf
 8006684:	080066af 	.word	0x080066af
 8006688:	080066bf 	.word	0x080066bf
 800668c:	080066bf 	.word	0x080066bf
 8006690:	080066bf 	.word	0x080066bf
 8006694:	080066b7 	.word	0x080066b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006698:	f7fd fd42 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 800669c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800669e:	e014      	b.n	80066ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a0:	f7fd fd54 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 80066a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066a6:	e010      	b.n	80066ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a8:	4b4e      	ldr	r3, [pc, #312]	; (80067e4 <UART_SetConfig+0x5c0>)
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066ac:	e00d      	b.n	80066ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ae:	f7fd fcc9 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 80066b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066b4:	e009      	b.n	80066ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066bc:	e005      	b.n	80066ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8090 	beq.w	80067f2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	4a44      	ldr	r2, [pc, #272]	; (80067e8 <UART_SetConfig+0x5c4>)
 80066d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066dc:	461a      	mov	r2, r3
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066e4:	005a      	lsls	r2, r3, #1
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	441a      	add	r2, r3
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	2b0f      	cmp	r3, #15
 80066fc:	d916      	bls.n	800672c <UART_SetConfig+0x508>
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006704:	d212      	bcs.n	800672c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f023 030f 	bic.w	r3, r3, #15
 800670e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	b29a      	uxth	r2, r3
 800671c:	8bfb      	ldrh	r3, [r7, #30]
 800671e:	4313      	orrs	r3, r2
 8006720:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	8bfa      	ldrh	r2, [r7, #30]
 8006728:	60da      	str	r2, [r3, #12]
 800672a:	e062      	b.n	80067f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006732:	e05e      	b.n	80067f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006738:	2b08      	cmp	r3, #8
 800673a:	d828      	bhi.n	800678e <UART_SetConfig+0x56a>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0x520>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006769 	.word	0x08006769
 8006748:	08006771 	.word	0x08006771
 800674c:	08006779 	.word	0x08006779
 8006750:	0800678f 	.word	0x0800678f
 8006754:	0800677f 	.word	0x0800677f
 8006758:	0800678f 	.word	0x0800678f
 800675c:	0800678f 	.word	0x0800678f
 8006760:	0800678f 	.word	0x0800678f
 8006764:	08006787 	.word	0x08006787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006768:	f7fd fcda 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 800676c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800676e:	e014      	b.n	800679a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006770:	f7fd fcec 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 8006774:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006776:	e010      	b.n	800679a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006778:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <UART_SetConfig+0x5c0>)
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800677c:	e00d      	b.n	800679a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677e:	f7fd fc61 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8006782:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006784:	e009      	b.n	800679a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800678c:	e005      	b.n	800679a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006798:	bf00      	nop
    }

    if (pclk != 0U)
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d028      	beq.n	80067f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	4a10      	ldr	r2, [pc, #64]	; (80067e8 <UART_SetConfig+0x5c4>)
 80067a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	441a      	add	r2, r3
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d910      	bls.n	80067ec <UART_SetConfig+0x5c8>
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d0:	d20c      	bcs.n	80067ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60da      	str	r2, [r3, #12]
 80067dc:	e009      	b.n	80067f2 <UART_SetConfig+0x5ce>
 80067de:	bf00      	nop
 80067e0:	40008000 	.word	0x40008000
 80067e4:	00f42400 	.word	0x00f42400
 80067e8:	080074bc 	.word	0x080074bc
      }
      else
      {
        ret = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2200      	movs	r2, #0
 8006806:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2200      	movs	r2, #0
 800680c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800680e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006812:	4618      	mov	r0, r3
 8006814:	3730      	adds	r7, #48	; 0x30
 8006816:	46bd      	mov	sp, r7
 8006818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800681c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01a      	beq.n	8006932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800691a:	d10a      	bne.n	8006932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
  }
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b098      	sub	sp, #96	; 0x60
 8006964:	af02      	add	r7, sp, #8
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006970:	f7fc f902 	bl	8002b78 <HAL_GetTick>
 8006974:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b08      	cmp	r3, #8
 8006982:	d12f      	bne.n	80069e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800698c:	2200      	movs	r2, #0
 800698e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f88e 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d022      	beq.n	80069e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b2:	653b      	str	r3, [r7, #80]	; 0x50
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069bc:	647b      	str	r3, [r7, #68]	; 0x44
 80069be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e063      	b.n	8006aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d149      	bne.n	8006a86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069fa:	2200      	movs	r2, #0
 80069fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f857 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d03c      	beq.n	8006a86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e6      	bne.n	8006a0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3308      	adds	r3, #8
 8006a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5e:	61fa      	str	r2, [r7, #28]
 8006a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	69b9      	ldr	r1, [r7, #24]
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e5      	bne.n	8006a3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e012      	b.n	8006aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3758      	adds	r7, #88	; 0x58
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac4:	e04f      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d04b      	beq.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ace:	f7fc f853 	bl	8002b78 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d302      	bcc.n	8006ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e04e      	b.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d037      	beq.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b80      	cmp	r3, #128	; 0x80
 8006afa:	d034      	beq.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d031      	beq.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d110      	bne.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2208      	movs	r2, #8
 8006b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f920 	bl	8006d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2208      	movs	r2, #8
 8006b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e029      	b.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b40:	d111      	bne.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f906 	bl	8006d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e00f      	b.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69da      	ldr	r2, [r3, #28]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	bf0c      	ite	eq
 8006b76:	2301      	moveq	r3, #1
 8006b78:	2300      	movne	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d0a0      	beq.n	8006ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b096      	sub	sp, #88	; 0x58
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	88fa      	ldrh	r2, [r7, #6]
 8006ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2222      	movs	r2, #34	; 0x22
 8006bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02d      	beq.n	8006c22 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bcc:	4a40      	ldr	r2, [pc, #256]	; (8006cd0 <UART_Start_Receive_DMA+0x140>)
 8006bce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd6:	4a3f      	ldr	r2, [pc, #252]	; (8006cd4 <UART_Start_Receive_DMA+0x144>)
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be0:	4a3d      	ldr	r2, [pc, #244]	; (8006cd8 <UART_Start_Receive_DMA+0x148>)
 8006be2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bea:	2200      	movs	r2, #0
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3324      	adds	r3, #36	; 0x24
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c00:	461a      	mov	r2, r3
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	f7fc f97c 	bl	8002f00 <HAL_DMA_Start_IT>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2210      	movs	r2, #16
 8006c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e051      	b.n	8006cc6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d018      	beq.n	8006c5c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c4a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c50:	e841 2300 	strex	r3, r2, [r1]
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e6      	bne.n	8006c2a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3308      	adds	r3, #8
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	653b      	str	r3, [r7, #80]	; 0x50
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3308      	adds	r3, #8
 8006c7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c7c:	637a      	str	r2, [r7, #52]	; 0x34
 8006c7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e5      	bne.n	8006c5c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3308      	adds	r3, #8
 8006cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cb0:	623a      	str	r2, [r7, #32]
 8006cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	69f9      	ldr	r1, [r7, #28]
 8006cb6:	6a3a      	ldr	r2, [r7, #32]
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3758      	adds	r7, #88	; 0x58
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	08006e2b 	.word	0x08006e2b
 8006cd4:	08006f57 	.word	0x08006f57
 8006cd8:	08006f95 	.word	0x08006f95

08006cdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b08f      	sub	sp, #60	; 0x3c
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d04:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e6      	bne.n	8006ce4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d36:	61ba      	str	r2, [r7, #24]
 8006d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6979      	ldr	r1, [r7, #20]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	613b      	str	r3, [r7, #16]
   return(result);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e5      	bne.n	8006d16 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006d52:	bf00      	nop
 8006d54:	373c      	adds	r7, #60	; 0x3c
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b095      	sub	sp, #84	; 0x54
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d84:	643b      	str	r3, [r7, #64]	; 0x40
 8006d86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e6      	bne.n	8006d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3308      	adds	r3, #8
 8006dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e3      	bne.n	8006d98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d118      	bne.n	8006e0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 0310 	bic.w	r3, r3, #16
 8006dec:	647b      	str	r3, [r7, #68]	; 0x44
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df6:	61bb      	str	r3, [r7, #24]
 8006df8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6979      	ldr	r1, [r7, #20]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	613b      	str	r3, [r7, #16]
   return(result);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e6      	bne.n	8006dd8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006e1e:	bf00      	nop
 8006e20:	3754      	adds	r7, #84	; 0x54
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b09c      	sub	sp, #112	; 0x70
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d171      	bne.n	8006f2a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e6      	bne.n	8006e4e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	f023 0301 	bic.w	r3, r3, #1
 8006e96:	667b      	str	r3, [r7, #100]	; 0x64
 8006e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ea0:	647a      	str	r2, [r7, #68]	; 0x44
 8006ea2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e5      	bne.n	8006e80 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eca:	663b      	str	r3, [r7, #96]	; 0x60
 8006ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ed4:	633a      	str	r2, [r7, #48]	; 0x30
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e5      	bne.n	8006eb4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eea:	2220      	movs	r2, #32
 8006eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d118      	bne.n	8006f2a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f023 0310 	bic.w	r3, r3, #16
 8006f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	69b9      	ldr	r1, [r7, #24]
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	617b      	str	r3, [r7, #20]
   return(result);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e6      	bne.n	8006ef8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d107      	bne.n	8006f48 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f42:	f7ff f963 	bl	800620c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f46:	e002      	b.n	8006f4e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f4a:	f7fa fb73 	bl	8001634 <HAL_UART_RxCpltCallback>
}
 8006f4e:	bf00      	nop
 8006f50:	3770      	adds	r7, #112	; 0x70
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d109      	bne.n	8006f86 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f78:	085b      	lsrs	r3, r3, #1
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff f944 	bl	800620c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f84:	e002      	b.n	8006f8c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff f92c 	bl	80061e4 <HAL_UART_RxHalfCpltCallback>
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbc:	2b80      	cmp	r3, #128	; 0x80
 8006fbe:	d109      	bne.n	8006fd4 <UART_DMAError+0x40>
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	2b21      	cmp	r3, #33	; 0x21
 8006fc4:	d106      	bne.n	8006fd4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006fce:	6978      	ldr	r0, [r7, #20]
 8006fd0:	f7ff fe84 	bl	8006cdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d109      	bne.n	8006ff6 <UART_DMAError+0x62>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b22      	cmp	r3, #34	; 0x22
 8006fe6:	d106      	bne.n	8006ff6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006ff0:	6978      	ldr	r0, [r7, #20]
 8006ff2:	f7ff feb4 	bl	8006d5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffc:	f043 0210 	orr.w	r2, r3, #16
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007006:	6978      	ldr	r0, [r7, #20]
 8007008:	f7ff f8f6 	bl	80061f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800700c:	bf00      	nop
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_UARTEx_DisableFifoMode+0x16>
 8007026:	2302      	movs	r3, #2
 8007028:	e027      	b.n	800707a <HAL_UARTEx_DisableFifoMode+0x66>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2224      	movs	r2, #36	; 0x24
 8007036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007058:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800709a:	2302      	movs	r3, #2
 800709c:	e02d      	b.n	80070fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2224      	movs	r2, #36	; 0x24
 80070aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0201 	bic.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f850 	bl	8007180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007116:	2302      	movs	r3, #2
 8007118:	e02d      	b.n	8007176 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2224      	movs	r2, #36	; 0x24
 8007126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0201 	bic.w	r2, r2, #1
 8007140:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f812 	bl	8007180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800718c:	2b00      	cmp	r3, #0
 800718e:	d108      	bne.n	80071a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071a0:	e031      	b.n	8007206 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071a2:	2308      	movs	r3, #8
 80071a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071a6:	2308      	movs	r3, #8
 80071a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	0e5b      	lsrs	r3, r3, #25
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	0f5b      	lsrs	r3, r3, #29
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	7b3a      	ldrb	r2, [r7, #12]
 80071ce:	4911      	ldr	r1, [pc, #68]	; (8007214 <UARTEx_SetNbDataToProcess+0x94>)
 80071d0:	5c8a      	ldrb	r2, [r1, r2]
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071d6:	7b3a      	ldrb	r2, [r7, #12]
 80071d8:	490f      	ldr	r1, [pc, #60]	; (8007218 <UARTEx_SetNbDataToProcess+0x98>)
 80071da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	7b7a      	ldrb	r2, [r7, #13]
 80071ec:	4909      	ldr	r1, [pc, #36]	; (8007214 <UARTEx_SetNbDataToProcess+0x94>)
 80071ee:	5c8a      	ldrb	r2, [r1, r2]
 80071f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071f4:	7b7a      	ldrb	r2, [r7, #13]
 80071f6:	4908      	ldr	r1, [pc, #32]	; (8007218 <UARTEx_SetNbDataToProcess+0x98>)
 80071f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80071fe:	b29a      	uxth	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	080074d4 	.word	0x080074d4
 8007218:	080074dc 	.word	0x080074dc

0800721c <memset>:
 800721c:	4402      	add	r2, r0
 800721e:	4603      	mov	r3, r0
 8007220:	4293      	cmp	r3, r2
 8007222:	d100      	bne.n	8007226 <memset+0xa>
 8007224:	4770      	bx	lr
 8007226:	f803 1b01 	strb.w	r1, [r3], #1
 800722a:	e7f9      	b.n	8007220 <memset+0x4>

0800722c <__errno>:
 800722c:	4b01      	ldr	r3, [pc, #4]	; (8007234 <__errno+0x8>)
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	2000006c 	.word	0x2000006c

08007238 <__libc_init_array>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	4d0d      	ldr	r5, [pc, #52]	; (8007270 <__libc_init_array+0x38>)
 800723c:	4c0d      	ldr	r4, [pc, #52]	; (8007274 <__libc_init_array+0x3c>)
 800723e:	1b64      	subs	r4, r4, r5
 8007240:	10a4      	asrs	r4, r4, #2
 8007242:	2600      	movs	r6, #0
 8007244:	42a6      	cmp	r6, r4
 8007246:	d109      	bne.n	800725c <__libc_init_array+0x24>
 8007248:	4d0b      	ldr	r5, [pc, #44]	; (8007278 <__libc_init_array+0x40>)
 800724a:	4c0c      	ldr	r4, [pc, #48]	; (800727c <__libc_init_array+0x44>)
 800724c:	f000 f91e 	bl	800748c <_init>
 8007250:	1b64      	subs	r4, r4, r5
 8007252:	10a4      	asrs	r4, r4, #2
 8007254:	2600      	movs	r6, #0
 8007256:	42a6      	cmp	r6, r4
 8007258:	d105      	bne.n	8007266 <__libc_init_array+0x2e>
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007260:	4798      	blx	r3
 8007262:	3601      	adds	r6, #1
 8007264:	e7ee      	b.n	8007244 <__libc_init_array+0xc>
 8007266:	f855 3b04 	ldr.w	r3, [r5], #4
 800726a:	4798      	blx	r3
 800726c:	3601      	adds	r6, #1
 800726e:	e7f2      	b.n	8007256 <__libc_init_array+0x1e>
 8007270:	080074ec 	.word	0x080074ec
 8007274:	080074ec 	.word	0x080074ec
 8007278:	080074ec 	.word	0x080074ec
 800727c:	080074f0 	.word	0x080074f0

08007280 <sqrt>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	ed2d 8b02 	vpush	{d8}
 8007286:	ec55 4b10 	vmov	r4, r5, d0
 800728a:	f000 f825 	bl	80072d8 <__ieee754_sqrt>
 800728e:	4622      	mov	r2, r4
 8007290:	462b      	mov	r3, r5
 8007292:	4620      	mov	r0, r4
 8007294:	4629      	mov	r1, r5
 8007296:	eeb0 8a40 	vmov.f32	s16, s0
 800729a:	eef0 8a60 	vmov.f32	s17, s1
 800729e:	f7f9 fc11 	bl	8000ac4 <__aeabi_dcmpun>
 80072a2:	b990      	cbnz	r0, 80072ca <sqrt+0x4a>
 80072a4:	2200      	movs	r2, #0
 80072a6:	2300      	movs	r3, #0
 80072a8:	4620      	mov	r0, r4
 80072aa:	4629      	mov	r1, r5
 80072ac:	f7f9 fbe2 	bl	8000a74 <__aeabi_dcmplt>
 80072b0:	b158      	cbz	r0, 80072ca <sqrt+0x4a>
 80072b2:	f7ff ffbb 	bl	800722c <__errno>
 80072b6:	2321      	movs	r3, #33	; 0x21
 80072b8:	6003      	str	r3, [r0, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	2300      	movs	r3, #0
 80072be:	4610      	mov	r0, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	f7f9 fa8f 	bl	80007e4 <__aeabi_ddiv>
 80072c6:	ec41 0b18 	vmov	d8, r0, r1
 80072ca:	eeb0 0a48 	vmov.f32	s0, s16
 80072ce:	eef0 0a68 	vmov.f32	s1, s17
 80072d2:	ecbd 8b02 	vpop	{d8}
 80072d6:	bd38      	pop	{r3, r4, r5, pc}

080072d8 <__ieee754_sqrt>:
 80072d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	ec55 4b10 	vmov	r4, r5, d0
 80072e0:	4e67      	ldr	r6, [pc, #412]	; (8007480 <__ieee754_sqrt+0x1a8>)
 80072e2:	43ae      	bics	r6, r5
 80072e4:	ee10 0a10 	vmov	r0, s0
 80072e8:	ee10 2a10 	vmov	r2, s0
 80072ec:	4629      	mov	r1, r5
 80072ee:	462b      	mov	r3, r5
 80072f0:	d10d      	bne.n	800730e <__ieee754_sqrt+0x36>
 80072f2:	f7f9 f94d 	bl	8000590 <__aeabi_dmul>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4620      	mov	r0, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	f7f8 ff91 	bl	8000224 <__adddf3>
 8007302:	4604      	mov	r4, r0
 8007304:	460d      	mov	r5, r1
 8007306:	ec45 4b10 	vmov	d0, r4, r5
 800730a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730e:	2d00      	cmp	r5, #0
 8007310:	dc0b      	bgt.n	800732a <__ieee754_sqrt+0x52>
 8007312:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007316:	4326      	orrs	r6, r4
 8007318:	d0f5      	beq.n	8007306 <__ieee754_sqrt+0x2e>
 800731a:	b135      	cbz	r5, 800732a <__ieee754_sqrt+0x52>
 800731c:	f7f8 ff80 	bl	8000220 <__aeabi_dsub>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	f7f9 fa5e 	bl	80007e4 <__aeabi_ddiv>
 8007328:	e7eb      	b.n	8007302 <__ieee754_sqrt+0x2a>
 800732a:	1509      	asrs	r1, r1, #20
 800732c:	f000 808d 	beq.w	800744a <__ieee754_sqrt+0x172>
 8007330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007334:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800733c:	07c9      	lsls	r1, r1, #31
 800733e:	bf5c      	itt	pl
 8007340:	005b      	lslpl	r3, r3, #1
 8007342:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007346:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800734a:	bf58      	it	pl
 800734c:	0052      	lslpl	r2, r2, #1
 800734e:	2500      	movs	r5, #0
 8007350:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007354:	1076      	asrs	r6, r6, #1
 8007356:	0052      	lsls	r2, r2, #1
 8007358:	f04f 0e16 	mov.w	lr, #22
 800735c:	46ac      	mov	ip, r5
 800735e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007362:	eb0c 0001 	add.w	r0, ip, r1
 8007366:	4298      	cmp	r0, r3
 8007368:	bfde      	ittt	le
 800736a:	1a1b      	suble	r3, r3, r0
 800736c:	eb00 0c01 	addle.w	ip, r0, r1
 8007370:	186d      	addle	r5, r5, r1
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	f1be 0e01 	subs.w	lr, lr, #1
 8007378:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800737c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007380:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007384:	d1ed      	bne.n	8007362 <__ieee754_sqrt+0x8a>
 8007386:	4674      	mov	r4, lr
 8007388:	2720      	movs	r7, #32
 800738a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800738e:	4563      	cmp	r3, ip
 8007390:	eb01 000e 	add.w	r0, r1, lr
 8007394:	dc02      	bgt.n	800739c <__ieee754_sqrt+0xc4>
 8007396:	d113      	bne.n	80073c0 <__ieee754_sqrt+0xe8>
 8007398:	4290      	cmp	r0, r2
 800739a:	d811      	bhi.n	80073c0 <__ieee754_sqrt+0xe8>
 800739c:	2800      	cmp	r0, #0
 800739e:	eb00 0e01 	add.w	lr, r0, r1
 80073a2:	da57      	bge.n	8007454 <__ieee754_sqrt+0x17c>
 80073a4:	f1be 0f00 	cmp.w	lr, #0
 80073a8:	db54      	blt.n	8007454 <__ieee754_sqrt+0x17c>
 80073aa:	f10c 0801 	add.w	r8, ip, #1
 80073ae:	eba3 030c 	sub.w	r3, r3, ip
 80073b2:	4290      	cmp	r0, r2
 80073b4:	bf88      	it	hi
 80073b6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80073ba:	1a12      	subs	r2, r2, r0
 80073bc:	440c      	add	r4, r1
 80073be:	46c4      	mov	ip, r8
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	3f01      	subs	r7, #1
 80073c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80073c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80073cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80073d0:	d1dd      	bne.n	800738e <__ieee754_sqrt+0xb6>
 80073d2:	4313      	orrs	r3, r2
 80073d4:	d01b      	beq.n	800740e <__ieee754_sqrt+0x136>
 80073d6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007484 <__ieee754_sqrt+0x1ac>
 80073da:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007488 <__ieee754_sqrt+0x1b0>
 80073de:	e9da 0100 	ldrd	r0, r1, [sl]
 80073e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80073e6:	f7f8 ff1b 	bl	8000220 <__aeabi_dsub>
 80073ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4640      	mov	r0, r8
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f9 fb47 	bl	8000a88 <__aeabi_dcmple>
 80073fa:	b140      	cbz	r0, 800740e <__ieee754_sqrt+0x136>
 80073fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007400:	e9da 0100 	ldrd	r0, r1, [sl]
 8007404:	e9db 2300 	ldrd	r2, r3, [fp]
 8007408:	d126      	bne.n	8007458 <__ieee754_sqrt+0x180>
 800740a:	3501      	adds	r5, #1
 800740c:	463c      	mov	r4, r7
 800740e:	106a      	asrs	r2, r5, #1
 8007410:	0863      	lsrs	r3, r4, #1
 8007412:	07e9      	lsls	r1, r5, #31
 8007414:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007418:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800741c:	bf48      	it	mi
 800741e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007422:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007426:	461c      	mov	r4, r3
 8007428:	e76d      	b.n	8007306 <__ieee754_sqrt+0x2e>
 800742a:	0ad3      	lsrs	r3, r2, #11
 800742c:	3815      	subs	r0, #21
 800742e:	0552      	lsls	r2, r2, #21
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0fa      	beq.n	800742a <__ieee754_sqrt+0x152>
 8007434:	02dc      	lsls	r4, r3, #11
 8007436:	d50a      	bpl.n	800744e <__ieee754_sqrt+0x176>
 8007438:	f1c1 0420 	rsb	r4, r1, #32
 800743c:	fa22 f404 	lsr.w	r4, r2, r4
 8007440:	1e4d      	subs	r5, r1, #1
 8007442:	408a      	lsls	r2, r1
 8007444:	4323      	orrs	r3, r4
 8007446:	1b41      	subs	r1, r0, r5
 8007448:	e772      	b.n	8007330 <__ieee754_sqrt+0x58>
 800744a:	4608      	mov	r0, r1
 800744c:	e7f0      	b.n	8007430 <__ieee754_sqrt+0x158>
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	3101      	adds	r1, #1
 8007452:	e7ef      	b.n	8007434 <__ieee754_sqrt+0x15c>
 8007454:	46e0      	mov	r8, ip
 8007456:	e7aa      	b.n	80073ae <__ieee754_sqrt+0xd6>
 8007458:	f7f8 fee4 	bl	8000224 <__adddf3>
 800745c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4640      	mov	r0, r8
 8007466:	4649      	mov	r1, r9
 8007468:	f7f9 fb04 	bl	8000a74 <__aeabi_dcmplt>
 800746c:	b120      	cbz	r0, 8007478 <__ieee754_sqrt+0x1a0>
 800746e:	1ca0      	adds	r0, r4, #2
 8007470:	bf08      	it	eq
 8007472:	3501      	addeq	r5, #1
 8007474:	3402      	adds	r4, #2
 8007476:	e7ca      	b.n	800740e <__ieee754_sqrt+0x136>
 8007478:	3401      	adds	r4, #1
 800747a:	f024 0401 	bic.w	r4, r4, #1
 800747e:	e7c6      	b.n	800740e <__ieee754_sqrt+0x136>
 8007480:	7ff00000 	.word	0x7ff00000
 8007484:	20000070 	.word	0x20000070
 8007488:	20000078 	.word	0x20000078

0800748c <_init>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	bf00      	nop
 8007490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007492:	bc08      	pop	{r3}
 8007494:	469e      	mov	lr, r3
 8007496:	4770      	bx	lr

08007498 <_fini>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	bf00      	nop
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr
