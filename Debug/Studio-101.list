
Studio-101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800aaa0  0800aaa0  0000baa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab10  0800ab10  0000c2b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab10  0800ab10  0000bb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab18  0800ab18  0000c2b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab18  0800ab18  0000bb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab1c  0800ab1c  0000bb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0800ab20  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb4  200002b0  0800add0  0000c2b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001264  0800add0  0000d264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c2b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ab4  00000000  00000000  0000c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bcb  00000000  00000000  00022d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00025960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7c  00000000  00000000  00026b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027089  00000000  00000000  00027a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001620e  00000000  00000000  0004ea95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fefc0  00000000  00000000  00064ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163c63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005438  00000000  00000000  00163ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001690e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002b0 	.word	0x200002b0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aa88 	.word	0x0800aa88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002b4 	.word	0x200002b4
 8000214:	0800aa88 	.word	0x0800aa88

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96a 	b.w	8000f0c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	460c      	mov	r4, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14e      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	458c      	cmp	ip, r1
 8000c60:	4686      	mov	lr, r0
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	d962      	bls.n	8000d2e <__udivmoddi4+0xde>
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0320 	rsb	r3, r2, #32
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f f68c 	uxth.w	r6, ip
 8000c86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb04 f106 	mul.w	r1, r4, r6
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ca6:	f080 8112 	bcs.w	8000ece <__udivmoddi4+0x27e>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 810f 	bls.w	8000ece <__udivmoddi4+0x27e>
 8000cb0:	3c02      	subs	r4, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	fa1f f38e 	uxth.w	r3, lr
 8000cba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f606 	mul.w	r6, r0, r6
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x94>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd6:	f080 80fc 	bcs.w	8000ed2 <__udivmoddi4+0x282>
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f240 80f9 	bls.w	8000ed2 <__udivmoddi4+0x282>
 8000ce0:	4463      	add	r3, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11d      	cbz	r5, 8000cf6 <__udivmoddi4+0xa6>
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d905      	bls.n	8000d0a <__udivmoddi4+0xba>
 8000cfe:	b10d      	cbz	r5, 8000d04 <__udivmoddi4+0xb4>
 8000d00:	e9c5 0100 	strd	r0, r1, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4608      	mov	r0, r1
 8000d08:	e7f5      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d0a:	fab3 f183 	clz	r1, r3
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d146      	bne.n	8000da0 <__udivmoddi4+0x150>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xcc>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f0c0 80f0 	bcc.w	8000efc <__udivmoddi4+0x2ac>
 8000d1c:	1a86      	subs	r6, r0, r2
 8000d1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d0e6      	beq.n	8000cf6 <__udivmoddi4+0xa6>
 8000d28:	e9c5 6300 	strd	r6, r3, [r5]
 8000d2c:	e7e3      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	f040 8090 	bne.w	8000e54 <__udivmoddi4+0x204>
 8000d34:	eba1 040c 	sub.w	r4, r1, ip
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb07 f006 	mul.w	r0, r7, r6
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x11c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x11a>
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	1a1c      	subs	r4, r3, r0
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d76:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	429f      	cmp	r7, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x148>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x146>
 8000d90:	429f      	cmp	r7, r3
 8000d92:	f200 80b0 	bhi.w	8000ef6 <__udivmoddi4+0x2a6>
 8000d96:	4620      	mov	r0, r4
 8000d98:	1bdb      	subs	r3, r3, r7
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0x9c>
 8000da0:	f1c1 0620 	rsb	r6, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	431f      	orrs	r7, r3
 8000dac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db0:	fa04 f301 	lsl.w	r3, r4, r1
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	0c38      	lsrs	r0, r7, #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x1a6>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	f080 8084 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000dea:	45a1      	cmp	r9, r4
 8000dec:	f240 8081 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000df0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	eba4 0409 	sub.w	r4, r4, r9
 8000dfa:	fa1f f983 	uxth.w	r9, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x1d2>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e18:	d267      	bcs.n	8000eea <__udivmoddi4+0x29a>
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d965      	bls.n	8000eea <__udivmoddi4+0x29a>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e26:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	46ce      	mov	lr, r9
 8000e32:	469c      	mov	ip, r3
 8000e34:	d351      	bcc.n	8000eda <__udivmoddi4+0x28a>
 8000e36:	d04e      	beq.n	8000ed6 <__udivmoddi4+0x286>
 8000e38:	b155      	cbz	r5, 8000e50 <__udivmoddi4+0x200>
 8000e3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e42:	fa04 f606 	lsl.w	r6, r4, r6
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e750      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000e54:	f1c2 0320 	rsb	r3, r2, #32
 8000e58:	fa20 f103 	lsr.w	r1, r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa24 f303 	lsr.w	r3, r4, r3
 8000e64:	4094      	lsls	r4, r2
 8000e66:	430c      	orrs	r4, r1
 8000e68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3110 	mls	r1, r8, r0, r3
 8000e7c:	0c23      	lsrs	r3, r4, #16
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb00 f107 	mul.w	r1, r0, r7
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x24c>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e92:	d22c      	bcs.n	8000eee <__udivmoddi4+0x29e>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d92a      	bls.n	8000eee <__udivmoddi4+0x29e>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eac:	fb01 f307 	mul.w	r3, r1, r7
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x276>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ebc:	d213      	bcs.n	8000ee6 <__udivmoddi4+0x296>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d911      	bls.n	8000ee6 <__udivmoddi4+0x296>
 8000ec2:	3902      	subs	r1, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ecc:	e739      	b.n	8000d42 <__udivmoddi4+0xf2>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	e6f0      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e706      	b.n	8000ce4 <__udivmoddi4+0x94>
 8000ed6:	45c8      	cmp	r8, r9
 8000ed8:	d2ae      	bcs.n	8000e38 <__udivmoddi4+0x1e8>
 8000eda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ede:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee2:	3801      	subs	r0, #1
 8000ee4:	e7a8      	b.n	8000e38 <__udivmoddi4+0x1e8>
 8000ee6:	4631      	mov	r1, r6
 8000ee8:	e7ed      	b.n	8000ec6 <__udivmoddi4+0x276>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e799      	b.n	8000e22 <__udivmoddi4+0x1d2>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e7d4      	b.n	8000e9c <__udivmoddi4+0x24c>
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1a6>
 8000ef6:	4463      	add	r3, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e74d      	b.n	8000d98 <__udivmoddi4+0x148>
 8000efc:	4606      	mov	r6, r0
 8000efe:	4623      	mov	r3, r4
 8000f00:	4608      	mov	r0, r1
 8000f02:	e70f      	b.n	8000d24 <__udivmoddi4+0xd4>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	e730      	b.n	8000d6c <__udivmoddi4+0x11c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <modbus_1t5_Timeout+0x3c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <modbus_1t5_Timeout+0x3c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <modbus_1t5_Timeout+0x3c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <modbus_1t5_Timeout+0x3c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200002cc 	.word	0x200002cc

08000f50 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <modbus_3t5_Timeout+0x1c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	755a      	strb	r2, [r3, #21]

}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	200002cc 	.word	0x200002cc

08000f70 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f007 fc5d 	bl	8008838 <HAL_UART_GetError>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b20      	cmp	r3, #32
 8000f82:	d101      	bne.n	8000f88 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f84:	f7ff ffc4 	bl	8000f10 <modbus_1t5_Timeout>

	}
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f9a:	4a25      	ldr	r2, [pc, #148]	@ (8001030 <Modbus_init+0xa0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fa0:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <Modbus_init+0xa0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <Modbus_init+0xa4>)
 8000fae:	210e      	movs	r1, #14
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f005 ff23 	bl	8006dfc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 fbe5 	bl	800878c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f007 fbfc 	bl	80087c4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <Modbus_init+0xa8>)
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fecd 	bl	8007d74 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <Modbus_init+0xa0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <Modbus_init+0xa0>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <Modbus_init+0xa0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fec:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f006 fff5 	bl	8007fe8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Modbus_init+0xa0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d10c      	bne.n	8001028 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <Modbus_init+0xa0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	4618      	mov	r0, r3
 8001016:	f004 fec3 	bl	8005da0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <Modbus_init+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f005 f91c 	bl	8006260 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200002cc 	.word	0x200002cc
 8001034:	08000f51 	.word	0x08000f51
 8001038:	08000f71 	.word	0x08000f71

0800103c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001048:	23ff      	movs	r3, #255	@ 0xff
 800104a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800104c:	23ff      	movs	r3, #255	@ 0xff
 800104e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001050:	e013      	b.n	800107a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	4053      	eors	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001062:	4a0f      	ldr	r2, [pc, #60]	@ (80010a0 <CRC16+0x64>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4413      	add	r3, r2
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	4053      	eors	r3, r2
 800106e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001070:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <CRC16+0x68>)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800107a:	883b      	ldrh	r3, [r7, #0]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	803a      	strh	r2, [r7, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e6      	bne.n	8001052 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	b29b      	uxth	r3, r3
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20000100 	.word	0x20000100
 80010a4:	20000000 	.word	0x20000000

080010a8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010ae:	4b7e      	ldr	r3, [pc, #504]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	7ddb      	ldrb	r3, [r3, #23]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d80a      	bhi.n	80010d0 <Modbus_Protocal_Worker+0x28>
 80010ba:	a201      	add	r2, pc, #4	@ (adr r2, 80010c0 <Modbus_Protocal_Worker+0x18>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010db 	.word	0x080010db
 80010c4:	0800126f 	.word	0x0800126f
 80010c8:	08001167 	.word	0x08001167
 80010cc:	080011ab 	.word	0x080011ab
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80010d0:	4b75      	ldr	r3, [pc, #468]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2201      	movs	r2, #1
 80010d6:	75da      	strb	r2, [r3, #23]
		break;
 80010d8:	e0e1      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80010da:	4b73      	ldr	r3, [pc, #460]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80010e6:	4b70      	ldr	r3, [pc, #448]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2202      	movs	r2, #2
 80010ec:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80010ee:	f000 f9cd 	bl	800148c <Modbus_Emission>
 80010f2:	e018      	b.n	8001126 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80010f4:	4b6c      	ldr	r3, [pc, #432]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80010fe:	4b6a      	ldr	r3, [pc, #424]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001108:	b29b      	uxth	r3, r3
 800110a:	429a      	cmp	r2, r3
 800110c:	d00b      	beq.n	8001126 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800110e:	4b66      	ldr	r3, [pc, #408]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001116:	4b64      	ldr	r3, [pc, #400]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800111e:	4b62      	ldr	r3, [pc, #392]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2203      	movs	r2, #3
 8001124:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001126:	4b60      	ldr	r3, [pc, #384]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001130:	2b20      	cmp	r3, #32
 8001132:	f040 80ad 	bne.w	8001290 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001136:	4b5c      	ldr	r3, [pc, #368]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2200      	movs	r2, #0
 800113c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001140:	4b59      	ldr	r3, [pc, #356]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001146:	4b58      	ldr	r3, [pc, #352]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b57      	ldr	r3, [pc, #348]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001152:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001156:	4413      	add	r3, r2
 8001158:	3302      	adds	r3, #2
 800115a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800115e:	4619      	mov	r1, r3
 8001160:	f006 ff42 	bl	8007fe8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001164:	e094      	b.n	8001290 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001166:	4b50      	ldr	r3, [pc, #320]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	7d1b      	ldrb	r3, [r3, #20]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 8091 	beq.w	8001294 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001172:	4b4d      	ldr	r3, [pc, #308]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	22fe      	movs	r2, #254	@ 0xfe
 8001178:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800117a:	4b4b      	ldr	r3, [pc, #300]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001184:	4b48      	ldr	r3, [pc, #288]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001194:	4b44      	ldr	r3, [pc, #272]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001196:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001198:	1a8a      	subs	r2, r1, r2
 800119a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800119c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011a0:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2204      	movs	r2, #4
 80011a6:	75da      	strb	r2, [r3, #23]
		}
		break;
 80011a8:	e074      	b.n	8001294 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80011b2:	f113 0f02 	cmn.w	r3, #2
 80011b6:	d150      	bne.n	800125a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011b8:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011c0:	4b39      	ldr	r3, [pc, #228]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80011c8:	4b37      	ldr	r3, [pc, #220]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011d0:	3b02      	subs	r3, #2
 80011d2:	4619      	mov	r1, r3
 80011d4:	4610      	mov	r0, r2
 80011d6:	f7ff ff31 	bl	800103c <CRC16>
 80011da:	4603      	mov	r3, r0
 80011dc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011de:	793a      	ldrb	r2, [r7, #4]
 80011e0:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	4b30      	ldr	r3, [pc, #192]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011ec:	3b02      	subs	r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d10c      	bne.n	8001212 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011f8:	797a      	ldrb	r2, [r7, #5]
 80011fa:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 80011fc:	6819      	ldr	r1, [r3, #0]
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001206:	3b01      	subs	r3, #1
 8001208:	440b      	add	r3, r1
 800120a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800120e:	429a      	cmp	r2, r3
 8001210:	d004      	beq.n	800121c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	22ff      	movs	r2, #255	@ 0xff
 8001218:	759a      	strb	r2, [r3, #22]
				break;
 800121a:	e040      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001224:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d113      	bne.n	8001256 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800123e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001248:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800124a:	461a      	mov	r2, r3
 800124c:	f008 fc84 	bl	8009b58 <memcpy>

			//execute command
			Modbus_frame_response();
 8001250:	f000 f904 	bl	800145c <Modbus_frame_response>
 8001254:	e001      	b.n	800125a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001256:	bf00      	nop
					}
		break;


	}
}
 8001258:	e021      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	7d5b      	ldrb	r3, [r3, #21]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d019      	beq.n	8001298 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001264:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	75da      	strb	r2, [r3, #23]
		break;
 800126c:	e014      	b.n	8001298 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001278:	2b20      	cmp	r3, #32
 800127a:	d10f      	bne.n	800129c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <Modbus_Protocal_Worker+0x200>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	75da      	strb	r2, [r3, #23]
		break;
 800128e:	e005      	b.n	800129c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001290:	bf00      	nop
 8001292:	e004      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001294:	bf00      	nop
 8001296:	e002      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001298:	bf00      	nop
 800129a:	e000      	b.n	800129e <Modbus_Protocal_Worker+0x1f6>
		break;
 800129c:	bf00      	nop
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002cc 	.word	0x200002cc

080012ac <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	7e5b      	ldrb	r3, [r3, #25]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	7e92      	ldrb	r2, [r2, #26]
 80012c2:	4413      	add	r3, r2
 80012c4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80012c6:	88fa      	ldrh	r2, [r7, #6]
 80012c8:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d903      	bls.n	80012da <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012d2:	2002      	movs	r0, #2
 80012d4:	f000 f8a0 	bl	8001418 <ModbusErrorReply>
			 return;
 80012d8:	e023      	b.n	8001322 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6859      	ldr	r1, [r3, #4]
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	7ed2      	ldrb	r2, [r2, #27]
 80012ec:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <modbusWrite1Register+0x7c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	7f12      	ldrb	r2, [r2, #28]
 8001300:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <modbusWrite1Register+0x7c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <modbusWrite1Register+0x7c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001310:	2208      	movs	r2, #8
 8001312:	4619      	mov	r1, r3
 8001314:	f008 fc20 	bl	8009b58 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <modbusWrite1Register+0x7c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2205      	movs	r2, #5
 800131e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200002cc 	.word	0x200002cc

0800132c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001332:	4b38      	ldr	r3, [pc, #224]	@ (8001414 <modbusRead1Register+0xe8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	7edb      	ldrb	r3, [r3, #27]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b29b      	uxth	r3, r3
 800133c:	4a35      	ldr	r2, [pc, #212]	@ (8001414 <modbusRead1Register+0xe8>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	7f12      	ldrb	r2, [r2, #28]
 8001342:	4413      	add	r3, r2
 8001344:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001346:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <modbusRead1Register+0xe8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7e5b      	ldrb	r3, [r3, #25]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	4a30      	ldr	r2, [pc, #192]	@ (8001414 <modbusRead1Register+0xe8>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	7e92      	ldrb	r2, [r2, #26]
 8001356:	4413      	add	r3, r2
 8001358:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <modbusRead1Register+0x3a>
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	2b7d      	cmp	r3, #125	@ 0x7d
 8001364:	d903      	bls.n	800136e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001366:	2003      	movs	r0, #3
 8001368:	f000 f856 	bl	8001418 <ModbusErrorReply>
		 return;
 800136c:	e04e      	b.n	800140c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800136e:	88ba      	ldrh	r2, [r7, #4]
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <modbusRead1Register+0xe8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	429a      	cmp	r2, r3
 8001378:	d808      	bhi.n	800138c <modbusRead1Register+0x60>
 800137a:	88ba      	ldrh	r2, [r7, #4]
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	4413      	add	r3, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <modbusRead1Register+0xe8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	429a      	cmp	r2, r3
 800138a:	d903      	bls.n	8001394 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800138c:	2002      	movs	r0, #2
 800138e:	f000 f843 	bl	8001418 <ModbusErrorReply>
		 return;
 8001392:	e03b      	b.n	800140c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001394:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <modbusRead1Register+0xe8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2203      	movs	r2, #3
 800139a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <modbusRead1Register+0xe8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0052      	lsls	r2, r2, #1
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013ae:	2400      	movs	r4, #0
 80013b0:	e020      	b.n	80013f4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <modbusRead1Register+0xe8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	88bb      	ldrh	r3, [r7, #4]
 80013ba:	4423      	add	r3, r4
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	18d1      	adds	r1, r2, r3
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <modbusRead1Register+0xe8>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	1c63      	adds	r3, r4, #1
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	7849      	ldrb	r1, [r1, #1]
 80013ca:	4413      	add	r3, r2
 80013cc:	460a      	mov	r2, r1
 80013ce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <modbusRead1Register+0xe8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	88bb      	ldrh	r3, [r7, #4]
 80013da:	4423      	add	r3, r4
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	18d1      	adds	r1, r2, r3
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <modbusRead1Register+0xe8>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	0063      	lsls	r3, r4, #1
 80013e6:	3303      	adds	r3, #3
 80013e8:	7809      	ldrb	r1, [r1, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	460a      	mov	r2, r1
 80013ee:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80013f2:	3401      	adds	r4, #1
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	429c      	cmp	r4, r3
 80013f8:	dbdb      	blt.n	80013b2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <modbusRead1Register+0xe8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0052      	lsls	r2, r2, #1
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	200002cc 	.word	0x200002cc

08001418 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <ModbusErrorReply+0x40>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	7e1a      	ldrb	r2, [r3, #24]
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <ModbusErrorReply+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <ModbusErrorReply+0x40>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <ModbusErrorReply+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2202      	movs	r2, #2
 8001446:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200002cc 	.word	0x200002cc

0800145c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <Modbus_frame_response+0x2c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	7e1b      	ldrb	r3, [r3, #24]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d004      	beq.n	8001474 <Modbus_frame_response+0x18>
 800146a:	2b06      	cmp	r3, #6
 800146c:	d105      	bne.n	800147a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800146e:	f7ff ff1d 	bl	80012ac <modbusWrite1Register>
		break;
 8001472:	e006      	b.n	8001482 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001474:	f7ff ff5a 	bl	800132c <modbusRead1Register>
		break;
 8001478:	e003      	b.n	8001482 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff ffcc 	bl	8001418 <ModbusErrorReply>
		break;
 8001480:	bf00      	nop

	}
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200002cc 	.word	0x200002cc

0800148c <Modbus_Emission>:

void Modbus_Emission()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001492:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <Modbus_Emission+0xe8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149c:	2b20      	cmp	r3, #32
 800149e:	d15d      	bne.n	800155c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014a0:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <Modbus_Emission+0xe8>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <Modbus_Emission+0xe8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <Modbus_Emission+0xe8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80014b6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80014b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <Modbus_Emission+0xe8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80014c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <Modbus_Emission+0xe8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80014c8:	461a      	mov	r2, r3
 80014ca:	f008 fb45 	bl	8009b58 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014ce:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <Modbus_Emission+0xe8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <Modbus_Emission+0xe8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3203      	adds	r2, #3
 80014de:	b292      	uxth	r2, r2
 80014e0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014e4:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <Modbus_Emission+0xe8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <Modbus_Emission+0xe8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014f4:	3b02      	subs	r3, #2
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f7ff fd9f 	bl	800103c <CRC16>
 80014fe:	4603      	mov	r3, r0
 8001500:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001502:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <Modbus_Emission+0xe8>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <Modbus_Emission+0xe8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800150e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001510:	7939      	ldrb	r1, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	460a      	mov	r2, r1
 8001516:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <Modbus_Emission+0xe8>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <Modbus_Emission+0xe8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001526:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001528:	7979      	ldrb	r1, [r7, #5]
 800152a:	4413      	add	r3, r2
 800152c:	460a      	mov	r2, r1
 800152e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <Modbus_Emission+0xe8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153c:	2b20      	cmp	r3, #32
 800153e:	d10d      	bne.n	800155c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <Modbus_Emission+0xe8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <Modbus_Emission+0xe8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <Modbus_Emission+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001552:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001556:	461a      	mov	r2, r3
 8001558:	f006 fcc6 	bl	8007ee8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <Modbus_Emission+0xe8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <Modbus_Emission+0xe8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	755a      	strb	r2, [r3, #21]

}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200002cc 	.word	0x200002cc

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157e:	f002 fc82 	bl	8003e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001582:	f000 f923 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f000 fbdb 	bl	8001d40 <MX_GPIO_Init>
  MX_DMA_Init();
 800158a:	f000 fb9f 	bl	8001ccc <MX_DMA_Init>
  MX_TIM3_Init();
 800158e:	f000 f9b7 	bl	8001900 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001592:	f000 fb01 	bl	8001b98 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001596:	f000 fa2b 	bl	80019f0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800159a:	f000 fa7f 	bl	8001a9c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 800159e:	f000 fb47 	bl	8001c30 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80015a2:	f000 fac9 	bl	8001b38 <MX_TIM16_Init>
  MX_TIM2_Init();
 80015a6:	f000 f95d 	bl	8001864 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //modbus
  hmodbus.huart = &huart2;
 80015aa:	4b71      	ldr	r3, [pc, #452]	@ (8001770 <main+0x1f8>)
 80015ac:	4a71      	ldr	r2, [pc, #452]	@ (8001774 <main+0x1fc>)
 80015ae:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80015b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001770 <main+0x1f8>)
 80015b2:	4a71      	ldr	r2, [pc, #452]	@ (8001778 <main+0x200>)
 80015b4:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80015b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001770 <main+0x1f8>)
 80015b8:	2215      	movs	r2, #21
 80015ba:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80015bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001770 <main+0x1f8>)
 80015be:	22c8      	movs	r2, #200	@ 0xc8
 80015c0:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80015c2:	496e      	ldr	r1, [pc, #440]	@ (800177c <main+0x204>)
 80015c4:	486a      	ldr	r0, [pc, #424]	@ (8001770 <main+0x1f8>)
 80015c6:	f7ff fce3 	bl	8000f90 <Modbus_init>

  //Joy
  UARTDMAConfig();
 80015ca:	f001 f965 	bl	8002898 <UARTDMAConfig>

  //Motor
  HAL_TIM_Base_Start(&htim3);
 80015ce:	486c      	ldr	r0, [pc, #432]	@ (8001780 <main+0x208>)
 80015d0:	f004 fb76 	bl	8005cc0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015d4:	2104      	movs	r1, #4
 80015d6:	486a      	ldr	r0, [pc, #424]	@ (8001780 <main+0x208>)
 80015d8:	f004 fcc8 	bl	8005f6c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2140      	movs	r1, #64	@ 0x40
 80015e0:	4868      	ldr	r0, [pc, #416]	@ (8001784 <main+0x20c>)
 80015e2:	f003 fa9d 	bl	8004b20 <HAL_GPIO_WritePin>

  //encoder
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80015e6:	213c      	movs	r1, #60	@ 0x3c
 80015e8:	4867      	ldr	r0, [pc, #412]	@ (8001788 <main+0x210>)
 80015ea:	f004 ff7b 	bl	80064e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80015ee:	4867      	ldr	r0, [pc, #412]	@ (800178c <main+0x214>)
 80015f0:	f004 fbd6 	bl	8005da0 <HAL_TIM_Base_Start_IT>

  //PID
//    PID.Kp = 0.34;
//    PID.Ki = 0.0000006;
//    PID.Kd = 0.0000001;
    PID.Kp = 0.478;
 80015f4:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <main+0x218>)
 80015f6:	4a67      	ldr	r2, [pc, #412]	@ (8001794 <main+0x21c>)
 80015f8:	619a      	str	r2, [r3, #24]
    PID.Ki = 0.0000006;
 80015fa:	4b65      	ldr	r3, [pc, #404]	@ (8001790 <main+0x218>)
 80015fc:	4a66      	ldr	r2, [pc, #408]	@ (8001798 <main+0x220>)
 80015fe:	61da      	str	r2, [r3, #28]
    PID.Kd = 0.0000000151;
 8001600:	4b63      	ldr	r3, [pc, #396]	@ (8001790 <main+0x218>)
 8001602:	4a66      	ldr	r2, [pc, #408]	@ (800179c <main+0x224>)
 8001604:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&PID, 0);
 8001606:	2100      	movs	r1, #0
 8001608:	4861      	ldr	r0, [pc, #388]	@ (8001790 <main+0x218>)
 800160a:	f008 fa3d 	bl	8009a88 <arm_pid_init_f32>

  //Home
  while(1)
  {
	  sensor_up = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 800160e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001612:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001616:	f003 fa6b 	bl	8004af0 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	4b60      	ldr	r3, [pc, #384]	@ (80017a0 <main+0x228>)
 8001620:	701a      	strb	r2, [r3, #0]
	  sensor_down = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8001622:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162a:	f003 fa61 	bl	8004af0 <HAL_GPIO_ReadPin>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4b5c      	ldr	r3, [pc, #368]	@ (80017a4 <main+0x22c>)
 8001634:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x00].U16=22881;
 8001636:	4b51      	ldr	r3, [pc, #324]	@ (800177c <main+0x204>)
 8001638:	f645 1261 	movw	r2, #22881	@ 0x5961
 800163c:	801a      	strh	r2, [r3, #0]
	  if(sensor_down == 0){
 800163e:	4b59      	ldr	r3, [pc, #356]	@ (80017a4 <main+0x22c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <main+0xe2>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001646:	2201      	movs	r2, #1
 8001648:	2140      	movs	r1, #64	@ 0x40
 800164a:	484e      	ldr	r0, [pc, #312]	@ (8001784 <main+0x20c>)
 800164c:	f003 fa68 	bl	8004b20 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*1.5/10.0);
 8001650:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <main+0x208>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2295      	movs	r2, #149	@ 0x95
 8001656:	639a      	str	r2, [r3, #56]	@ 0x38
 8001658:	e7d9      	b.n	800160e <main+0x96>
	  }
	  else if(sensor_down == 1){
 800165a:	4b52      	ldr	r3, [pc, #328]	@ (80017a4 <main+0x22c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d1d5      	bne.n	800160e <main+0x96>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2140      	movs	r1, #64	@ 0x40
 8001666:	4847      	ldr	r0, [pc, #284]	@ (8001784 <main+0x20c>)
 8001668:	f003 fa5a 	bl	8004b20 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800166c:	4b44      	ldr	r3, [pc, #272]	@ (8001780 <main+0x208>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2200      	movs	r2, #0
 8001672:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001674:	4b44      	ldr	r3, [pc, #272]	@ (8001788 <main+0x210>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
		  QEIdata.Position[NEW] = 0;
 800167c:	4b4a      	ldr	r3, [pc, #296]	@ (80017a8 <main+0x230>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
		  QEIEncoderPosVel_Update();
 8001682:	f001 f9b9 	bl	80029f8 <QEIEncoderPosVel_Update>
		  angular_position = 0.0;
 8001686:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <main+0x234>)
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
		  position = 0.0;
 800168e:	4b48      	ldr	r3, [pc, #288]	@ (80017b0 <main+0x238>)
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
		  position_round = 0;
 8001696:	4b47      	ldr	r3, [pc, #284]	@ (80017b4 <main+0x23c>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
		  z_target_position = 0;
 800169c:	4b46      	ldr	r3, [pc, #280]	@ (80017b8 <main+0x240>)
 800169e:	2200      	movs	r2, #0
 80016a0:	801a      	strh	r2, [r3, #0]
		  x_target_position = 0;
 80016a2:	4b46      	ldr	r3, [pc, #280]	@ (80017bc <main+0x244>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_up = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80016a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b0:	f003 fa1e 	bl	8004af0 <HAL_GPIO_ReadPin>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b39      	ldr	r3, [pc, #228]	@ (80017a0 <main+0x228>)
 80016ba:	701a      	strb	r2, [r3, #0]
	  sensor_down = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80016bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c4:	f003 fa14 	bl	8004af0 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b35      	ldr	r3, [pc, #212]	@ (80017a4 <main+0x22c>)
 80016ce:	701a      	strb	r2, [r3, #0]

	  static uint64_t timestamp_QEI = 0;
	  uint64_t currentTime = micros();
 80016d0:	f001 f978 	bl	80029c4 <micros>
 80016d4:	e9c7 0100 	strd	r0, r1, [r7]
	  if(currentTime > timestamp_QEI)
 80016d8:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <main+0x248>)
 80016da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016e2:	4290      	cmp	r0, r2
 80016e4:	eb71 0303 	sbcs.w	r3, r1, r3
 80016e8:	d22d      	bcs.n	8001746 <main+0x1ce>
	  {
		  timestamp_QEI = currentTime + 1000;//us
 80016ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ee:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 80016f2:	f143 0500 	adc.w	r5, r3, #0
 80016f6:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <main+0x248>)
 80016f8:	e9c3 4500 	strd	r4, r5, [r3]
		  QEIEncoderPosVel_Update();
 80016fc:	f001 f97c 	bl	80029f8 <QEIEncoderPosVel_Update>
		  velocity = angular_velocity*14/2.0/M_PI;
 8001700:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <main+0x24c>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800170a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170e:	ee17 0a90 	vmov	r0, s15
 8001712:	f7fe fee5 	bl	80004e0 <__aeabi_f2d>
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800171e:	f7ff f861 	bl	80007e4 <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001768 <main+0x1f0>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7ff f858 	bl	80007e4 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa20 	bl	8000b80 <__aeabi_d2f>
 8001740:	4603      	mov	r3, r0
 8001742:	4a21      	ldr	r2, [pc, #132]	@ (80017c8 <main+0x250>)
 8001744:	6013      	str	r3, [r2, #0]
	  }

	  Modbus_Protocal_Worker();
 8001746:	f7ff fcaf 	bl	80010a8 <Modbus_Protocal_Worker>
	  registerFrame[0x00].U16=22881;
 800174a:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <main+0x204>)
 800174c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001750:	801a      	strh	r2, [r3, #0]

	  set_shelves();
 8001752:	f000 fb89 	bl	8001e68 <set_shelves>
	  set_goalpoint();
 8001756:	f000 fceb 	bl	8002130 <set_goalpoint>
	  run_pointmode();
 800175a:	f000 fcf1 	bl	8002140 <run_pointmode>
	  set_home();
 800175e:	f000 fd95 	bl	800228c <set_home>
//	  pick_place();
	  run_jogmode();
 8001762:	f000 fe45 	bl	80023f0 <run_jogmode>
  {
 8001766:	e79f      	b.n	80016a8 <main+0x130>
 8001768:	54442d18 	.word	0x54442d18
 800176c:	400921fb 	.word	0x400921fb
 8001770:	20000984 	.word	0x20000984
 8001774:	20000798 	.word	0x20000798
 8001778:	20000600 	.word	0x20000600
 800177c:	20000e5c 	.word	0x20000e5c
 8001780:	2000039c 	.word	0x2000039c
 8001784:	48000400 	.word	0x48000400
 8001788:	20000468 	.word	0x20000468
 800178c:	20000534 	.word	0x20000534
 8001790:	20001014 	.word	0x20001014
 8001794:	3ef4bc6a 	.word	0x3ef4bc6a
 8001798:	35210fb0 	.word	0x35210fb0
 800179c:	3281b540 	.word	0x3281b540
 80017a0:	2000100e 	.word	0x2000100e
 80017a4:	2000100f 	.word	0x2000100f
 80017a8:	20001048 	.word	0x20001048
 80017ac:	2000107c 	.word	0x2000107c
 80017b0:	20001074 	.word	0x20001074
 80017b4:	20001080 	.word	0x20001080
 80017b8:	20001010 	.word	0x20001010
 80017bc:	20001012 	.word	0x20001012
 80017c0:	200010b8 	.word	0x200010b8
 80017c4:	20001078 	.word	0x20001078
 80017c8:	20001070 	.word	0x20001070

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	@ 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	2238      	movs	r2, #56	@ 0x38
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f008 f98a 	bl	8009af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f003 f9d2 	bl	8004b98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fe:	2340      	movs	r3, #64	@ 0x40
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001802:	2302      	movs	r3, #2
 8001804:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001806:	2302      	movs	r3, #2
 8001808:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800180a:	2304      	movs	r3, #4
 800180c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800180e:	2355      	movs	r3, #85	@ 0x55
 8001810:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001812:	2302      	movs	r3, #2
 8001814:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001816:	2302      	movs	r3, #2
 8001818:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800181a:	2302      	movs	r3, #2
 800181c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181e:	f107 0318 	add.w	r3, r7, #24
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fa6c 	bl	8004d00 <HAL_RCC_OscConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800182e:	f002 f843 	bl	80038b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001832:	230f      	movs	r3, #15
 8001834:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001836:	2303      	movs	r3, #3
 8001838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2104      	movs	r1, #4
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fd6a 	bl	8005324 <HAL_RCC_ClockConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001856:	f002 f82f 	bl	80038b8 <Error_Handler>
  }
}
 800185a:	bf00      	nop
 800185c:	3750      	adds	r7, #80	@ 0x50
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_TIM2_Init+0x94>)
 8001884:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001888:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <MX_TIM2_Init+0x94>)
 800188c:	22a9      	movs	r2, #169	@ 0xa9
 800188e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <MX_TIM2_Init+0x94>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000;
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <MX_TIM2_Init+0x94>)
 8001898:	4a18      	ldr	r2, [pc, #96]	@ (80018fc <MX_TIM2_Init+0x98>)
 800189a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <MX_TIM2_Init+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <MX_TIM2_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a8:	4813      	ldr	r0, [pc, #76]	@ (80018f8 <MX_TIM2_Init+0x94>)
 80018aa:	f004 f9a5 	bl	8005bf8 <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018b4:	f002 f800 	bl	80038b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <MX_TIM2_Init+0x94>)
 80018c6:	f005 f929 	bl	8006b1c <HAL_TIM_ConfigClockSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018d0:	f001 fff2 	bl	80038b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <MX_TIM2_Init+0x94>)
 80018e2:	f006 f901 	bl	8007ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018ec:	f001 ffe4 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200002d0 	.word	0x200002d0
 80018fc:	00030d40 	.word	0x00030d40

08001900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	@ 0x38
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001932:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 8001934:	4a2d      	ldr	r2, [pc, #180]	@ (80019ec <MX_TIM3_Init+0xec>)
 8001936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 800193a:	22a9      	movs	r2, #169	@ 0xa9
 800193c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001944:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 8001946:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800194a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194c:	4b26      	ldr	r3, [pc, #152]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001958:	4823      	ldr	r0, [pc, #140]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 800195a:	f004 f94d 	bl	8005bf8 <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001964:	f001 ffa8 	bl	80038b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800196e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001972:	4619      	mov	r1, r3
 8001974:	481c      	ldr	r0, [pc, #112]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 8001976:	f005 f8d1 	bl	8006b1c <HAL_TIM_ConfigClockSource>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001980:	f001 ff9a 	bl	80038b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001984:	4818      	ldr	r0, [pc, #96]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 8001986:	f004 fa83 	bl	8005e90 <HAL_TIM_PWM_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001990:	f001 ff92 	bl	80038b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4811      	ldr	r0, [pc, #68]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 80019a4:	f006 f8a0 	bl	8007ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019ae:	f001 ff83 	bl	80038b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b2:	2360      	movs	r3, #96	@ 0x60
 80019b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	2204      	movs	r2, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4807      	ldr	r0, [pc, #28]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 80019ca:	f004 ff93 	bl	80068f4 <HAL_TIM_PWM_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019d4:	f001 ff70 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019d8:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <MX_TIM3_Init+0xe8>)
 80019da:	f002 f843 	bl	8003a64 <HAL_TIM_MspPostInit>

}
 80019de:	bf00      	nop
 80019e0:	3738      	adds	r7, #56	@ 0x38
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000039c 	.word	0x2000039c
 80019ec:	40000400 	.word	0x40000400

080019f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	@ 0x30
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2224      	movs	r2, #36	@ 0x24
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f008 f878 	bl	8009af4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <MX_TIM4_Init+0xa4>)
 8001a10:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <MX_TIM4_Init+0xa8>)
 8001a12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <MX_TIM4_Init+0xa4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <MX_TIM4_Init+0xa4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63487;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <MX_TIM4_Init+0xa4>)
 8001a22:	f24f 72ff 	movw	r2, #63487	@ 0xf7ff
 8001a26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <MX_TIM4_Init+0xa4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <MX_TIM4_Init+0xa4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a34:	2303      	movs	r3, #3
 8001a36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480d      	ldr	r0, [pc, #52]	@ (8001a94 <MX_TIM4_Init+0xa4>)
 8001a60:	f004 fc8c 	bl	800637c <HAL_TIM_Encoder_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a6a:	f001 ff25 	bl	80038b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a76:	463b      	mov	r3, r7
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	@ (8001a94 <MX_TIM4_Init+0xa4>)
 8001a7c:	f006 f834 	bl	8007ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a86:	f001 ff17 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3730      	adds	r7, #48	@ 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000468 	.word	0x20000468
 8001a98:	40000800 	.word	0x40000800

08001a9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <MX_TIM5_Init+0x94>)
 8001abc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <MX_TIM5_Init+0x98>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <MX_TIM5_Init+0x94>)
 8001ac2:	22a9      	movs	r2, #169	@ 0xa9
 8001ac4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <MX_TIM5_Init+0x94>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <MX_TIM5_Init+0x94>)
 8001ace:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <MX_TIM5_Init+0x94>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <MX_TIM5_Init+0x94>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ae0:	4813      	ldr	r0, [pc, #76]	@ (8001b30 <MX_TIM5_Init+0x94>)
 8001ae2:	f004 f889 	bl	8005bf8 <HAL_TIM_Base_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001aec:	f001 fee4 	bl	80038b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	4619      	mov	r1, r3
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <MX_TIM5_Init+0x94>)
 8001afe:	f005 f80d 	bl	8006b1c <HAL_TIM_ConfigClockSource>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001b08:	f001 fed6 	bl	80038b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_TIM5_Init+0x94>)
 8001b1a:	f005 ffe5 	bl	8007ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001b24:	f001 fec8 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000534 	.word	0x20000534
 8001b34:	40000c00 	.word	0x40000c00

08001b38 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <MX_TIM16_Init+0x58>)
 8001b3e:	4a15      	ldr	r2, [pc, #84]	@ (8001b94 <MX_TIM16_Init+0x5c>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <MX_TIM16_Init+0x58>)
 8001b44:	22a9      	movs	r2, #169	@ 0xa9
 8001b46:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <MX_TIM16_Init+0x58>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <MX_TIM16_Init+0x58>)
 8001b50:	f240 4279 	movw	r2, #1145	@ 0x479
 8001b54:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <MX_TIM16_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <MX_TIM16_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <MX_TIM16_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b68:	4809      	ldr	r0, [pc, #36]	@ (8001b90 <MX_TIM16_Init+0x58>)
 8001b6a:	f004 f845 	bl	8005bf8 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001b74:	f001 fea0 	bl	80038b8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001b78:	2108      	movs	r1, #8
 8001b7a:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <MX_TIM16_Init+0x58>)
 8001b7c:	f004 fb08 	bl	8006190 <HAL_TIM_OnePulse_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001b86:	f001 fe97 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000600 	.word	0x20000600
 8001b94:	40014400 	.word	0x40014400

08001b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b9c:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001b9e:	4a23      	ldr	r2, [pc, #140]	@ (8001c2c <MX_USART1_UART_Init+0x94>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8001ba2:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001ba4:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bda:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001be0:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001be2:	f006 f867 	bl	8007cb4 <HAL_UART_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bec:	f001 fe64 	bl	80038b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bf4:	f007 fe7d 	bl	80098f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bfe:	f001 fe5b 	bl	80038b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c02:	2100      	movs	r1, #0
 8001c04:	4808      	ldr	r0, [pc, #32]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001c06:	f007 feb2 	bl	800996e <HAL_UARTEx_SetRxFifoThreshold>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c10:	f001 fe52 	bl	80038b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <MX_USART1_UART_Init+0x90>)
 8001c16:	f007 fe33 	bl	8009880 <HAL_UARTEx_DisableFifoMode>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c20:	f001 fe4a 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200006cc 	.word	0x200006cc
 8001c2c:	40013800 	.word	0x40013800

08001c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c34:	4b23      	ldr	r3, [pc, #140]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c36:	4a24      	ldr	r2, [pc, #144]	@ (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001c3a:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c3c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001c42:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c48:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c76:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c7c:	4811      	ldr	r0, [pc, #68]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c7e:	f006 f819 	bl	8007cb4 <HAL_UART_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001c88:	f001 fe16 	bl	80038b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	480d      	ldr	r0, [pc, #52]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001c90:	f007 fe2f 	bl	80098f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001c9a:	f001 fe0d 	bl	80038b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4808      	ldr	r0, [pc, #32]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001ca2:	f007 fe64 	bl	800996e <HAL_UARTEx_SetRxFifoThreshold>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001cac:	f001 fe04 	bl	80038b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cb0:	4804      	ldr	r0, [pc, #16]	@ (8001cc4 <MX_USART2_UART_Init+0x94>)
 8001cb2:	f007 fde5 	bl	8009880 <HAL_UARTEx_DisableFifoMode>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001cbc:	f001 fdfc 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000798 	.word	0x20000798
 8001cc8:	40004400 	.word	0x40004400

08001ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <MX_DMA_Init+0x70>)
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd6:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <MX_DMA_Init+0x70>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cde:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <MX_DMA_Init+0x70>)
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <MX_DMA_Init+0x70>)
 8001cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <MX_DMA_Init+0x70>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <MX_DMA_Init+0x70>)
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	200b      	movs	r0, #11
 8001d08:	f002 fa09 	bl	800411e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d0c:	200b      	movs	r0, #11
 8001d0e:	f002 fa20 	bl	8004152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	200c      	movs	r0, #12
 8001d18:	f002 fa01 	bl	800411e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d1c:	200c      	movs	r0, #12
 8001d1e:	f002 fa18 	bl	8004152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	200d      	movs	r0, #13
 8001d28:	f002 f9f9 	bl	800411e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d2c:	200d      	movs	r0, #13
 8001d2e:	f002 fa10 	bl	8004152 <HAL_NVIC_EnableIRQ>

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	@ 0x28
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d62:	4b3d      	ldr	r3, [pc, #244]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d72:	4a39      	ldr	r2, [pc, #228]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001d74:	f043 0320 	orr.w	r3, r3, #32
 8001d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d7a:	4b37      	ldr	r3, [pc, #220]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b34      	ldr	r3, [pc, #208]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8a:	4a33      	ldr	r2, [pc, #204]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d92:	4b31      	ldr	r3, [pc, #196]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001daa:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <MX_GPIO_Init+0x118>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2120      	movs	r1, #32
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dbe:	f002 feaf 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2140      	movs	r1, #64	@ 0x40
 8001dc6:	4825      	ldr	r0, [pc, #148]	@ (8001e5c <MX_GPIO_Init+0x11c>)
 8001dc8:	f002 feaa 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	481f      	ldr	r0, [pc, #124]	@ (8001e60 <MX_GPIO_Init+0x120>)
 8001de4:	f002 fd02 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001de8:	2320      	movs	r3, #32
 8001dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e02:	f002 fcf3 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1e:	f002 fce5 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e22:	2340      	movs	r3, #64	@ 0x40
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4808      	ldr	r0, [pc, #32]	@ (8001e5c <MX_GPIO_Init+0x11c>)
 8001e3a:	f002 fcd7 	bl	80047ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2028      	movs	r0, #40	@ 0x28
 8001e44:	f002 f96b 	bl	800411e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e48:	2028      	movs	r0, #40	@ 0x28
 8001e4a:	f002 f982 	bl	8004152 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	@ 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	48000400 	.word	0x48000400
 8001e60:	48000800 	.word	0x48000800
 8001e64:	00000000 	.word	0x00000000

08001e68 <set_shelves>:

/* USER CODE BEGIN 4 */
void set_shelves(){
 8001e68:	b5b0      	push	{r4, r5, r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16=22881;
 8001e6e:	4ba0      	ldr	r3, [pc, #640]	@ (80020f0 <set_shelves+0x288>)
 8001e70:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001e74:	801a      	strh	r2, [r3, #0]
	if(registerFrame[0x01].U16==0b0001){
 8001e76:	4b9e      	ldr	r3, [pc, #632]	@ (80020f0 <set_shelves+0x288>)
 8001e78:	885b      	ldrh	r3, [r3, #2]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <set_shelves+0x28>
		registerFrame[0x01].U16=0b0000;
 8001e7e:	4b9c      	ldr	r3, [pc, #624]	@ (80020f0 <set_shelves+0x288>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16=0b0001; //z-axis Moving Status
 8001e84:	4b9a      	ldr	r3, [pc, #616]	@ (80020f0 <set_shelves+0x288>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	841a      	strh	r2, [r3, #32]
		setshelves_mode = 1;
 8001e8a:	4b9a      	ldr	r3, [pc, #616]	@ (80020f4 <set_shelves+0x28c>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
	}
	if(setshelves_mode == 1){
 8001e90:	4b98      	ldr	r3, [pc, #608]	@ (80020f4 <set_shelves+0x28c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	f040 811b 	bne.w	80020d0 <set_shelves+0x268>
		//Call every 0.1 s
		registerFrame[0x00].U16=22881;
 8001e9a:	4b95      	ldr	r3, [pc, #596]	@ (80020f0 <set_shelves+0x288>)
 8001e9c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001ea0:	801a      	strh	r2, [r3, #0]
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8001ea2:	f000 fd8f 	bl	80029c4 <micros>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if(currentTime > timestamp)
 8001eae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eb2:	4991      	ldr	r1, [pc, #580]	@ (80020f8 <set_shelves+0x290>)
 8001eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eb8:	4290      	cmp	r0, r2
 8001eba:	eb71 0303 	sbcs.w	r3, r1, r3
 8001ebe:	d20c      	bcs.n	8001eda <set_shelves+0x72>
		{
			timestamp =currentTime + 100000;//us
 8001ec0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ec4:	498d      	ldr	r1, [pc, #564]	@ (80020fc <set_shelves+0x294>)
 8001ec6:	1854      	adds	r4, r2, r1
 8001ec8:	f143 0500 	adc.w	r5, r3, #0
 8001ecc:	4622      	mov	r2, r4
 8001ece:	462b      	mov	r3, r5
 8001ed0:	4989      	ldr	r1, [pc, #548]	@ (80020f8 <set_shelves+0x290>)
 8001ed2:	e9c1 2300 	strd	r2, r3, [r1]
			QEIEncoderPosVel_Update();
 8001ed6:	f000 fd8f 	bl	80029f8 <QEIEncoderPosVel_Update>
		}
		velocity = angular_velocity*14/2.0/M_PI;
 8001eda:	4b89      	ldr	r3, [pc, #548]	@ (8002100 <set_shelves+0x298>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8001ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee8:	ee17 0a90 	vmov	r0, s15
 8001eec:	f7fe faf8 	bl	80004e0 <__aeabi_f2d>
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ef8:	f7fe fc74 	bl	80007e4 <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	a374      	add	r3, pc, #464	@ (adr r3, 80020d8 <set_shelves+0x270>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fc6b 	bl	80007e4 <__aeabi_ddiv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe33 	bl	8000b80 <__aeabi_d2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a79      	ldr	r2, [pc, #484]	@ (8002104 <set_shelves+0x29c>)
 8001f1e:	6013      	str	r3, [r2, #0]
		update_position();
 8001f20:	f000 fcc8 	bl	80028b4 <update_position>
		setposition = z_target_position;
 8001f24:	4b78      	ldr	r3, [pc, #480]	@ (8002108 <set_shelves+0x2a0>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	ee07 3a90 	vmov	s15, r3
 8001f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f30:	4b76      	ldr	r3, [pc, #472]	@ (800210c <set_shelves+0x2a4>)
 8001f32:	edc3 7a00 	vstr	s15, [r3]
		Error = setposition - position;
 8001f36:	4b75      	ldr	r3, [pc, #468]	@ (800210c <set_shelves+0x2a4>)
 8001f38:	ed93 7a00 	vldr	s14, [r3]
 8001f3c:	4b74      	ldr	r3, [pc, #464]	@ (8002110 <set_shelves+0x2a8>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f46:	4b73      	ldr	r3, [pc, #460]	@ (8002114 <set_shelves+0x2ac>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
		Vfeedback = arm_pid_f32(&PID, Error);
 8001f4c:	4b71      	ldr	r3, [pc, #452]	@ (8002114 <set_shelves+0x2ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a71      	ldr	r2, [pc, #452]	@ (8002118 <set_shelves+0x2b0>)
 8001f52:	60fa      	str	r2, [r7, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f60:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001f74:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800211c <set_shelves+0x2b4>)
 8001fb2:	6013      	str	r3, [r2, #0]
		if (fabsf(Error) <= 0.1){
 8001fb4:	4b57      	ldr	r3, [pc, #348]	@ (8002114 <set_shelves+0x2ac>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	eef0 7ae7 	vabs.f32	s15, s15
 8001fbe:	ee17 0a90 	vmov	r0, s15
 8001fc2:	f7fe fa8d 	bl	80004e0 <__aeabi_f2d>
 8001fc6:	a346      	add	r3, pc, #280	@ (adr r3, 80020e0 <set_shelves+0x278>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fd5c 	bl	8000a88 <__aeabi_dcmple>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <set_shelves+0x176>
			Vfeedback = 0;
 8001fd6:	4b51      	ldr	r3, [pc, #324]	@ (800211c <set_shelves+0x2b4>)
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
		}
		if(Vfeedback <= 4.3 && Vfeedback > 0){
 8001fde:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <set_shelves+0x2b4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fa7c 	bl	80004e0 <__aeabi_f2d>
 8001fe8:	a33f      	add	r3, pc, #252	@ (adr r3, 80020e8 <set_shelves+0x280>)
 8001fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fee:	f7fe fd4b 	bl	8000a88 <__aeabi_dcmple>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <set_shelves+0x1a6>
 8001ff8:	4b48      	ldr	r3, [pc, #288]	@ (800211c <set_shelves+0x2b4>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002006:	dd02      	ble.n	800200e <set_shelves+0x1a6>
			Vfeedback = 4.3;
 8002008:	4b44      	ldr	r3, [pc, #272]	@ (800211c <set_shelves+0x2b4>)
 800200a:	4a45      	ldr	r2, [pc, #276]	@ (8002120 <set_shelves+0x2b8>)
 800200c:	601a      	str	r2, [r3, #0]
		}
		if(Vfeedback >= -1.75 && Vfeedback < 0){
 800200e:	4b43      	ldr	r3, [pc, #268]	@ (800211c <set_shelves+0x2b4>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	eebf 7a0c 	vmov.f32	s14, #252	@ 0xbfe00000 -1.750
 8002018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	db0a      	blt.n	8002038 <set_shelves+0x1d0>
 8002022:	4b3e      	ldr	r3, [pc, #248]	@ (800211c <set_shelves+0x2b4>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	d502      	bpl.n	8002038 <set_shelves+0x1d0>
			Vfeedback = -1.78;
 8002032:	4b3a      	ldr	r3, [pc, #232]	@ (800211c <set_shelves+0x2b4>)
 8002034:	4a3b      	ldr	r2, [pc, #236]	@ (8002124 <set_shelves+0x2bc>)
 8002036:	601a      	str	r2, [r3, #0]
		}
		if(Vfeedback >= 24){
 8002038:	4b38      	ldr	r3, [pc, #224]	@ (800211c <set_shelves+0x2b4>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8002042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204a:	db02      	blt.n	8002052 <set_shelves+0x1ea>
			Vfeedback = 24;
 800204c:	4b33      	ldr	r3, [pc, #204]	@ (800211c <set_shelves+0x2b4>)
 800204e:	4a36      	ldr	r2, [pc, #216]	@ (8002128 <set_shelves+0x2c0>)
 8002050:	601a      	str	r2, [r3, #0]
		}
		setMotor();
 8002052:	f000 fb7f 	bl	8002754 <setMotor>
		if(z_floor[0] != -1 && z_floor[1] != -1 && z_floor[2] != -1 && z_floor[3] != -1 && z_floor[4] != -1){
 8002056:	4b35      	ldr	r3, [pc, #212]	@ (800212c <set_shelves+0x2c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d037      	beq.n	80020d0 <set_shelves+0x268>
 8002060:	4b32      	ldr	r3, [pc, #200]	@ (800212c <set_shelves+0x2c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d032      	beq.n	80020d0 <set_shelves+0x268>
 800206a:	4b30      	ldr	r3, [pc, #192]	@ (800212c <set_shelves+0x2c4>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d02d      	beq.n	80020d0 <set_shelves+0x268>
 8002074:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <set_shelves+0x2c4>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d028      	beq.n	80020d0 <set_shelves+0x268>
 800207e:	4b2b      	ldr	r3, [pc, #172]	@ (800212c <set_shelves+0x2c4>)
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002086:	d023      	beq.n	80020d0 <set_shelves+0x268>
			registerFrame[0x23].U16 = z_floor[0];
 8002088:	4b28      	ldr	r3, [pc, #160]	@ (800212c <set_shelves+0x2c4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <set_shelves+0x288>)
 8002090:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			registerFrame[0x24].U16 = z_floor[1];
 8002094:	4b25      	ldr	r3, [pc, #148]	@ (800212c <set_shelves+0x2c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <set_shelves+0x288>)
 800209c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
			registerFrame[0x25].U16 = z_floor[2];
 80020a0:	4b22      	ldr	r3, [pc, #136]	@ (800212c <set_shelves+0x2c4>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <set_shelves+0x288>)
 80020a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			registerFrame[0x26].U16 = z_floor[3];
 80020ac:	4b1f      	ldr	r3, [pc, #124]	@ (800212c <set_shelves+0x2c4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <set_shelves+0x288>)
 80020b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			registerFrame[0x27].U16 = z_floor[4];
 80020b8:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <set_shelves+0x2c4>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <set_shelves+0x288>)
 80020c0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			setshelves_mode = 0;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <set_shelves+0x28c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
			registerFrame[0x10].U16=0b0000;
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <set_shelves+0x288>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	841a      	strh	r2, [r3, #32]
		}
	}
}
 80020d0:	bf00      	nop
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bdb0      	pop	{r4, r5, r7, pc}
 80020d8:	54442d18 	.word	0x54442d18
 80020dc:	400921fb 	.word	0x400921fb
 80020e0:	9999999a 	.word	0x9999999a
 80020e4:	3fb99999 	.word	0x3fb99999
 80020e8:	33333333 	.word	0x33333333
 80020ec:	40113333 	.word	0x40113333
 80020f0:	20000e5c 	.word	0x20000e5c
 80020f4:	20000ff4 	.word	0x20000ff4
 80020f8:	200010c0 	.word	0x200010c0
 80020fc:	000186a0 	.word	0x000186a0
 8002100:	20001078 	.word	0x20001078
 8002104:	20001070 	.word	0x20001070
 8002108:	20001010 	.word	0x20001010
 800210c:	20001038 	.word	0x20001038
 8002110:	20001074 	.word	0x20001074
 8002114:	20001040 	.word	0x20001040
 8002118:	20001014 	.word	0x20001014
 800211c:	2000103c 	.word	0x2000103c
 8002120:	4089999a 	.word	0x4089999a
 8002124:	bfe3d70a 	.word	0xbfe3d70a
 8002128:	41c00000 	.word	0x41c00000
 800212c:	20000214 	.word	0x20000214

08002130 <set_goalpoint>:
void set_goalpoint(){
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
	//goal point z
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <run_pointmode>:
void run_pointmode(){
 8002140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16==0b1000){
 8002148:	4b47      	ldr	r3, [pc, #284]	@ (8002268 <run_pointmode+0x128>)
 800214a:	885b      	ldrh	r3, [r3, #2]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d11c      	bne.n	800218a <run_pointmode+0x4a>
		registerFrame[0x01].U16=0b0000;
 8002150:	4b45      	ldr	r3, [pc, #276]	@ (8002268 <run_pointmode+0x128>)
 8002152:	2200      	movs	r2, #0
 8002154:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16=0b00010000; //Go point
 8002156:	4b44      	ldr	r3, [pc, #272]	@ (8002268 <run_pointmode+0x128>)
 8002158:	2210      	movs	r2, #16
 800215a:	841a      	strh	r2, [r3, #32]
		setposition = (registerFrame[0x30].U16)/10.0;
 800215c:	4b42      	ldr	r3, [pc, #264]	@ (8002268 <run_pointmode+0x128>)
 800215e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f9aa 	bl	80004bc <__aeabi_i2d>
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	4b3f      	ldr	r3, [pc, #252]	@ (800226c <run_pointmode+0x12c>)
 800216e:	f7fe fb39 	bl	80007e4 <__aeabi_ddiv>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fd01 	bl	8000b80 <__aeabi_d2f>
 800217e:	4603      	mov	r3, r0
 8002180:	4a3b      	ldr	r2, [pc, #236]	@ (8002270 <run_pointmode+0x130>)
 8002182:	6013      	str	r3, [r2, #0]
		point_mode = 1;
 8002184:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <run_pointmode+0x134>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
	}
	if(point_mode == 1){
 800218a:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <run_pointmode+0x134>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d15f      	bne.n	8002252 <run_pointmode+0x112>
		trajectory();
 8002192:	f000 fd51 	bl	8002c38 <trajectory>
			static uint64_t timestamp_velocity_PID = 0;
			uint64_t currentTime = micros();
 8002196:	f000 fc15 	bl	80029c4 <micros>
 800219a:	e9c7 0100 	strd	r0, r1, [r7]
			if(currentTime > timestamp_velocity_PID)
 800219e:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <run_pointmode+0x138>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021a8:	4290      	cmp	r0, r2
 80021aa:	eb71 0303 	sbcs.w	r3, r1, r3
 80021ae:	d237      	bcs.n	8002220 <run_pointmode+0xe0>
			{
				if(fabsf(setposition-position) > 0.01){
 80021b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002270 <run_pointmode+0x130>)
 80021b2:	ed93 7a00 	vldr	s14, [r3]
 80021b6:	4b31      	ldr	r3, [pc, #196]	@ (800227c <run_pointmode+0x13c>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c0:	eef0 7ae7 	vabs.f32	s15, s15
 80021c4:	ee17 0a90 	vmov	r0, s15
 80021c8:	f7fe f98a 	bl	80004e0 <__aeabi_f2d>
 80021cc:	a324      	add	r3, pc, #144	@ (adr r3, 8002260 <run_pointmode+0x120>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe fc6d 	bl	8000ab0 <__aeabi_dcmpgt>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d011      	beq.n	8002200 <run_pointmode+0xc0>
					timestamp_velocity_PID = currentTime + 1000;//us
 80021dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021e0:	f512 787a 	adds.w	r8, r2, #1000	@ 0x3e8
 80021e4:	f143 0900 	adc.w	r9, r3, #0
 80021e8:	4b23      	ldr	r3, [pc, #140]	@ (8002278 <run_pointmode+0x138>)
 80021ea:	e9c3 8900 	strd	r8, r9, [r3]
					velocity_PID();
 80021ee:	f001 f9d7 	bl	80035a0 <velocity_PID>
					Vfeedback = velocity_PID_output;
 80021f2:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <run_pointmode+0x140>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a23      	ldr	r2, [pc, #140]	@ (8002284 <run_pointmode+0x144>)
 80021f8:	6013      	str	r3, [r2, #0]
					setMotor();
 80021fa:	f000 faab 	bl	8002754 <setMotor>
 80021fe:	e00f      	b.n	8002220 <run_pointmode+0xe0>
				}
				else{
					velocity_PID_output = 0;
 8002200:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <run_pointmode+0x140>)
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
					Vfeedback = 0;
 8002208:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <run_pointmode+0x144>)
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
					setMotor();
 8002210:	f000 faa0 	bl	8002754 <setMotor>
					registerFrame[0x10].U16=0b0000;
 8002214:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <run_pointmode+0x128>)
 8002216:	2200      	movs	r2, #0
 8002218:	841a      	strh	r2, [r3, #32]
					point_mode = 0;
 800221a:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <run_pointmode+0x134>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
				}
			}

			static uint64_t timestamp_position_PID = 0;
			currentTime = micros();
 8002220:	f000 fbd0 	bl	80029c4 <micros>
 8002224:	e9c7 0100 	strd	r0, r1, [r7]
			if(currentTime > timestamp_position_PID)
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <run_pointmode+0x148>)
 800222a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002232:	4290      	cmp	r0, r2
 8002234:	eb71 0303 	sbcs.w	r3, r1, r3
 8002238:	d20b      	bcs.n	8002252 <run_pointmode+0x112>
			{
				timestamp_position_PID = currentTime + 5000;//us
 800223a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800223e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002242:	1854      	adds	r4, r2, r1
 8002244:	f143 0500 	adc.w	r5, r3, #0
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <run_pointmode+0x148>)
 800224a:	e9c3 4500 	strd	r4, r5, [r3]
				position_PID();
 800224e:	f001 fa71 	bl	8003734 <position_PID>
			}
	}
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800225c:	f3af 8000 	nop.w
 8002260:	47ae147b 	.word	0x47ae147b
 8002264:	3f847ae1 	.word	0x3f847ae1
 8002268:	20000e5c 	.word	0x20000e5c
 800226c:	40240000 	.word	0x40240000
 8002270:	20001038 	.word	0x20001038
 8002274:	20000ff0 	.word	0x20000ff0
 8002278:	200010c8 	.word	0x200010c8
 800227c:	20001074 	.word	0x20001074
 8002280:	200010b0 	.word	0x200010b0
 8002284:	2000103c 	.word	0x2000103c
 8002288:	200010d0 	.word	0x200010d0

0800228c <set_home>:

void set_home(){
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	static uint8_t step = 0;
	if(registerFrame[0x01].U16==0b0010){
 8002290:	4b4b      	ldr	r3, [pc, #300]	@ (80023c0 <set_home+0x134>)
 8002292:	885b      	ldrh	r3, [r3, #2]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d118      	bne.n	80022ca <set_home+0x3e>
		registerFrame[0x01].U16=0b0000;
 8002298:	4b49      	ldr	r3, [pc, #292]	@ (80023c0 <set_home+0x134>)
 800229a:	2200      	movs	r2, #0
 800229c:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16=0b0010;
 800229e:	4b48      	ldr	r3, [pc, #288]	@ (80023c0 <set_home+0x134>)
 80022a0:	2202      	movs	r2, #2
 80022a2:	841a      	strh	r2, [r3, #32]
		home = 1;
 80022a4:	4b47      	ldr	r3, [pc, #284]	@ (80023c4 <set_home+0x138>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
		step = 0;
 80022aa:	4b47      	ldr	r3, [pc, #284]	@ (80023c8 <set_home+0x13c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
		if(sensor_down == 1){
 80022b0:	4b46      	ldr	r3, [pc, #280]	@ (80023cc <set_home+0x140>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <set_home+0x3e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2140      	movs	r1, #64	@ 0x40
 80022bc:	4844      	ldr	r0, [pc, #272]	@ (80023d0 <set_home+0x144>)
 80022be:	f002 fc2f 	bl	8004b20 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*1.5/10.0);
 80022c2:	4b44      	ldr	r3, [pc, #272]	@ (80023d4 <set_home+0x148>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2295      	movs	r2, #149	@ 0x95
 80022c8:	639a      	str	r2, [r3, #56]	@ 0x38
		}

	}
	if(home == 1){
 80022ca:	4b3e      	ldr	r3, [pc, #248]	@ (80023c4 <set_home+0x138>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d173      	bne.n	80023ba <set_home+0x12e>
		registerFrame[0x00].U16=22881;
 80022d2:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <set_home+0x134>)
 80022d4:	f645 1261 	movw	r2, #22881	@ 0x5961
 80022d8:	801a      	strh	r2, [r3, #0]
		sensor_up = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80022da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e2:	f002 fc05 	bl	8004af0 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b3b      	ldr	r3, [pc, #236]	@ (80023d8 <set_home+0x14c>)
 80022ec:	701a      	strb	r2, [r3, #0]
		sensor_down = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80022ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f6:	f002 fbfb 	bl	8004af0 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b33      	ldr	r3, [pc, #204]	@ (80023cc <set_home+0x140>)
 8002300:	701a      	strb	r2, [r3, #0]

		if(step == 0){
 8002302:	4b31      	ldr	r3, [pc, #196]	@ (80023c8 <set_home+0x13c>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11e      	bne.n	8002348 <set_home+0xbc>
			if(sensor_up == 0){
 800230a:	4b33      	ldr	r3, [pc, #204]	@ (80023d8 <set_home+0x14c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <set_home+0x9c>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2140      	movs	r1, #64	@ 0x40
 8002316:	482e      	ldr	r0, [pc, #184]	@ (80023d0 <set_home+0x144>)
 8002318:	f002 fc02 	bl	8004b20 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*3/10.0);
 800231c:	4b2d      	ldr	r3, [pc, #180]	@ (80023d4 <set_home+0x148>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f240 122b 	movw	r2, #299	@ 0x12b
 8002324:	639a      	str	r2, [r3, #56]	@ 0x38
 8002326:	e00f      	b.n	8002348 <set_home+0xbc>
			}
			else if(sensor_up == 1){
 8002328:	4b2b      	ldr	r3, [pc, #172]	@ (80023d8 <set_home+0x14c>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10b      	bne.n	8002348 <set_home+0xbc>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8002330:	2201      	movs	r2, #1
 8002332:	2140      	movs	r1, #64	@ 0x40
 8002334:	4826      	ldr	r0, [pc, #152]	@ (80023d0 <set_home+0x144>)
 8002336:	f002 fbf3 	bl	8004b20 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800233a:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <set_home+0x148>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38
				step = 1;
 8002342:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <set_home+0x13c>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
			}
		}
		if(step == 1){
 8002348:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <set_home+0x13c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d134      	bne.n	80023ba <set_home+0x12e>
			if(sensor_down == 0){
 8002350:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <set_home+0x140>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <set_home+0xe0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8002358:	2201      	movs	r2, #1
 800235a:	2140      	movs	r1, #64	@ 0x40
 800235c:	481c      	ldr	r0, [pc, #112]	@ (80023d0 <set_home+0x144>)
 800235e:	f002 fbdf 	bl	8004b20 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999*1.5/10.0);
 8002362:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <set_home+0x148>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2295      	movs	r2, #149	@ 0x95
 8002368:	639a      	str	r2, [r3, #56]	@ 0x38
				registerFrame[0x10].U16=0b0000;
				home = 0;
			}
		}
	}
}
 800236a:	e026      	b.n	80023ba <set_home+0x12e>
			else if(sensor_down == 1){
 800236c:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <set_home+0x140>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d122      	bne.n	80023ba <set_home+0x12e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2140      	movs	r1, #64	@ 0x40
 8002378:	4815      	ldr	r0, [pc, #84]	@ (80023d0 <set_home+0x144>)
 800237a:	f002 fbd1 	bl	8004b20 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <set_home+0x148>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2200      	movs	r2, #0
 8002384:	639a      	str	r2, [r3, #56]	@ 0x38
				__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <set_home+0x150>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24
				QEIdata.Position[NEW] = 0;
 800238e:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <set_home+0x154>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
				QEIEncoderPosVel_Update();
 8002394:	f000 fb30 	bl	80029f8 <QEIEncoderPosVel_Update>
				angular_position = 0.0;
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <set_home+0x158>)
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
				position = 0.0;
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <set_home+0x15c>)
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
				position_round = 0;
 80023a8:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <set_home+0x160>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
				registerFrame[0x10].U16=0b0000;
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <set_home+0x134>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	841a      	strh	r2, [r3, #32]
				home = 0;
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <set_home+0x138>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000e5c 	.word	0x20000e5c
 80023c4:	20000fec 	.word	0x20000fec
 80023c8:	200010d8 	.word	0x200010d8
 80023cc:	2000100f 	.word	0x2000100f
 80023d0:	48000400 	.word	0x48000400
 80023d4:	2000039c 	.word	0x2000039c
 80023d8:	2000100e 	.word	0x2000100e
 80023dc:	20000468 	.word	0x20000468
 80023e0:	20001048 	.word	0x20001048
 80023e4:	2000107c 	.word	0x2000107c
 80023e8:	20001074 	.word	0x20001074
 80023ec:	20001080 	.word	0x20001080

080023f0 <run_jogmode>:

void run_jogmode(){
 80023f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
	static int floor_counter = 0;
	if(registerFrame[0x01].U16==0b0100){
 80023f8:	4bb5      	ldr	r3, [pc, #724]	@ (80026d0 <run_jogmode+0x2e0>)
 80023fa:	885b      	ldrh	r3, [r3, #2]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d111      	bne.n	8002424 <run_jogmode+0x34>
		jog_mode = 1;
 8002400:	4bb4      	ldr	r3, [pc, #720]	@ (80026d4 <run_jogmode+0x2e4>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]
		pick_order = registerFrame[0x21].U16;
 8002406:	4bb2      	ldr	r3, [pc, #712]	@ (80026d0 <run_jogmode+0x2e0>)
 8002408:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800240c:	461a      	mov	r2, r3
 800240e:	4bb2      	ldr	r3, [pc, #712]	@ (80026d8 <run_jogmode+0x2e8>)
 8002410:	601a      	str	r2, [r3, #0]
		place_order = registerFrame[0x22].U16;
 8002412:	4baf      	ldr	r3, [pc, #700]	@ (80026d0 <run_jogmode+0x2e0>)
 8002414:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002418:	461a      	mov	r2, r3
 800241a:	4bb0      	ldr	r3, [pc, #704]	@ (80026dc <run_jogmode+0x2ec>)
 800241c:	601a      	str	r2, [r3, #0]
		floor_counter = 0;
 800241e:	4bb0      	ldr	r3, [pc, #704]	@ (80026e0 <run_jogmode+0x2f0>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
	}
	if(jog_mode == 1){
 8002424:	4bab      	ldr	r3, [pc, #684]	@ (80026d4 <run_jogmode+0x2e4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	f040 817d 	bne.w	8002728 <run_jogmode+0x338>
		if(floor_counter%2 == 0){
 800242e:	4bac      	ldr	r3, [pc, #688]	@ (80026e0 <run_jogmode+0x2f0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d123      	bne.n	8002482 <run_jogmode+0x92>
			registerFrame[0x10].U16=0b0100;//Go Pick
 800243a:	4ba5      	ldr	r3, [pc, #660]	@ (80026d0 <run_jogmode+0x2e0>)
 800243c:	2204      	movs	r2, #4
 800243e:	841a      	strh	r2, [r3, #32]
			gotofloor = pick_order%(int)pow(10,(floor_counter/2));
 8002440:	4ba5      	ldr	r3, [pc, #660]	@ (80026d8 <run_jogmode+0x2e8>)
 8002442:	681e      	ldr	r6, [r3, #0]
 8002444:	4ba6      	ldr	r3, [pc, #664]	@ (80026e0 <run_jogmode+0x2f0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0fda      	lsrs	r2, r3, #31
 800244a:	4413      	add	r3, r2
 800244c:	105b      	asrs	r3, r3, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f834 	bl	80004bc <__aeabi_i2d>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	ec43 2b11 	vmov	d1, r2, r3
 800245c:	ed9f 0b96 	vldr	d0, [pc, #600]	@ 80026b8 <run_jogmode+0x2c8>
 8002460:	f007 fb88 	bl	8009b74 <pow>
 8002464:	ec53 2b10 	vmov	r2, r3, d0
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fb40 	bl	8000af0 <__aeabi_d2iz>
 8002470:	4603      	mov	r3, r0
 8002472:	fb96 f2f3 	sdiv	r2, r6, r3
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	1af3      	subs	r3, r6, r3
 800247c:	4a99      	ldr	r2, [pc, #612]	@ (80026e4 <run_jogmode+0x2f4>)
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e023      	b.n	80024ca <run_jogmode+0xda>
		}
		else{
			registerFrame[0x10].U16=0b1000;//Go place
 8002482:	4b93      	ldr	r3, [pc, #588]	@ (80026d0 <run_jogmode+0x2e0>)
 8002484:	2208      	movs	r2, #8
 8002486:	841a      	strh	r2, [r3, #32]
			gotofloor = place_order%(int)pow(10,((floor_counter-1)/2));
 8002488:	4b94      	ldr	r3, [pc, #592]	@ (80026dc <run_jogmode+0x2ec>)
 800248a:	681e      	ldr	r6, [r3, #0]
 800248c:	4b94      	ldr	r3, [pc, #592]	@ (80026e0 <run_jogmode+0x2f0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3b01      	subs	r3, #1
 8002492:	0fda      	lsrs	r2, r3, #31
 8002494:	4413      	add	r3, r2
 8002496:	105b      	asrs	r3, r3, #1
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f80f 	bl	80004bc <__aeabi_i2d>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	ec43 2b11 	vmov	d1, r2, r3
 80024a6:	ed9f 0b84 	vldr	d0, [pc, #528]	@ 80026b8 <run_jogmode+0x2c8>
 80024aa:	f007 fb63 	bl	8009b74 <pow>
 80024ae:	ec53 2b10 	vmov	r2, r3, d0
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	f7fe fb1b 	bl	8000af0 <__aeabi_d2iz>
 80024ba:	4603      	mov	r3, r0
 80024bc:	fb96 f2f3 	sdiv	r2, r6, r3
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	1af3      	subs	r3, r6, r3
 80024c6:	4a87      	ldr	r2, [pc, #540]	@ (80026e4 <run_jogmode+0x2f4>)
 80024c8:	6013      	str	r3, [r2, #0]
		}
	  if (gotofloor == 1){
 80024ca:	4b86      	ldr	r3, [pc, #536]	@ (80026e4 <run_jogmode+0x2f4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d109      	bne.n	80024e6 <run_jogmode+0xf6>
		  setposition = z_floor[0];
 80024d2:	4b85      	ldr	r3, [pc, #532]	@ (80026e8 <run_jogmode+0x2f8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024de:	4b83      	ldr	r3, [pc, #524]	@ (80026ec <run_jogmode+0x2fc>)
 80024e0:	edc3 7a00 	vstr	s15, [r3]
 80024e4:	e036      	b.n	8002554 <run_jogmode+0x164>
	  }
	  else if (gotofloor == 2){
 80024e6:	4b7f      	ldr	r3, [pc, #508]	@ (80026e4 <run_jogmode+0x2f4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d109      	bne.n	8002502 <run_jogmode+0x112>
		  setposition = z_floor[1];
 80024ee:	4b7e      	ldr	r3, [pc, #504]	@ (80026e8 <run_jogmode+0x2f8>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fa:	4b7c      	ldr	r3, [pc, #496]	@ (80026ec <run_jogmode+0x2fc>)
 80024fc:	edc3 7a00 	vstr	s15, [r3]
 8002500:	e028      	b.n	8002554 <run_jogmode+0x164>
	  }
	  else if (gotofloor == 3){
 8002502:	4b78      	ldr	r3, [pc, #480]	@ (80026e4 <run_jogmode+0x2f4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d109      	bne.n	800251e <run_jogmode+0x12e>
		  setposition = z_floor[2];
 800250a:	4b77      	ldr	r3, [pc, #476]	@ (80026e8 <run_jogmode+0x2f8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002516:	4b75      	ldr	r3, [pc, #468]	@ (80026ec <run_jogmode+0x2fc>)
 8002518:	edc3 7a00 	vstr	s15, [r3]
 800251c:	e01a      	b.n	8002554 <run_jogmode+0x164>
	  }
	  else if (gotofloor == 4){
 800251e:	4b71      	ldr	r3, [pc, #452]	@ (80026e4 <run_jogmode+0x2f4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b04      	cmp	r3, #4
 8002524:	d109      	bne.n	800253a <run_jogmode+0x14a>
		  setposition = z_floor[3];
 8002526:	4b70      	ldr	r3, [pc, #448]	@ (80026e8 <run_jogmode+0x2f8>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002532:	4b6e      	ldr	r3, [pc, #440]	@ (80026ec <run_jogmode+0x2fc>)
 8002534:	edc3 7a00 	vstr	s15, [r3]
 8002538:	e00c      	b.n	8002554 <run_jogmode+0x164>
	  }
	  else if (gotofloor == 5){
 800253a:	4b6a      	ldr	r3, [pc, #424]	@ (80026e4 <run_jogmode+0x2f4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d108      	bne.n	8002554 <run_jogmode+0x164>
		  setposition = z_floor[4];
 8002542:	4b69      	ldr	r3, [pc, #420]	@ (80026e8 <run_jogmode+0x2f8>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254e:	4b67      	ldr	r3, [pc, #412]	@ (80026ec <run_jogmode+0x2fc>)
 8002550:	edc3 7a00 	vstr	s15, [r3]
	  }

	  trajectory();
 8002554:	f000 fb70 	bl	8002c38 <trajectory>


	  static uint64_t timestamp_velocity_PID = 0;
	  uint64_t currentTime = micros();
 8002558:	f000 fa34 	bl	80029c4 <micros>
 800255c:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  if(currentTime > timestamp_velocity_PID)
 8002560:	4b63      	ldr	r3, [pc, #396]	@ (80026f0 <run_jogmode+0x300>)
 8002562:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800256a:	4290      	cmp	r0, r2
 800256c:	eb71 0303 	sbcs.w	r3, r1, r3
 8002570:	d250      	bcs.n	8002614 <run_jogmode+0x224>
	  {
		  timestamp_velocity_PID = currentTime + 1000;//us
 8002572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002576:	f512 7a7a 	adds.w	sl, r2, #1000	@ 0x3e8
 800257a:	f143 0b00 	adc.w	fp, r3, #0
 800257e:	4b5c      	ldr	r3, [pc, #368]	@ (80026f0 <run_jogmode+0x300>)
 8002580:	e9c3 ab00 	strd	sl, fp, [r3]
		  QEIEncoderPosVel_Update();
 8002584:	f000 fa38 	bl	80029f8 <QEIEncoderPosVel_Update>
		  velocity = angular_velocity*14/2.0/M_PI;
 8002588:	4b5a      	ldr	r3, [pc, #360]	@ (80026f4 <run_jogmode+0x304>)
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8002592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002596:	ee17 0a90 	vmov	r0, s15
 800259a:	f7fd ffa1 	bl	80004e0 <__aeabi_f2d>
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80025a6:	f7fe f91d 	bl	80007e4 <__aeabi_ddiv>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	a343      	add	r3, pc, #268	@ (adr r3, 80026c0 <run_jogmode+0x2d0>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	f7fe f914 	bl	80007e4 <__aeabi_ddiv>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe fadc 	bl	8000b80 <__aeabi_d2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a4b      	ldr	r2, [pc, #300]	@ (80026f8 <run_jogmode+0x308>)
 80025cc:	6013      	str	r3, [r2, #0]
		  if(fabsf(setposition-position) < 0.15){
 80025ce:	4b47      	ldr	r3, [pc, #284]	@ (80026ec <run_jogmode+0x2fc>)
 80025d0:	ed93 7a00 	vldr	s14, [r3]
 80025d4:	4b49      	ldr	r3, [pc, #292]	@ (80026fc <run_jogmode+0x30c>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025de:	eef0 7ae7 	vabs.f32	s15, s15
 80025e2:	ee17 0a90 	vmov	r0, s15
 80025e6:	f7fd ff7b 	bl	80004e0 <__aeabi_f2d>
 80025ea:	a337      	add	r3, pc, #220	@ (adr r3, 80026c8 <run_jogmode+0x2d8>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fe fa40 	bl	8000a74 <__aeabi_dcmplt>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <run_jogmode+0x214>
			  Vfeedback = 0;
 80025fa:	4b41      	ldr	r3, [pc, #260]	@ (8002700 <run_jogmode+0x310>)
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e005      	b.n	8002610 <run_jogmode+0x220>
		  }
		  else{
			  velocity_PID();
 8002604:	f000 ffcc 	bl	80035a0 <velocity_PID>
			  Vfeedback = velocity_PID_output;
 8002608:	4b3e      	ldr	r3, [pc, #248]	@ (8002704 <run_jogmode+0x314>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a3c      	ldr	r2, [pc, #240]	@ (8002700 <run_jogmode+0x310>)
 800260e:	6013      	str	r3, [r2, #0]
		  }
		  setMotor();
 8002610:	f000 f8a0 	bl	8002754 <setMotor>
	  }

	  static uint64_t timestamp_position_PID = 0;
	  currentTime = micros();
 8002614:	f000 f9d6 	bl	80029c4 <micros>
 8002618:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  if(currentTime > timestamp_position_PID)
 800261c:	4b3a      	ldr	r3, [pc, #232]	@ (8002708 <run_jogmode+0x318>)
 800261e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002626:	4290      	cmp	r0, r2
 8002628:	eb71 0303 	sbcs.w	r3, r1, r3
 800262c:	d20c      	bcs.n	8002648 <run_jogmode+0x258>
	  {
		  timestamp_position_PID = currentTime + 5000;//us
 800262e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002632:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002636:	eb12 0801 	adds.w	r8, r2, r1
 800263a:	f143 0900 	adc.w	r9, r3, #0
 800263e:	4b32      	ldr	r3, [pc, #200]	@ (8002708 <run_jogmode+0x318>)
 8002640:	e9c3 8900 	strd	r8, r9, [r3]
		  position_PID();
 8002644:	f001 f876 	bl	8003734 <position_PID>
	  }
	  if(fabsf(setposition-position) < 0.15){
 8002648:	4b28      	ldr	r3, [pc, #160]	@ (80026ec <run_jogmode+0x2fc>)
 800264a:	ed93 7a00 	vldr	s14, [r3]
 800264e:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <run_jogmode+0x30c>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002658:	eef0 7ae7 	vabs.f32	s15, s15
 800265c:	ee17 0a90 	vmov	r0, s15
 8002660:	f7fd ff3e 	bl	80004e0 <__aeabi_f2d>
 8002664:	a318      	add	r3, pc, #96	@ (adr r3, 80026c8 <run_jogmode+0x2d8>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fe fa03 	bl	8000a74 <__aeabi_dcmplt>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d059      	beq.n	8002728 <run_jogmode+0x338>
		  static uint64_t timestamp_gripper = 0;
		  uint64_t currentTime = micros();
 8002674:	f000 f9a6 	bl	80029c4 <micros>
 8002678:	e9c7 0100 	strd	r0, r1, [r7]
		  static uint8_t time_counter = 0;
		  if(currentTime > timestamp_gripper){
 800267c:	4b23      	ldr	r3, [pc, #140]	@ (800270c <run_jogmode+0x31c>)
 800267e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002686:	4290      	cmp	r0, r2
 8002688:	eb71 0303 	sbcs.w	r3, r1, r3
 800268c:	d24c      	bcs.n	8002728 <run_jogmode+0x338>
			  timestamp_gripper = micros()+2000000;
 800268e:	f000 f999 	bl	80029c4 <micros>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	491e      	ldr	r1, [pc, #120]	@ (8002710 <run_jogmode+0x320>)
 8002698:	1854      	adds	r4, r2, r1
 800269a:	f143 0500 	adc.w	r5, r3, #0
 800269e:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <run_jogmode+0x31c>)
 80026a0:	e9c3 4500 	strd	r4, r5, [r3]
			  if(time_counter == 0){
 80026a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <run_jogmode+0x324>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d135      	bne.n	8002718 <run_jogmode+0x328>
				  time_counter = 1;
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <run_jogmode+0x324>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e039      	b.n	8002728 <run_jogmode+0x338>
 80026b4:	f3af 8000 	nop.w
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40240000 	.word	0x40240000
 80026c0:	54442d18 	.word	0x54442d18
 80026c4:	400921fb 	.word	0x400921fb
 80026c8:	33333333 	.word	0x33333333
 80026cc:	3fc33333 	.word	0x3fc33333
 80026d0:	20000e5c 	.word	0x20000e5c
 80026d4:	20000ff8 	.word	0x20000ff8
 80026d8:	20001000 	.word	0x20001000
 80026dc:	20000ffc 	.word	0x20000ffc
 80026e0:	200010dc 	.word	0x200010dc
 80026e4:	20001044 	.word	0x20001044
 80026e8:	20000214 	.word	0x20000214
 80026ec:	20001038 	.word	0x20001038
 80026f0:	200010e0 	.word	0x200010e0
 80026f4:	20001078 	.word	0x20001078
 80026f8:	20001070 	.word	0x20001070
 80026fc:	20001074 	.word	0x20001074
 8002700:	2000103c 	.word	0x2000103c
 8002704:	200010b0 	.word	0x200010b0
 8002708:	200010e8 	.word	0x200010e8
 800270c:	200010f0 	.word	0x200010f0
 8002710:	001e8480 	.word	0x001e8480
 8002714:	200010f8 	.word	0x200010f8
			  }
			  else{
				  floor_counter++;
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <run_jogmode+0x358>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <run_jogmode+0x358>)
 8002720:	6013      	str	r3, [r2, #0]
				  time_counter = 0;
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <run_jogmode+0x35c>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	}
	if(floor_counter > 9){
 8002728:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <run_jogmode+0x358>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b09      	cmp	r3, #9
 800272e:	dd05      	ble.n	800273c <run_jogmode+0x34c>
		registerFrame[0x10].U16=0b0000;
 8002730:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <run_jogmode+0x360>)
 8002732:	2200      	movs	r2, #0
 8002734:	841a      	strh	r2, [r3, #32]
		floor_counter = 0;
 8002736:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <run_jogmode+0x358>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
	}
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002746:	bf00      	nop
 8002748:	200010dc 	.word	0x200010dc
 800274c:	200010f8 	.word	0x200010f8
 8002750:	20000e5c 	.word	0x20000e5c

08002754 <setMotor>:

void setMotor()
{
 8002754:	b598      	push	{r3, r4, r7, lr}
 8002756:	af00      	add	r7, sp, #0

	if(Vfeedback > 24){
 8002758:	4b3c      	ldr	r3, [pc, #240]	@ (800284c <setMotor+0xf8>)
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8002762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	dd07      	ble.n	800277c <setMotor+0x28>
		registerFrame[0x00].U16=22881;
 800276c:	4b38      	ldr	r3, [pc, #224]	@ (8002850 <setMotor+0xfc>)
 800276e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002772:	801a      	strh	r2, [r3, #0]
		Vfeedback = 24;
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <setMotor+0xf8>)
 8002776:	4a37      	ldr	r2, [pc, #220]	@ (8002854 <setMotor+0x100>)
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e010      	b.n	800279e <setMotor+0x4a>
	}
	else if(Vfeedback < -24){
 800277c:	4b33      	ldr	r3, [pc, #204]	@ (800284c <setMotor+0xf8>)
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8002786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	d506      	bpl.n	800279e <setMotor+0x4a>
		registerFrame[0x00].U16=22881;
 8002790:	4b2f      	ldr	r3, [pc, #188]	@ (8002850 <setMotor+0xfc>)
 8002792:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002796:	801a      	strh	r2, [r3, #0]
		Vfeedback = -24;
 8002798:	4b2c      	ldr	r3, [pc, #176]	@ (800284c <setMotor+0xf8>)
 800279a:	4a2f      	ldr	r2, [pc, #188]	@ (8002858 <setMotor+0x104>)
 800279c:	601a      	str	r2, [r3, #0]
	}
	if(Vfeedback > 0){
 800279e:	4b2b      	ldr	r3, [pc, #172]	@ (800284c <setMotor+0xf8>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ac:	dd26      	ble.n	80027fc <setMotor+0xa8>
		registerFrame[0x00].U16=22881;
 80027ae:	4b28      	ldr	r3, [pc, #160]	@ (8002850 <setMotor+0xfc>)
 80027b0:	f645 1261 	movw	r2, #22881	@ 0x5961
 80027b4:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2140      	movs	r1, #64	@ 0x40
 80027ba:	4828      	ldr	r0, [pc, #160]	@ (800285c <setMotor+0x108>)
 80027bc:	f002 f9b0 	bl	8004b20 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (int)Vfeedback*999/24.0);
 80027c0:	4b22      	ldr	r3, [pc, #136]	@ (800284c <setMotor+0xf8>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ca:	ee17 2a90 	vmov	r2, s15
 80027ce:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fe70 	bl	80004bc <__aeabi_i2d>
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <setMotor+0x10c>)
 80027e2:	f7fd ffff 	bl	80007e4 <__aeabi_ddiv>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	491e      	ldr	r1, [pc, #120]	@ (8002864 <setMotor+0x110>)
 80027ec:	680c      	ldr	r4, [r1, #0]
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe f9a5 	bl	8000b40 <__aeabi_d2uiz>
 80027f6:	4603      	mov	r3, r0
 80027f8:	63a3      	str	r3, [r4, #56]	@ 0x38
	else{
		registerFrame[0x00].U16=22881;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (int)Vfeedback*(-999)/24.0);
	}
}
 80027fa:	e024      	b.n	8002846 <setMotor+0xf2>
		registerFrame[0x00].U16=22881;
 80027fc:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <setMotor+0xfc>)
 80027fe:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002802:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
 8002804:	2201      	movs	r2, #1
 8002806:	2140      	movs	r1, #64	@ 0x40
 8002808:	4814      	ldr	r0, [pc, #80]	@ (800285c <setMotor+0x108>)
 800280a:	f002 f989 	bl	8004b20 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (int)Vfeedback*(-999)/24.0);
 800280e:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <setMotor+0xf8>)
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002818:	ee17 2a90 	vmov	r2, s15
 800281c:	4b12      	ldr	r3, [pc, #72]	@ (8002868 <setMotor+0x114>)
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe4a 	bl	80004bc <__aeabi_i2d>
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <setMotor+0x10c>)
 800282e:	f7fd ffd9 	bl	80007e4 <__aeabi_ddiv>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	490b      	ldr	r1, [pc, #44]	@ (8002864 <setMotor+0x110>)
 8002838:	680c      	ldr	r4, [r1, #0]
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fe f97f 	bl	8000b40 <__aeabi_d2uiz>
 8002842:	4603      	mov	r3, r0
 8002844:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8002846:	bf00      	nop
 8002848:	bd98      	pop	{r3, r4, r7, pc}
 800284a:	bf00      	nop
 800284c:	2000103c 	.word	0x2000103c
 8002850:	20000e5c 	.word	0x20000e5c
 8002854:	41c00000 	.word	0x41c00000
 8002858:	c1c00000 	.word	0xc1c00000
 800285c:	48000400 	.word	0x48000400
 8002860:	40380000 	.word	0x40380000
 8002864:	2000039c 	.word	0x2000039c
 8002868:	fffffc19 	.word	0xfffffc19

0800286c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a06      	ldr	r2, [pc, #24]	@ (8002890 <HAL_UART_RxCpltCallback+0x24>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d102      	bne.n	8002882 <HAL_UART_RxCpltCallback+0x16>
		{
			//(for string only) Add string stop symbol \0 to end string
			RxBuffer[9] = '\0';
 800287c:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <HAL_UART_RxCpltCallback+0x28>)
 800287e:	2200      	movs	r2, #0
 8002880:	725a      	strb	r2, [r3, #9]
		}
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	200006cc 	.word	0x200006cc
 8002894:	20001004 	.word	0x20001004

08002898 <UARTDMAConfig>:

void UARTDMAConfig()
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	//start UART in DMA mode
	HAL_UART_Receive_DMA(&huart1, RxBuffer,9);
 800289c:	2209      	movs	r2, #9
 800289e:	4903      	ldr	r1, [pc, #12]	@ (80028ac <UARTDMAConfig+0x14>)
 80028a0:	4803      	ldr	r0, [pc, #12]	@ (80028b0 <UARTDMAConfig+0x18>)
 80028a2:	f005 fba1 	bl	8007fe8 <HAL_UART_Receive_DMA>
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20001004 	.word	0x20001004
 80028b0:	200006cc 	.word	0x200006cc

080028b4 <update_position>:

void update_position()
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
	static int floor = -1;
	floor = RxBuffer[6]-'0'-1;
 80028b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002978 <update_position+0xc4>)
 80028ba:	799b      	ldrb	r3, [r3, #6]
 80028bc:	3b31      	subs	r3, #49	@ 0x31
 80028be:	4a2f      	ldr	r2, [pc, #188]	@ (800297c <update_position+0xc8>)
 80028c0:	6013      	str	r3, [r2, #0]
	x_target_position = (RxBuffer[0]-'0')*100+(RxBuffer[1]-'0')*10+(RxBuffer[2]-'0');
 80028c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <update_position+0xc4>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	3b30      	subs	r3, #48	@ 0x30
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	0092      	lsls	r2, r2, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	0091      	lsls	r1, r2, #2
 80028d4:	461a      	mov	r2, r3
 80028d6:	460b      	mov	r3, r1
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	b29a      	uxth	r2, r3
 80028de:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <update_position+0xc4>)
 80028e0:	785b      	ldrb	r3, [r3, #1]
 80028e2:	3b30      	subs	r3, #48	@ 0x30
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	0089      	lsls	r1, r1, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4a20      	ldr	r2, [pc, #128]	@ (8002978 <update_position+0xc4>)
 80028f6:	7892      	ldrb	r2, [r2, #2]
 80028f8:	4413      	add	r3, r2
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b30      	subs	r3, #48	@ 0x30
 80028fe:	b29a      	uxth	r2, r3
 8002900:	4b1f      	ldr	r3, [pc, #124]	@ (8002980 <update_position+0xcc>)
 8002902:	801a      	strh	r2, [r3, #0]
	z_target_position = (RxBuffer[3]-'0')*100+(RxBuffer[4]-'0')*10+(RxBuffer[5]-'0');
 8002904:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <update_position+0xc4>)
 8002906:	78db      	ldrb	r3, [r3, #3]
 8002908:	3b30      	subs	r3, #48	@ 0x30
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4413      	add	r3, r2
 8002912:	461a      	mov	r2, r3
 8002914:	0091      	lsls	r1, r2, #2
 8002916:	461a      	mov	r2, r3
 8002918:	460b      	mov	r3, r1
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <update_position+0xc4>)
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	3b30      	subs	r3, #48	@ 0x30
 8002926:	b29b      	uxth	r3, r3
 8002928:	4619      	mov	r1, r3
 800292a:	0089      	lsls	r1, r1, #2
 800292c:	440b      	add	r3, r1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	b29b      	uxth	r3, r3
 8002932:	4413      	add	r3, r2
 8002934:	b29b      	uxth	r3, r3
 8002936:	4a10      	ldr	r2, [pc, #64]	@ (8002978 <update_position+0xc4>)
 8002938:	7952      	ldrb	r2, [r2, #5]
 800293a:	4413      	add	r3, r2
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b30      	subs	r3, #48	@ 0x30
 8002940:	b29a      	uxth	r2, r3
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <update_position+0xd0>)
 8002944:	801a      	strh	r2, [r3, #0]
	if(floor >= 0){
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <update_position+0xc8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0f      	blt.n	800296e <update_position+0xba>
		x_floor[floor] = x_target_position;
 800294e:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <update_position+0xcc>)
 8002950:	881a      	ldrh	r2, [r3, #0]
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <update_position+0xc8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4611      	mov	r1, r2
 8002958:	4a0b      	ldr	r2, [pc, #44]	@ (8002988 <update_position+0xd4>)
 800295a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		z_floor[floor] = z_target_position;
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <update_position+0xd0>)
 8002960:	881a      	ldrh	r2, [r3, #0]
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <update_position+0xc8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4611      	mov	r1, r2
 8002968:	4a08      	ldr	r2, [pc, #32]	@ (800298c <update_position+0xd8>)
 800296a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	20001004 	.word	0x20001004
 800297c:	2000023c 	.word	0x2000023c
 8002980:	20001012 	.word	0x20001012
 8002984:	20001010 	.word	0x20001010
 8002988:	20000200 	.word	0x20000200
 800298c:	20000214 	.word	0x20000214

08002990 <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b4b0      	push	{r4, r5, r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a08      	ldr	r2, [pc, #32]	@ (80029bc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d108      	bne.n	80029b2 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	1e54      	subs	r4, r2, #1
 80029a8:	f143 0500 	adc.w	r5, r3, #0
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80029ae:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bcb0      	pop	{r4, r5, r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000534 	.word	0x20000534
 80029c0:	20001068 	.word	0x20001068

080029c4 <micros>:

uint64_t micros()
{
 80029c4:	b4b0      	push	{r4, r5, r7}
 80029c6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80029c8:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <micros+0x2c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	2200      	movs	r2, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	4611      	mov	r1, r2
 80029d4:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <micros+0x30>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	1884      	adds	r4, r0, r2
 80029dc:	eb41 0503 	adc.w	r5, r1, r3
 80029e0:	4622      	mov	r2, r4
 80029e2:	462b      	mov	r3, r5
}
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bcb0      	pop	{r4, r5, r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000534 	.word	0x20000534
 80029f4:	20001068 	.word	0x20001068

080029f8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 80029fe:	f7ff ffe1 	bl	80029c4 <micros>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4982      	ldr	r1, [pc, #520]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002a08:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8002a0c:	4b81      	ldr	r3, [pc, #516]	@ (8002c14 <QEIEncoderPosVel_Update+0x21c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	4a7f      	ldr	r2, [pc, #508]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002a14:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 2048;
 8002a16:	4b7e      	ldr	r3, [pc, #504]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	4b7a      	ldr	r3, [pc, #488]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002a28:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002a2c:	4b78      	ldr	r3, [pc, #480]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b77      	ldr	r3, [pc, #476]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > 31744){
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 8002a3e:	dd08      	ble.n	8002a52 <QEIEncoderPosVel_Update+0x5a>
		diffPosition -=63488;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8002a46:	607b      	str	r3, [r7, #4]
		counter--;
 8002a48:	4b73      	ldr	r3, [pc, #460]	@ (8002c18 <QEIEncoderPosVel_Update+0x220>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	4a72      	ldr	r2, [pc, #456]	@ (8002c18 <QEIEncoderPosVel_Update+0x220>)
 8002a50:	6013      	str	r3, [r2, #0]
	}
	if(diffPosition < -31744){
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f513 4ff8 	cmn.w	r3, #31744	@ 0x7c00
 8002a58:	da08      	bge.n	8002a6c <QEIEncoderPosVel_Update+0x74>
		diffPosition +=63488;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f503 4378 	add.w	r3, r3, #63488	@ 0xf800
 8002a60:	607b      	str	r3, [r7, #4]
		counter++;
 8002a62:	4b6d      	ldr	r3, [pc, #436]	@ (8002c18 <QEIEncoderPosVel_Update+0x220>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	4a6b      	ldr	r2, [pc, #428]	@ (8002c18 <QEIEncoderPosVel_Update+0x220>)
 8002a6a:	6013      	str	r3, [r2, #0]
	}
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8002a6c:	4b68      	ldr	r3, [pc, #416]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002a6e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a72:	4b67      	ldr	r3, [pc, #412]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002a74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a78:	1a84      	subs	r4, r0, r2
 8002a7a:	eb61 0503 	sbc.w	r5, r1, r3
 8002a7e:	4620      	mov	r0, r4
 8002a80:	4629      	mov	r1, r5
 8002a82:	f7fd fd4f 	bl	8000524 <__aeabi_ul2d>
 8002a86:	a35c      	add	r3, pc, #368	@ (adr r3, 8002bf8 <QEIEncoderPosVel_Update+0x200>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fd80 	bl	8000590 <__aeabi_dmul>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f872 	bl	8000b80 <__aeabi_d2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002aaa:	ed97 7a00 	vldr	s14, [r7]
 8002aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab2:	4b57      	ldr	r3, [pc, #348]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002ab4:	edc3 7a07 	vstr	s15, [r3, #28]

	angular_velocity = QEIdata.QEIAngularVelocity/2048.0*2*M_PI;
 8002ab8:	4b55      	ldr	r3, [pc, #340]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fd0f 	bl	80004e0 <__aeabi_f2d>
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	4b55      	ldr	r3, [pc, #340]	@ (8002c1c <QEIEncoderPosVel_Update+0x224>)
 8002ac8:	f7fd fe8c 	bl	80007e4 <__aeabi_ddiv>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	f7fd fba4 	bl	8000224 <__adddf3>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	a346      	add	r3, pc, #280	@ (adr r3, 8002c00 <QEIEncoderPosVel_Update+0x208>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fd51 	bl	8000590 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f843 	bl	8000b80 <__aeabi_d2f>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4a48      	ldr	r2, [pc, #288]	@ (8002c20 <QEIEncoderPosVel_Update+0x228>)
 8002afe:	6013      	str	r3, [r2, #0]
	angular_position = (QEIdata.Position[NEW]%2048)/2048.0*2*M_PI;
 8002b00:	4b43      	ldr	r3, [pc, #268]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fcc7 	bl	800049c <__aeabi_ui2d>
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	4b42      	ldr	r3, [pc, #264]	@ (8002c1c <QEIEncoderPosVel_Update+0x224>)
 8002b14:	f7fd fe66 	bl	80007e4 <__aeabi_ddiv>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	f7fd fb7e 	bl	8000224 <__adddf3>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	a333      	add	r3, pc, #204	@ (adr r3, 8002c00 <QEIEncoderPosVel_Update+0x208>)
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	f7fd fd2b 	bl	8000590 <__aeabi_dmul>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fe f81d 	bl	8000b80 <__aeabi_d2f>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4a36      	ldr	r2, [pc, #216]	@ (8002c24 <QEIEncoderPosVel_Update+0x22c>)
 8002b4a:	6013      	str	r3, [r2, #0]
	position_round = (counter*31)+(int)(QEIdata.Position[NEW]/2048.0);
 8002b4c:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <QEIEncoderPosVel_Update+0x220>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	015b      	lsls	r3, r3, #5
 8002b54:	1a9c      	subs	r4, r3, r2
 8002b56:	4b2e      	ldr	r3, [pc, #184]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fc9e 	bl	800049c <__aeabi_ui2d>
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <QEIEncoderPosVel_Update+0x224>)
 8002b66:	f7fd fe3d 	bl	80007e4 <__aeabi_ddiv>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f7fd ffbd 	bl	8000af0 <__aeabi_d2iz>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4423      	add	r3, r4
 8002b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c28 <QEIEncoderPosVel_Update+0x230>)
 8002b7c:	6013      	str	r3, [r2, #0]
	position = ((angular_position)/(2.0*M_PI)*14)+(14*position_round);
 8002b7e:	4b29      	ldr	r3, [pc, #164]	@ (8002c24 <QEIEncoderPosVel_Update+0x22c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fcac 	bl	80004e0 <__aeabi_f2d>
 8002b88:	a31f      	add	r3, pc, #124	@ (adr r3, 8002c08 <QEIEncoderPosVel_Update+0x210>)
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	f7fd fe29 	bl	80007e4 <__aeabi_ddiv>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	4b23      	ldr	r3, [pc, #140]	@ (8002c2c <QEIEncoderPosVel_Update+0x234>)
 8002ba0:	f7fd fcf6 	bl	8000590 <__aeabi_dmul>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4614      	mov	r4, r2
 8002baa:	461d      	mov	r5, r3
 8002bac:	4b1e      	ldr	r3, [pc, #120]	@ (8002c28 <QEIEncoderPosVel_Update+0x230>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fc7f 	bl	80004bc <__aeabi_i2d>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	f7fd fb2d 	bl	8000224 <__adddf3>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f7fd ffd5 	bl	8000b80 <__aeabi_d2f>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <QEIEncoderPosVel_Update+0x238>)
 8002bda:	6013      	str	r3, [r2, #0]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0b      	ldr	r2, [pc, #44]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002be2:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002be4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002be6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bea:	4909      	ldr	r1, [pc, #36]	@ (8002c10 <QEIEncoderPosVel_Update+0x218>)
 8002bec:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf8:	a0b5ed8d 	.word	0xa0b5ed8d
 8002bfc:	3eb0c6f7 	.word	0x3eb0c6f7
 8002c00:	54442d18 	.word	0x54442d18
 8002c04:	400921fb 	.word	0x400921fb
 8002c08:	54442d18 	.word	0x54442d18
 8002c0c:	401921fb 	.word	0x401921fb
 8002c10:	20001048 	.word	0x20001048
 8002c14:	20000468 	.word	0x20000468
 8002c18:	20001084 	.word	0x20001084
 8002c1c:	40a00000 	.word	0x40a00000
 8002c20:	20001078 	.word	0x20001078
 8002c24:	2000107c 	.word	0x2000107c
 8002c28:	20001080 	.word	0x20001080
 8002c2c:	402c0000 	.word	0x402c0000
 8002c30:	20001074 	.word	0x20001074
 8002c34:	00000000 	.word	0x00000000

08002c38 <trajectory>:

void trajectory(){
 8002c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
	static uint32_t Timestamp;
	if(trajec_target != 0 && trajec_state == 0){
 8002c40:	4b81      	ldr	r3, [pc, #516]	@ (8002e48 <trajectory+0x210>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4e:	d00d      	beq.n	8002c6c <trajectory+0x34>
 8002c50:	4b7e      	ldr	r3, [pc, #504]	@ (8002e4c <trajectory+0x214>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <trajectory+0x34>
		trajec_state = 1;
 8002c58:	4b7c      	ldr	r3, [pc, #496]	@ (8002e4c <trajectory+0x214>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
		Timestamp = HAL_GetTick();
 8002c5e:	f001 f977 	bl	8003f50 <HAL_GetTick>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4a7a      	ldr	r2, [pc, #488]	@ (8002e50 <trajectory+0x218>)
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	f000 bc6c 	b.w	8003544 <trajectory+0x90c>
	}
	else if(trajec_state == 1 && trajec_target >= 0){
 8002c6c:	4b77      	ldr	r3, [pc, #476]	@ (8002e4c <trajectory+0x214>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 821b 	bne.w	80030ac <trajectory+0x474>
 8002c76:	4b74      	ldr	r3, [pc, #464]	@ (8002e48 <trajectory+0x210>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c84:	f2c0 8212 	blt.w	80030ac <trajectory+0x474>
		float t = ((HAL_GetTick() - Timestamp)*0.001)+0.001;
 8002c88:	f001 f962 	bl	8003f50 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b70      	ldr	r3, [pc, #448]	@ (8002e50 <trajectory+0x218>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc01 	bl	800049c <__aeabi_ui2d>
 8002c9a:	a367      	add	r3, pc, #412	@ (adr r3, 8002e38 <trajectory+0x200>)
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	f7fd fc76 	bl	8000590 <__aeabi_dmul>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	a362      	add	r3, pc, #392	@ (adr r3, 8002e38 <trajectory+0x200>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd fab7 	bl	8000224 <__adddf3>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7fd ff5f 	bl	8000b80 <__aeabi_d2f>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	60fb      	str	r3, [r7, #12]
		float time = (-100 + sqrt(10000 + (2000*trajec_target)))/1000;
 8002cc6:	4b60      	ldr	r3, [pc, #384]	@ (8002e48 <trajectory+0x210>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8002e54 <trajectory+0x21c>
 8002cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd4:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8002e58 <trajectory+0x220>
 8002cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cdc:	ee17 0a90 	vmov	r0, s15
 8002ce0:	f7fd fbfe 	bl	80004e0 <__aeabi_f2d>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	ec43 2b10 	vmov	d0, r2, r3
 8002cec:	f006 ffb2 	bl	8009c54 <sqrt>
 8002cf0:	ec51 0b10 	vmov	r0, r1, d0
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	4b58      	ldr	r3, [pc, #352]	@ (8002e5c <trajectory+0x224>)
 8002cfa:	f7fd fa91 	bl	8000220 <__aeabi_dsub>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	4b55      	ldr	r3, [pc, #340]	@ (8002e60 <trajectory+0x228>)
 8002d0c:	f7fd fd6a 	bl	80007e4 <__aeabi_ddiv>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f7fd ff32 	bl	8000b80 <__aeabi_d2f>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	60bb      	str	r3, [r7, #8]
		if(HAL_GetTick() - Timestamp <= (time*1000)){
 8002d20:	f001 f916 	bl	8003f50 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b4a      	ldr	r3, [pc, #296]	@ (8002e50 <trajectory+0x218>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d38:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002e64 <trajectory+0x22c>
 8002d3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d48:	d81e      	bhi.n	8002d88 <trajectory+0x150>
			trajec_acceleration = 500.0;
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <trajectory+0x230>)
 8002d4c:	4a47      	ldr	r2, [pc, #284]	@ (8002e6c <trajectory+0x234>)
 8002d4e:	601a      	str	r2, [r3, #0]
			trajec_velocity = 500*t;
 8002d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d54:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002e70 <trajectory+0x238>
 8002d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5c:	4b45      	ldr	r3, [pc, #276]	@ (8002e74 <trajectory+0x23c>)
 8002d5e:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = (250*t*t)+p0;
 8002d62:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d66:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002e78 <trajectory+0x240>
 8002d6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d76:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <trajectory+0x244>)
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d80:	4b3f      	ldr	r3, [pc, #252]	@ (8002e80 <trajectory+0x248>)
 8002d82:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target >= 0){
 8002d86:	e3dd      	b.n	8003544 <trajectory+0x90c>
		}
		else if(HAL_GetTick() - Timestamp <= ((time+0.2)*1000)){
 8002d88:	f001 f8e2 	bl	8003f50 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b30      	ldr	r3, [pc, #192]	@ (8002e50 <trajectory+0x218>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fb81 	bl	800049c <__aeabi_ui2d>
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	460d      	mov	r5, r1
 8002d9e:	68b8      	ldr	r0, [r7, #8]
 8002da0:	f7fd fb9e 	bl	80004e0 <__aeabi_f2d>
 8002da4:	a326      	add	r3, pc, #152	@ (adr r3, 8002e40 <trajectory+0x208>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fa3b 	bl	8000224 <__adddf3>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	4b29      	ldr	r3, [pc, #164]	@ (8002e60 <trajectory+0x228>)
 8002dbc:	f7fd fbe8 	bl	8000590 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	f7fd fe5e 	bl	8000a88 <__aeabi_dcmple>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d058      	beq.n	8002e84 <trajectory+0x24c>
			trajec_acceleration = 0;
 8002dd2:	4b25      	ldr	r3, [pc, #148]	@ (8002e68 <trajectory+0x230>)
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
			trajec_velocity = 500*time;
 8002dda:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dde:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002e70 <trajectory+0x238>
 8002de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de6:	4b23      	ldr	r3, [pc, #140]	@ (8002e74 <trajectory+0x23c>)
 8002de8:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = ((500*time*(t-time))+(250*time*time))+p0;
 8002dec:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002e70 <trajectory+0x238>
 8002df4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002df8:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e08:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e0c:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002e78 <trajectory+0x240>
 8002e10:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e20:	4b16      	ldr	r3, [pc, #88]	@ (8002e7c <trajectory+0x244>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2a:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <trajectory+0x248>)
 8002e2c:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target >= 0){
 8002e30:	e388      	b.n	8003544 <trajectory+0x90c>
 8002e32:	bf00      	nop
 8002e34:	f3af 8000 	nop.w
 8002e38:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e3c:	3f50624d 	.word	0x3f50624d
 8002e40:	9999999a 	.word	0x9999999a
 8002e44:	3fc99999 	.word	0x3fc99999
 8002e48:	20001094 	.word	0x20001094
 8002e4c:	20001098 	.word	0x20001098
 8002e50:	200010fc 	.word	0x200010fc
 8002e54:	44fa0000 	.word	0x44fa0000
 8002e58:	461c4000 	.word	0x461c4000
 8002e5c:	40590000 	.word	0x40590000
 8002e60:	408f4000 	.word	0x408f4000
 8002e64:	447a0000 	.word	0x447a0000
 8002e68:	20001090 	.word	0x20001090
 8002e6c:	43fa0000 	.word	0x43fa0000
 8002e70:	43fa0000 	.word	0x43fa0000
 8002e74:	2000108c 	.word	0x2000108c
 8002e78:	437a0000 	.word	0x437a0000
 8002e7c:	2000109c 	.word	0x2000109c
 8002e80:	20001088 	.word	0x20001088
		}
		else if(HAL_GetTick() - Timestamp <= (((time*2)+0.2)*1000)){
 8002e84:	f001 f864 	bl	8003f50 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4bd9      	ldr	r3, [pc, #868]	@ (80031f0 <trajectory+0x5b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fb03 	bl	800049c <__aeabi_ui2d>
 8002e96:	4604      	mov	r4, r0
 8002e98:	460d      	mov	r5, r1
 8002e9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ea2:	ee17 0a90 	vmov	r0, s15
 8002ea6:	f7fd fb1b 	bl	80004e0 <__aeabi_f2d>
 8002eaa:	a3c9      	add	r3, pc, #804	@ (adr r3, 80031d0 <trajectory+0x598>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd f9b8 	bl	8000224 <__adddf3>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	4bcc      	ldr	r3, [pc, #816]	@ (80031f4 <trajectory+0x5bc>)
 8002ec2:	f7fd fb65 	bl	8000590 <__aeabi_dmul>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4620      	mov	r0, r4
 8002ecc:	4629      	mov	r1, r5
 8002ece:	f7fd fddb 	bl	8000a88 <__aeabi_dcmple>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80d9 	beq.w	800308c <trajectory+0x454>
			trajec_acceleration = -500.0;
 8002eda:	4bc7      	ldr	r3, [pc, #796]	@ (80031f8 <trajectory+0x5c0>)
 8002edc:	4ac7      	ldr	r2, [pc, #796]	@ (80031fc <trajectory+0x5c4>)
 8002ede:	601a      	str	r2, [r3, #0]
			trajec_velocity = (-500*(t-time-0.2))+(500*time);
 8002ee0:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eec:	ee17 0a90 	vmov	r0, s15
 8002ef0:	f7fd faf6 	bl	80004e0 <__aeabi_f2d>
 8002ef4:	a3b6      	add	r3, pc, #728	@ (adr r3, 80031d0 <trajectory+0x598>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd f991 	bl	8000220 <__aeabi_dsub>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	a3b4      	add	r3, pc, #720	@ (adr r3, 80031d8 <trajectory+0x5a0>)
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f7fd fb40 	bl	8000590 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4614      	mov	r4, r2
 8002f16:	461d      	mov	r5, r3
 8002f18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f1c:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8003200 <trajectory+0x5c8>
 8002f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f24:	ee17 0a90 	vmov	r0, s15
 8002f28:	f7fd fada 	bl	80004e0 <__aeabi_f2d>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4620      	mov	r0, r4
 8002f32:	4629      	mov	r1, r5
 8002f34:	f7fd f976 	bl	8000224 <__adddf3>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd fe1e 	bl	8000b80 <__aeabi_d2f>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4aaf      	ldr	r2, [pc, #700]	@ (8003204 <trajectory+0x5cc>)
 8002f48:	6013      	str	r3, [r2, #0]
			trajec_position = ((-250*(t-time-0.2)*(t-time-0.2))+(500*time*(t-time-0.2))+(250*time*time)+(100*time))+p0;
 8002f4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f56:	ee17 0a90 	vmov	r0, s15
 8002f5a:	f7fd fac1 	bl	80004e0 <__aeabi_f2d>
 8002f5e:	a39c      	add	r3, pc, #624	@ (adr r3, 80031d0 <trajectory+0x598>)
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f7fd f95c 	bl	8000220 <__aeabi_dsub>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	a39b      	add	r3, pc, #620	@ (adr r3, 80031e0 <trajectory+0x5a8>)
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f7fd fb0b 	bl	8000590 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4614      	mov	r4, r2
 8002f80:	461d      	mov	r5, r3
 8002f82:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8e:	ee17 0a90 	vmov	r0, s15
 8002f92:	f7fd faa5 	bl	80004e0 <__aeabi_f2d>
 8002f96:	a38e      	add	r3, pc, #568	@ (adr r3, 80031d0 <trajectory+0x598>)
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f7fd f940 	bl	8000220 <__aeabi_dsub>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	f7fd faf2 	bl	8000590 <__aeabi_dmul>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4690      	mov	r8, r2
 8002fb2:	4699      	mov	r9, r3
 8002fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fb8:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003200 <trajectory+0x5c8>
 8002fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc0:	ee17 0a90 	vmov	r0, s15
 8002fc4:	f7fd fa8c 	bl	80004e0 <__aeabi_f2d>
 8002fc8:	4604      	mov	r4, r0
 8002fca:	460d      	mov	r5, r1
 8002fcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd8:	ee17 0a90 	vmov	r0, s15
 8002fdc:	f7fd fa80 	bl	80004e0 <__aeabi_f2d>
 8002fe0:	a37b      	add	r3, pc, #492	@ (adr r3, 80031d0 <trajectory+0x598>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd f91b 	bl	8000220 <__aeabi_dsub>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4620      	mov	r0, r4
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	f7fd facd 	bl	8000590 <__aeabi_dmul>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	f7fd f911 	bl	8000224 <__adddf3>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4614      	mov	r4, r2
 8003008:	461d      	mov	r5, r3
 800300a:	edd7 7a02 	vldr	s15, [r7, #8]
 800300e:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8003208 <trajectory+0x5d0>
 8003012:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003016:	edd7 7a02 	vldr	s15, [r7, #8]
 800301a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301e:	ee17 0a90 	vmov	r0, s15
 8003022:	f7fd fa5d 	bl	80004e0 <__aeabi_f2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4620      	mov	r0, r4
 800302c:	4629      	mov	r1, r5
 800302e:	f7fd f8f9 	bl	8000224 <__adddf3>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4614      	mov	r4, r2
 8003038:	461d      	mov	r5, r3
 800303a:	edd7 7a02 	vldr	s15, [r7, #8]
 800303e:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800320c <trajectory+0x5d4>
 8003042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003046:	ee17 0a90 	vmov	r0, s15
 800304a:	f7fd fa49 	bl	80004e0 <__aeabi_f2d>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4620      	mov	r0, r4
 8003054:	4629      	mov	r1, r5
 8003056:	f7fd f8e5 	bl	8000224 <__adddf3>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4614      	mov	r4, r2
 8003060:	461d      	mov	r5, r3
 8003062:	4b6b      	ldr	r3, [pc, #428]	@ (8003210 <trajectory+0x5d8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fa3a 	bl	80004e0 <__aeabi_f2d>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4620      	mov	r0, r4
 8003072:	4629      	mov	r1, r5
 8003074:	f7fd f8d6 	bl	8000224 <__adddf3>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f7fd fd7e 	bl	8000b80 <__aeabi_d2f>
 8003084:	4603      	mov	r3, r0
 8003086:	4a63      	ldr	r2, [pc, #396]	@ (8003214 <trajectory+0x5dc>)
 8003088:	6013      	str	r3, [r2, #0]
	else if(trajec_state == 1 && trajec_target >= 0){
 800308a:	e25b      	b.n	8003544 <trajectory+0x90c>
		}
		else{
			trajec_acceleration = 0;
 800308c:	4b5a      	ldr	r3, [pc, #360]	@ (80031f8 <trajectory+0x5c0>)
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
			trajec_velocity = 0;
 8003094:	4b5b      	ldr	r3, [pc, #364]	@ (8003204 <trajectory+0x5cc>)
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
//			trajec_position = 0;
			trajec_target = 0;
 800309c:	4b5e      	ldr	r3, [pc, #376]	@ (8003218 <trajectory+0x5e0>)
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
			trajec_state = 0;
 80030a4:	4b5d      	ldr	r3, [pc, #372]	@ (800321c <trajectory+0x5e4>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
	else if(trajec_state == 1 && trajec_target >= 0){
 80030aa:	e24b      	b.n	8003544 <trajectory+0x90c>
		}
	}
	else if(trajec_state == 1 && trajec_target < 0){
 80030ac:	4b5b      	ldr	r3, [pc, #364]	@ (800321c <trajectory+0x5e4>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 822b 	bne.w	800350c <trajectory+0x8d4>
 80030b6:	4b58      	ldr	r3, [pc, #352]	@ (8003218 <trajectory+0x5e0>)
 80030b8:	edd3 7a00 	vldr	s15, [r3]
 80030bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c4:	f140 8222 	bpl.w	800350c <trajectory+0x8d4>
		float t = ((HAL_GetTick() - Timestamp)*0.001+0.001);
 80030c8:	f000 ff42 	bl	8003f50 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b48      	ldr	r3, [pc, #288]	@ (80031f0 <trajectory+0x5b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd f9e1 	bl	800049c <__aeabi_ui2d>
 80030da:	a343      	add	r3, pc, #268	@ (adr r3, 80031e8 <trajectory+0x5b0>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	f7fd fa56 	bl	8000590 <__aeabi_dmul>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	a33e      	add	r3, pc, #248	@ (adr r3, 80031e8 <trajectory+0x5b0>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f7fd f897 	bl	8000224 <__adddf3>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f7fd fd3f 	bl	8000b80 <__aeabi_d2f>
 8003102:	4603      	mov	r3, r0
 8003104:	607b      	str	r3, [r7, #4]
		float time = (-100 + sqrt(10000 + (-2000*trajec_target)))/1000;
 8003106:	4b44      	ldr	r3, [pc, #272]	@ (8003218 <trajectory+0x5e0>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8003220 <trajectory+0x5e8>
 8003110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003114:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003224 <trajectory+0x5ec>
 8003118:	ee77 7a87 	vadd.f32	s15, s15, s14
 800311c:	ee17 0a90 	vmov	r0, s15
 8003120:	f7fd f9de 	bl	80004e0 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	ec43 2b10 	vmov	d0, r2, r3
 800312c:	f006 fd92 	bl	8009c54 <sqrt>
 8003130:	ec51 0b10 	vmov	r0, r1, d0
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	4b3b      	ldr	r3, [pc, #236]	@ (8003228 <trajectory+0x5f0>)
 800313a:	f7fd f871 	bl	8000220 <__aeabi_dsub>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	4b2a      	ldr	r3, [pc, #168]	@ (80031f4 <trajectory+0x5bc>)
 800314c:	f7fd fb4a 	bl	80007e4 <__aeabi_ddiv>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	f7fd fd12 	bl	8000b80 <__aeabi_d2f>
 800315c:	4603      	mov	r3, r0
 800315e:	603b      	str	r3, [r7, #0]
		if(HAL_GetTick() - Timestamp <= (time*1000)){
 8003160:	f000 fef6 	bl	8003f50 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <trajectory+0x5b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003174:	edd7 7a00 	vldr	s15, [r7]
 8003178:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800322c <trajectory+0x5f4>
 800317c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	d852      	bhi.n	8003230 <trajectory+0x5f8>
			trajec_acceleration = -500.0;
 800318a:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <trajectory+0x5c0>)
 800318c:	4a1b      	ldr	r2, [pc, #108]	@ (80031fc <trajectory+0x5c4>)
 800318e:	601a      	str	r2, [r3, #0]
			trajec_velocity = (500*t)*-1;
 8003190:	edd7 7a01 	vldr	s15, [r7, #4]
 8003194:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003200 <trajectory+0x5c8>
 8003198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319c:	eef1 7a67 	vneg.f32	s15, s15
 80031a0:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <trajectory+0x5cc>)
 80031a2:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = ((250*t*t)*-1)+p0;
 80031a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <trajectory+0x5d8>)
 80031a8:	ed93 7a00 	vldr	s14, [r3]
 80031ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80031b0:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8003208 <trajectory+0x5d0>
 80031b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80031b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80031bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c4:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <trajectory+0x5dc>)
 80031c6:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target < 0){
 80031ca:	e1bb      	b.n	8003544 <trajectory+0x90c>
 80031cc:	f3af 8000 	nop.w
 80031d0:	9999999a 	.word	0x9999999a
 80031d4:	3fc99999 	.word	0x3fc99999
 80031d8:	00000000 	.word	0x00000000
 80031dc:	c07f4000 	.word	0xc07f4000
 80031e0:	00000000 	.word	0x00000000
 80031e4:	c06f4000 	.word	0xc06f4000
 80031e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80031ec:	3f50624d 	.word	0x3f50624d
 80031f0:	200010fc 	.word	0x200010fc
 80031f4:	408f4000 	.word	0x408f4000
 80031f8:	20001090 	.word	0x20001090
 80031fc:	c3fa0000 	.word	0xc3fa0000
 8003200:	43fa0000 	.word	0x43fa0000
 8003204:	2000108c 	.word	0x2000108c
 8003208:	437a0000 	.word	0x437a0000
 800320c:	42c80000 	.word	0x42c80000
 8003210:	2000109c 	.word	0x2000109c
 8003214:	20001088 	.word	0x20001088
 8003218:	20001094 	.word	0x20001094
 800321c:	20001098 	.word	0x20001098
 8003220:	c4fa0000 	.word	0xc4fa0000
 8003224:	461c4000 	.word	0x461c4000
 8003228:	40590000 	.word	0x40590000
 800322c:	447a0000 	.word	0x447a0000
		}
		else if(HAL_GetTick() - Timestamp <= ((time+0.2)*1000)){
 8003230:	f000 fe8e 	bl	8003f50 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	4bcc      	ldr	r3, [pc, #816]	@ (8003568 <trajectory+0x930>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f92d 	bl	800049c <__aeabi_ui2d>
 8003242:	4604      	mov	r4, r0
 8003244:	460d      	mov	r5, r1
 8003246:	6838      	ldr	r0, [r7, #0]
 8003248:	f7fd f94a 	bl	80004e0 <__aeabi_f2d>
 800324c:	a3c0      	add	r3, pc, #768	@ (adr r3, 8003550 <trajectory+0x918>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f7fc ffe7 	bl	8000224 <__adddf3>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	4bc2      	ldr	r3, [pc, #776]	@ (800356c <trajectory+0x934>)
 8003264:	f7fd f994 	bl	8000590 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	f7fd fc0a 	bl	8000a88 <__aeabi_dcmple>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d031      	beq.n	80032de <trajectory+0x6a6>
			trajec_acceleration = 0;
 800327a:	4bbd      	ldr	r3, [pc, #756]	@ (8003570 <trajectory+0x938>)
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
			trajec_velocity = (500*time)*-1;
 8003282:	edd7 7a00 	vldr	s15, [r7]
 8003286:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003574 <trajectory+0x93c>
 800328a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800328e:	eef1 7a67 	vneg.f32	s15, s15
 8003292:	4bb9      	ldr	r3, [pc, #740]	@ (8003578 <trajectory+0x940>)
 8003294:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = (((500*time*(t-time))+(250*time*time))*-1)+p0;
 8003298:	4bb8      	ldr	r3, [pc, #736]	@ (800357c <trajectory+0x944>)
 800329a:	ed93 7a00 	vldr	s14, [r3]
 800329e:	edd7 7a00 	vldr	s15, [r7]
 80032a2:	eddf 6ab4 	vldr	s13, [pc, #720]	@ 8003574 <trajectory+0x93c>
 80032a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80032aa:	ed97 6a01 	vldr	s12, [r7, #4]
 80032ae:	edd7 7a00 	vldr	s15, [r7]
 80032b2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032ba:	edd7 7a00 	vldr	s15, [r7]
 80032be:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 8003580 <trajectory+0x948>
 80032c2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80032c6:	edd7 7a00 	vldr	s15, [r7]
 80032ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d6:	4bab      	ldr	r3, [pc, #684]	@ (8003584 <trajectory+0x94c>)
 80032d8:	edc3 7a00 	vstr	s15, [r3]
	else if(trajec_state == 1 && trajec_target < 0){
 80032dc:	e132      	b.n	8003544 <trajectory+0x90c>
		}
		else if(HAL_GetTick() - Timestamp <= (((time*2)+0.2)*1000)){
 80032de:	f000 fe37 	bl	8003f50 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003568 <trajectory+0x930>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f8d6 	bl	800049c <__aeabi_ui2d>
 80032f0:	4604      	mov	r4, r0
 80032f2:	460d      	mov	r5, r1
 80032f4:	edd7 7a00 	vldr	s15, [r7]
 80032f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032fc:	ee17 0a90 	vmov	r0, s15
 8003300:	f7fd f8ee 	bl	80004e0 <__aeabi_f2d>
 8003304:	a392      	add	r3, pc, #584	@ (adr r3, 8003550 <trajectory+0x918>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fc ff8b 	bl	8000224 <__adddf3>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	4b94      	ldr	r3, [pc, #592]	@ (800356c <trajectory+0x934>)
 800331c:	f7fd f938 	bl	8000590 <__aeabi_dmul>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4620      	mov	r0, r4
 8003326:	4629      	mov	r1, r5
 8003328:	f7fd fbae 	bl	8000a88 <__aeabi_dcmple>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80dc 	beq.w	80034ec <trajectory+0x8b4>
			trajec_acceleration = 500.0;
 8003334:	4b8e      	ldr	r3, [pc, #568]	@ (8003570 <trajectory+0x938>)
 8003336:	4a94      	ldr	r2, [pc, #592]	@ (8003588 <trajectory+0x950>)
 8003338:	601a      	str	r2, [r3, #0]
			trajec_velocity = ((-500*(t-time-0.2))+(500*time))*-1;
 800333a:	ed97 7a01 	vldr	s14, [r7, #4]
 800333e:	edd7 7a00 	vldr	s15, [r7]
 8003342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003346:	ee17 0a90 	vmov	r0, s15
 800334a:	f7fd f8c9 	bl	80004e0 <__aeabi_f2d>
 800334e:	a380      	add	r3, pc, #512	@ (adr r3, 8003550 <trajectory+0x918>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fc ff64 	bl	8000220 <__aeabi_dsub>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	a37d      	add	r3, pc, #500	@ (adr r3, 8003558 <trajectory+0x920>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f7fd f913 	bl	8000590 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4614      	mov	r4, r2
 8003370:	461d      	mov	r5, r3
 8003372:	edd7 7a00 	vldr	s15, [r7]
 8003376:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003574 <trajectory+0x93c>
 800337a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800337e:	ee17 0a90 	vmov	r0, s15
 8003382:	f7fd f8ad 	bl	80004e0 <__aeabi_f2d>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4620      	mov	r0, r4
 800338c:	4629      	mov	r1, r5
 800338e:	f7fc ff49 	bl	8000224 <__adddf3>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	f7fd fbf1 	bl	8000b80 <__aeabi_d2f>
 800339e:	4603      	mov	r3, r0
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eef1 7a67 	vneg.f32	s15, s15
 80033a8:	4b73      	ldr	r3, [pc, #460]	@ (8003578 <trajectory+0x940>)
 80033aa:	edc3 7a00 	vstr	s15, [r3]
			trajec_position = (((-250*(t-time-0.2)*(t-time-0.2))+(500*time*(t-time-0.2))+(250*time*time)+(100*time))*-1)+p0;
 80033ae:	4b73      	ldr	r3, [pc, #460]	@ (800357c <trajectory+0x944>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd f894 	bl	80004e0 <__aeabi_f2d>
 80033b8:	4604      	mov	r4, r0
 80033ba:	460d      	mov	r5, r1
 80033bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80033c0:	edd7 7a00 	vldr	s15, [r7]
 80033c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c8:	ee17 0a90 	vmov	r0, s15
 80033cc:	f7fd f888 	bl	80004e0 <__aeabi_f2d>
 80033d0:	a35f      	add	r3, pc, #380	@ (adr r3, 8003550 <trajectory+0x918>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f7fc ff23 	bl	8000220 <__aeabi_dsub>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	a35f      	add	r3, pc, #380	@ (adr r3, 8003560 <trajectory+0x928>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f7fd f8d2 	bl	8000590 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4690      	mov	r8, r2
 80033f2:	4699      	mov	r9, r3
 80033f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80033f8:	edd7 7a00 	vldr	s15, [r7]
 80033fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003400:	ee17 0a90 	vmov	r0, s15
 8003404:	f7fd f86c 	bl	80004e0 <__aeabi_f2d>
 8003408:	a351      	add	r3, pc, #324	@ (adr r3, 8003550 <trajectory+0x918>)
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	f7fc ff07 	bl	8000220 <__aeabi_dsub>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4640      	mov	r0, r8
 8003418:	4649      	mov	r1, r9
 800341a:	f7fd f8b9 	bl	8000590 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4692      	mov	sl, r2
 8003424:	469b      	mov	fp, r3
 8003426:	edd7 7a00 	vldr	s15, [r7]
 800342a:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003574 <trajectory+0x93c>
 800342e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003432:	ee17 0a90 	vmov	r0, s15
 8003436:	f7fd f853 	bl	80004e0 <__aeabi_f2d>
 800343a:	4680      	mov	r8, r0
 800343c:	4689      	mov	r9, r1
 800343e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003442:	edd7 7a00 	vldr	s15, [r7]
 8003446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344a:	ee17 0a90 	vmov	r0, s15
 800344e:	f7fd f847 	bl	80004e0 <__aeabi_f2d>
 8003452:	a33f      	add	r3, pc, #252	@ (adr r3, 8003550 <trajectory+0x918>)
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	f7fc fee2 	bl	8000220 <__aeabi_dsub>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4640      	mov	r0, r8
 8003462:	4649      	mov	r1, r9
 8003464:	f7fd f894 	bl	8000590 <__aeabi_dmul>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4650      	mov	r0, sl
 800346e:	4659      	mov	r1, fp
 8003470:	f7fc fed8 	bl	8000224 <__adddf3>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4690      	mov	r8, r2
 800347a:	4699      	mov	r9, r3
 800347c:	edd7 7a00 	vldr	s15, [r7]
 8003480:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003580 <trajectory+0x948>
 8003484:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003488:	edd7 7a00 	vldr	s15, [r7]
 800348c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003490:	ee17 0a90 	vmov	r0, s15
 8003494:	f7fd f824 	bl	80004e0 <__aeabi_f2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4640      	mov	r0, r8
 800349e:	4649      	mov	r1, r9
 80034a0:	f7fc fec0 	bl	8000224 <__adddf3>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4690      	mov	r8, r2
 80034aa:	4699      	mov	r9, r3
 80034ac:	edd7 7a00 	vldr	s15, [r7]
 80034b0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800358c <trajectory+0x954>
 80034b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b8:	ee17 0a90 	vmov	r0, s15
 80034bc:	f7fd f810 	bl	80004e0 <__aeabi_f2d>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4640      	mov	r0, r8
 80034c6:	4649      	mov	r1, r9
 80034c8:	f7fc feac 	bl	8000224 <__adddf3>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	f7fc fea4 	bl	8000220 <__aeabi_dsub>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fd fb4e 	bl	8000b80 <__aeabi_d2f>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4a27      	ldr	r2, [pc, #156]	@ (8003584 <trajectory+0x94c>)
 80034e8:	6013      	str	r3, [r2, #0]
	else if(trajec_state == 1 && trajec_target < 0){
 80034ea:	e02b      	b.n	8003544 <trajectory+0x90c>
		}
		else{
			trajec_acceleration = 0;
 80034ec:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <trajectory+0x938>)
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
			trajec_velocity = 0;
 80034f4:	4b20      	ldr	r3, [pc, #128]	@ (8003578 <trajectory+0x940>)
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
//			trajec_position = 0;
			trajec_target = 0;
 80034fc:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <trajectory+0x958>)
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
			trajec_state = 0;
 8003504:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <trajectory+0x95c>)
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
	else if(trajec_state == 1 && trajec_target < 0){
 800350a:	e01b      	b.n	8003544 <trajectory+0x90c>
		}
	}
	else if(trajec_state == 0 && trajec_target == 0){
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <trajectory+0x95c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d117      	bne.n	8003544 <trajectory+0x90c>
 8003514:	4b1e      	ldr	r3, [pc, #120]	@ (8003590 <trajectory+0x958>)
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	d10f      	bne.n	8003544 <trajectory+0x90c>
		trajec_target = setposition-position;
 8003524:	4b1c      	ldr	r3, [pc, #112]	@ (8003598 <trajectory+0x960>)
 8003526:	ed93 7a00 	vldr	s14, [r3]
 800352a:	4b1c      	ldr	r3, [pc, #112]	@ (800359c <trajectory+0x964>)
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003534:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <trajectory+0x958>)
 8003536:	edc3 7a00 	vstr	s15, [r3]
		p0 = position;
 800353a:	4b18      	ldr	r3, [pc, #96]	@ (800359c <trajectory+0x964>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a0f      	ldr	r2, [pc, #60]	@ (800357c <trajectory+0x944>)
 8003540:	6013      	str	r3, [r2, #0]
	}
}
 8003542:	e7ff      	b.n	8003544 <trajectory+0x90c>
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800354e:	bf00      	nop
 8003550:	9999999a 	.word	0x9999999a
 8003554:	3fc99999 	.word	0x3fc99999
 8003558:	00000000 	.word	0x00000000
 800355c:	c07f4000 	.word	0xc07f4000
 8003560:	00000000 	.word	0x00000000
 8003564:	c06f4000 	.word	0xc06f4000
 8003568:	200010fc 	.word	0x200010fc
 800356c:	408f4000 	.word	0x408f4000
 8003570:	20001090 	.word	0x20001090
 8003574:	43fa0000 	.word	0x43fa0000
 8003578:	2000108c 	.word	0x2000108c
 800357c:	2000109c 	.word	0x2000109c
 8003580:	437a0000 	.word	0x437a0000
 8003584:	20001088 	.word	0x20001088
 8003588:	43fa0000 	.word	0x43fa0000
 800358c:	42c80000 	.word	0x42c80000
 8003590:	20001094 	.word	0x20001094
 8003594:	20001098 	.word	0x20001098
 8003598:	20001038 	.word	0x20001038
 800359c:	20001074 	.word	0x20001074

080035a0 <velocity_PID>:

void velocity_PID(){
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
	static float u_n;
	static float u_n1 = 0;
	static float u_n2 = 0;
	static float y_n;
	static float y_n1 = 0;
	float one = (2*velocity_Ts*velocity_Kp)+(velocity_Ki*velocity_Ts*velocity_Ts)+(2*velocity_Kd);
 80035a6:	4b56      	ldr	r3, [pc, #344]	@ (8003700 <velocity_PID+0x160>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80035b0:	4b54      	ldr	r3, [pc, #336]	@ (8003704 <velocity_PID+0x164>)
 80035b2:	edd3 7a00 	vldr	s15, [r3]
 80035b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ba:	4b53      	ldr	r3, [pc, #332]	@ (8003708 <velocity_PID+0x168>)
 80035bc:	edd3 6a00 	vldr	s13, [r3]
 80035c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003700 <velocity_PID+0x160>)
 80035c2:	edd3 7a00 	vldr	s15, [r3]
 80035c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003700 <velocity_PID+0x160>)
 80035cc:	edd3 7a00 	vldr	s15, [r3]
 80035d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d8:	4b4c      	ldr	r3, [pc, #304]	@ (800370c <velocity_PID+0x16c>)
 80035da:	edd3 7a00 	vldr	s15, [r3]
 80035de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e6:	edc7 7a03 	vstr	s15, [r7, #12]
	float two = (-2*velocity_Ts*velocity_Kp)+(velocity_Ki*velocity_Ts*velocity_Ts)-(4*velocity_Kd);
 80035ea:	4b45      	ldr	r3, [pc, #276]	@ (8003700 <velocity_PID+0x160>)
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80035f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035f8:	4b42      	ldr	r3, [pc, #264]	@ (8003704 <velocity_PID+0x164>)
 80035fa:	edd3 7a00 	vldr	s15, [r3]
 80035fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <velocity_PID+0x168>)
 8003604:	edd3 6a00 	vldr	s13, [r3]
 8003608:	4b3d      	ldr	r3, [pc, #244]	@ (8003700 <velocity_PID+0x160>)
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003612:	4b3b      	ldr	r3, [pc, #236]	@ (8003700 <velocity_PID+0x160>)
 8003614:	edd3 7a00 	vldr	s15, [r3]
 8003618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800361c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003620:	4b3a      	ldr	r3, [pc, #232]	@ (800370c <velocity_PID+0x16c>)
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800362a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800362e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003632:	edc7 7a02 	vstr	s15, [r7, #8]
	float three = 2*velocity_Kd;
 8003636:	4b35      	ldr	r3, [pc, #212]	@ (800370c <velocity_PID+0x16c>)
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003640:	edc7 7a01 	vstr	s15, [r7, #4]
	float four = 2*velocity_Ts;
 8003644:	4b2e      	ldr	r3, [pc, #184]	@ (8003700 <velocity_PID+0x160>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800364e:	edc7 7a00 	vstr	s15, [r7]
	u_n = trajec_velocity + position_PID_output - velocity;
 8003652:	4b2f      	ldr	r3, [pc, #188]	@ (8003710 <velocity_PID+0x170>)
 8003654:	ed93 7a00 	vldr	s14, [r3]
 8003658:	4b2e      	ldr	r3, [pc, #184]	@ (8003714 <velocity_PID+0x174>)
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003662:	4b2d      	ldr	r3, [pc, #180]	@ (8003718 <velocity_PID+0x178>)
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366c:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <velocity_PID+0x17c>)
 800366e:	edc3 7a00 	vstr	s15, [r3]
	y_n = ((one*u_n)+(two*u_n1)+(three*u_n2)+(four*y_n1))/four;
 8003672:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <velocity_PID+0x17c>)
 8003674:	ed93 7a00 	vldr	s14, [r3]
 8003678:	edd7 7a03 	vldr	s15, [r7, #12]
 800367c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003680:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <velocity_PID+0x180>)
 8003682:	edd3 6a00 	vldr	s13, [r3]
 8003686:	edd7 7a02 	vldr	s15, [r7, #8]
 800368a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800368e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003692:	4b24      	ldr	r3, [pc, #144]	@ (8003724 <velocity_PID+0x184>)
 8003694:	edd3 6a00 	vldr	s13, [r3]
 8003698:	edd7 7a01 	vldr	s15, [r7, #4]
 800369c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a4:	4b20      	ldr	r3, [pc, #128]	@ (8003728 <velocity_PID+0x188>)
 80036a6:	edd3 6a00 	vldr	s13, [r3]
 80036aa:	edd7 7a00 	vldr	s15, [r7]
 80036ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80036b6:	ed97 7a00 	vldr	s14, [r7]
 80036ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <velocity_PID+0x18c>)
 80036c0:	edc3 7a00 	vstr	s15, [r3]

	velocity_PID_output += y_n;
 80036c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003730 <velocity_PID+0x190>)
 80036c6:	ed93 7a00 	vldr	s14, [r3]
 80036ca:	4b18      	ldr	r3, [pc, #96]	@ (800372c <velocity_PID+0x18c>)
 80036cc:	edd3 7a00 	vldr	s15, [r3]
 80036d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d4:	4b16      	ldr	r3, [pc, #88]	@ (8003730 <velocity_PID+0x190>)
 80036d6:	edc3 7a00 	vstr	s15, [r3]
	u_n2 = u_n1;
 80036da:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <velocity_PID+0x180>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <velocity_PID+0x184>)
 80036e0:	6013      	str	r3, [r2, #0]
	u_n1 = u_n;
 80036e2:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <velocity_PID+0x17c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003720 <velocity_PID+0x180>)
 80036e8:	6013      	str	r3, [r2, #0]
	y_n1 = y_n;
 80036ea:	4b10      	ldr	r3, [pc, #64]	@ (800372c <velocity_PID+0x18c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003728 <velocity_PID+0x188>)
 80036f0:	6013      	str	r3, [r2, #0]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000238 	.word	0x20000238
 8003704:	2000022c 	.word	0x2000022c
 8003708:	20000230 	.word	0x20000230
 800370c:	20000234 	.word	0x20000234
 8003710:	2000108c 	.word	0x2000108c
 8003714:	200010ac 	.word	0x200010ac
 8003718:	20001070 	.word	0x20001070
 800371c:	20001100 	.word	0x20001100
 8003720:	20001104 	.word	0x20001104
 8003724:	20001108 	.word	0x20001108
 8003728:	2000110c 	.word	0x2000110c
 800372c:	20001110 	.word	0x20001110
 8003730:	200010b0 	.word	0x200010b0

08003734 <position_PID>:

void position_PID(){
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
	static float u_n;
	static float u_n1 = 0;
	static float u_n2 = 0;
	static float y_n;
	static float y_n1 = 0;
	float one = (2*position_Ts*position_Kp)+(position_Ki*position_Ts*position_Ts)+(2*position_Kd);
 800373a:	4b53      	ldr	r3, [pc, #332]	@ (8003888 <position_PID+0x154>)
 800373c:	edd3 7a00 	vldr	s15, [r3]
 8003740:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003744:	4b51      	ldr	r3, [pc, #324]	@ (800388c <position_PID+0x158>)
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800374e:	4b50      	ldr	r3, [pc, #320]	@ (8003890 <position_PID+0x15c>)
 8003750:	edd3 6a00 	vldr	s13, [r3]
 8003754:	4b4c      	ldr	r3, [pc, #304]	@ (8003888 <position_PID+0x154>)
 8003756:	edd3 7a00 	vldr	s15, [r3]
 800375a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800375e:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <position_PID+0x154>)
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800376c:	4b49      	ldr	r3, [pc, #292]	@ (8003894 <position_PID+0x160>)
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377a:	edc7 7a03 	vstr	s15, [r7, #12]
	float two = (-2*position_Ts*position_Kp)+(position_Ki*position_Ts*position_Ts)-(4*position_Kd);
 800377e:	4b42      	ldr	r3, [pc, #264]	@ (8003888 <position_PID+0x154>)
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003788:	ee27 7a87 	vmul.f32	s14, s15, s14
 800378c:	4b3f      	ldr	r3, [pc, #252]	@ (800388c <position_PID+0x158>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003796:	4b3e      	ldr	r3, [pc, #248]	@ (8003890 <position_PID+0x15c>)
 8003798:	edd3 6a00 	vldr	s13, [r3]
 800379c:	4b3a      	ldr	r3, [pc, #232]	@ (8003888 <position_PID+0x154>)
 800379e:	edd3 7a00 	vldr	s15, [r3]
 80037a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037a6:	4b38      	ldr	r3, [pc, #224]	@ (8003888 <position_PID+0x154>)
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b4:	4b37      	ldr	r3, [pc, #220]	@ (8003894 <position_PID+0x160>)
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80037be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037c6:	edc7 7a02 	vstr	s15, [r7, #8]
	float three = 2*position_Kd;
 80037ca:	4b32      	ldr	r3, [pc, #200]	@ (8003894 <position_PID+0x160>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037d4:	edc7 7a01 	vstr	s15, [r7, #4]
	float four = 2*position_Ts;
 80037d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003888 <position_PID+0x154>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
 80037de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037e2:	edc7 7a00 	vstr	s15, [r7]
	u_n = trajec_position - position;
 80037e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003898 <position_PID+0x164>)
 80037e8:	ed93 7a00 	vldr	s14, [r3]
 80037ec:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <position_PID+0x168>)
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037f6:	4b2a      	ldr	r3, [pc, #168]	@ (80038a0 <position_PID+0x16c>)
 80037f8:	edc3 7a00 	vstr	s15, [r3]
	y_n = ((one*u_n)+(two*u_n1)+(three*u_n2)+(four*y_n1))/four;
 80037fc:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <position_PID+0x16c>)
 80037fe:	ed93 7a00 	vldr	s14, [r3]
 8003802:	edd7 7a03 	vldr	s15, [r7, #12]
 8003806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800380a:	4b26      	ldr	r3, [pc, #152]	@ (80038a4 <position_PID+0x170>)
 800380c:	edd3 6a00 	vldr	s13, [r3]
 8003810:	edd7 7a02 	vldr	s15, [r7, #8]
 8003814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800381c:	4b22      	ldr	r3, [pc, #136]	@ (80038a8 <position_PID+0x174>)
 800381e:	edd3 6a00 	vldr	s13, [r3]
 8003822:	edd7 7a01 	vldr	s15, [r7, #4]
 8003826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800382a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800382e:	4b1f      	ldr	r3, [pc, #124]	@ (80038ac <position_PID+0x178>)
 8003830:	edd3 6a00 	vldr	s13, [r3]
 8003834:	edd7 7a00 	vldr	s15, [r7]
 8003838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800383c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003840:	ed97 7a00 	vldr	s14, [r7]
 8003844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003848:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <position_PID+0x17c>)
 800384a:	edc3 7a00 	vstr	s15, [r3]

	position_PID_output += y_n;
 800384e:	4b19      	ldr	r3, [pc, #100]	@ (80038b4 <position_PID+0x180>)
 8003850:	ed93 7a00 	vldr	s14, [r3]
 8003854:	4b16      	ldr	r3, [pc, #88]	@ (80038b0 <position_PID+0x17c>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800385e:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <position_PID+0x180>)
 8003860:	edc3 7a00 	vstr	s15, [r3]
	u_n2 = u_n1;
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <position_PID+0x170>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0f      	ldr	r2, [pc, #60]	@ (80038a8 <position_PID+0x174>)
 800386a:	6013      	str	r3, [r2, #0]
	u_n1 = u_n;
 800386c:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <position_PID+0x16c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0c      	ldr	r2, [pc, #48]	@ (80038a4 <position_PID+0x170>)
 8003872:	6013      	str	r3, [r2, #0]
	y_n1 = y_n;
 8003874:	4b0e      	ldr	r3, [pc, #56]	@ (80038b0 <position_PID+0x17c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0c      	ldr	r2, [pc, #48]	@ (80038ac <position_PID+0x178>)
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	20000228 	.word	0x20000228
 800388c:	200010a0 	.word	0x200010a0
 8003890:	200010a4 	.word	0x200010a4
 8003894:	200010a8 	.word	0x200010a8
 8003898:	20001088 	.word	0x20001088
 800389c:	20001074 	.word	0x20001074
 80038a0:	20001114 	.word	0x20001114
 80038a4:	20001118 	.word	0x20001118
 80038a8:	2000111c 	.word	0x2000111c
 80038ac:	20001120 	.word	0x20001120
 80038b0:	20001124 	.word	0x20001124
 80038b4:	200010ac 	.word	0x200010ac

080038b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038bc:	b672      	cpsid	i
}
 80038be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <Error_Handler+0x8>

080038c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003908 <HAL_MspInit+0x44>)
 80038cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003908 <HAL_MspInit+0x44>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <HAL_MspInit+0x44>)
 80038d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_MspInit+0x44>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	4a08      	ldr	r2, [pc, #32]	@ (8003908 <HAL_MspInit+0x44>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_MspInit+0x44>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80038fa:	f001 f9f1 	bl	8004ce0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000

0800390c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391c:	d10c      	bne.n	8003938 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800391e:	4b2b      	ldr	r3, [pc, #172]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	4a2a      	ldr	r2, [pc, #168]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6593      	str	r3, [r2, #88]	@ 0x58
 800392a:	4b28      	ldr	r3, [pc, #160]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003936:	e044      	b.n	80039c2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a24      	ldr	r2, [pc, #144]	@ (80039d0 <HAL_TIM_Base_MspInit+0xc4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10c      	bne.n	800395c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003942:	4b22      	ldr	r3, [pc, #136]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	4a21      	ldr	r2, [pc, #132]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 8003948:	f043 0302 	orr.w	r3, r3, #2
 800394c:	6593      	str	r3, [r2, #88]	@ 0x58
 800394e:	4b1f      	ldr	r3, [pc, #124]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]
}
 800395a:	e032      	b.n	80039c2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1c      	ldr	r2, [pc, #112]	@ (80039d4 <HAL_TIM_Base_MspInit+0xc8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d114      	bne.n	8003990 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003966:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 8003968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396a:	4a18      	ldr	r2, [pc, #96]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 800396c:	f043 0308 	orr.w	r3, r3, #8
 8003970:	6593      	str	r3, [r2, #88]	@ 0x58
 8003972:	4b16      	ldr	r3, [pc, #88]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	2032      	movs	r0, #50	@ 0x32
 8003984:	f000 fbcb 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003988:	2032      	movs	r0, #50	@ 0x32
 800398a:	f000 fbe2 	bl	8004152 <HAL_NVIC_EnableIRQ>
}
 800398e:	e018      	b.n	80039c2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a10      	ldr	r2, [pc, #64]	@ (80039d8 <HAL_TIM_Base_MspInit+0xcc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d113      	bne.n	80039c2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800399a:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 800399c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399e:	4a0b      	ldr	r2, [pc, #44]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <HAL_TIM_Base_MspInit+0xc0>)
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80039b2:	2200      	movs	r2, #0
 80039b4:	2100      	movs	r1, #0
 80039b6:	2019      	movs	r0, #25
 80039b8:	f000 fbb1 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80039bc:	2019      	movs	r0, #25
 80039be:	f000 fbc8 	bl	8004152 <HAL_NVIC_EnableIRQ>
}
 80039c2:	bf00      	nop
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40014400 	.word	0x40014400

080039dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	@ 0x28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a18      	ldr	r2, [pc, #96]	@ (8003a5c <HAL_TIM_Encoder_MspInit+0x80>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d129      	bne.n	8003a52 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039fe:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	4a17      	ldr	r2, [pc, #92]	@ (8003a60 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	4b12      	ldr	r3, [pc, #72]	@ (8003a60 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1a:	4a11      	ldr	r2, [pc, #68]	@ (8003a60 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a22:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a2e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a34:	2302      	movs	r3, #2
 8003a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003a40:	230a      	movs	r3, #10
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a4e:	f000 fecd 	bl	80047ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a52:	bf00      	nop
 8003a54:	3728      	adds	r7, #40	@ 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40021000 	.word	0x40021000

08003a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <HAL_TIM_MspPostInit+0x64>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a86:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <HAL_TIM_MspPostInit+0x68>)
 8003a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8a:	4a10      	ldr	r2, [pc, #64]	@ (8003acc <HAL_TIM_MspPostInit+0x68>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a92:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <HAL_TIM_MspPostInit+0x68>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a9e:	2380      	movs	r3, #128	@ 0x80
 8003aa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4805      	ldr	r0, [pc, #20]	@ (8003ad0 <HAL_TIM_MspPostInit+0x6c>)
 8003aba:	f000 fe97 	bl	80047ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003abe:	bf00      	nop
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	48000800 	.word	0x48000800

08003ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b0a0      	sub	sp, #128	@ 0x80
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003adc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aec:	f107 0318 	add.w	r3, r7, #24
 8003af0:	2254      	movs	r2, #84	@ 0x54
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f005 fffd 	bl	8009af4 <memset>
  if(huart->Instance==USART1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a80      	ldr	r2, [pc, #512]	@ (8003d00 <HAL_UART_MspInit+0x22c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d160      	bne.n	8003bc6 <HAL_UART_MspInit+0xf2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b04:	2301      	movs	r3, #1
 8003b06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b0c:	f107 0318 	add.w	r3, r7, #24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fe23 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003b1c:	f7ff fecc 	bl	80038b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b20:	4b78      	ldr	r3, [pc, #480]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b24:	4a77      	ldr	r2, [pc, #476]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003b26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b2c:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b38:	4b72      	ldr	r3, [pc, #456]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3c:	4a71      	ldr	r2, [pc, #452]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003b3e:	f043 0304 	orr.w	r3, r3, #4
 8003b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b44:	4b6f      	ldr	r3, [pc, #444]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b50:	2330      	movs	r3, #48	@ 0x30
 8003b52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b60:	2307      	movs	r3, #7
 8003b62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4867      	ldr	r0, [pc, #412]	@ (8003d08 <HAL_UART_MspInit+0x234>)
 8003b6c:	f000 fe3e 	bl	80047ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003b70:	4b66      	ldr	r3, [pc, #408]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003b72:	4a67      	ldr	r2, [pc, #412]	@ (8003d10 <HAL_UART_MspInit+0x23c>)
 8003b74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003b76:	4b65      	ldr	r3, [pc, #404]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003b78:	2218      	movs	r2, #24
 8003b7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b7c:	4b63      	ldr	r3, [pc, #396]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b82:	4b62      	ldr	r3, [pc, #392]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b88:	4b60      	ldr	r3, [pc, #384]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003b8a:	2280      	movs	r2, #128	@ 0x80
 8003b8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b94:	4b5d      	ldr	r3, [pc, #372]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003b9a:	4b5c      	ldr	r3, [pc, #368]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ba6:	4859      	ldr	r0, [pc, #356]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003ba8:	f000 faee 	bl	8004188 <HAL_DMA_Init>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003bb2:	f7ff fe81 	bl	80038b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a54      	ldr	r2, [pc, #336]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003bbe:	4a53      	ldr	r2, [pc, #332]	@ (8003d0c <HAL_UART_MspInit+0x238>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bc4:	e097      	b.n	8003cf6 <HAL_UART_MspInit+0x222>
  else if(huart->Instance==USART2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a52      	ldr	r2, [pc, #328]	@ (8003d14 <HAL_UART_MspInit+0x240>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	f040 8092 	bne.w	8003cf6 <HAL_UART_MspInit+0x222>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bda:	f107 0318 	add.w	r3, r7, #24
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 fdbc 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_UART_MspInit+0x11a>
      Error_Handler();
 8003bea:	f7ff fe65 	bl	80038b8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bee:	4b45      	ldr	r3, [pc, #276]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf2:	4a44      	ldr	r2, [pc, #272]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfa:	4b42      	ldr	r3, [pc, #264]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c06:	4b3f      	ldr	r3, [pc, #252]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c12:	4b3c      	ldr	r3, [pc, #240]	@ (8003d04 <HAL_UART_MspInit+0x230>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c1e:	230c      	movs	r3, #12
 8003c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c2e:	2307      	movs	r3, #7
 8003c30:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c32:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003c36:	4619      	mov	r1, r3
 8003c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c3c:	f000 fdd6 	bl	80047ec <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003c40:	4b35      	ldr	r3, [pc, #212]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c42:	4a36      	ldr	r2, [pc, #216]	@ (8003d1c <HAL_UART_MspInit+0x248>)
 8003c44:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003c46:	4b34      	ldr	r3, [pc, #208]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c48:	221b      	movs	r2, #27
 8003c4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c4c:	4b32      	ldr	r3, [pc, #200]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c4e:	2210      	movs	r2, #16
 8003c50:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c52:	4b31      	ldr	r3, [pc, #196]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c58:	4b2f      	ldr	r3, [pc, #188]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c5a:	2280      	movs	r2, #128	@ 0x80
 8003c5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c64:	4b2c      	ldr	r3, [pc, #176]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c70:	4b29      	ldr	r3, [pc, #164]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003c76:	4828      	ldr	r0, [pc, #160]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c78:	f000 fa86 	bl	8004188 <HAL_DMA_Init>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8003c82:	f7ff fe19 	bl	80038b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a23      	ldr	r2, [pc, #140]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c8a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003c8c:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <HAL_UART_MspInit+0x244>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8003c92:	4b23      	ldr	r3, [pc, #140]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003c94:	4a23      	ldr	r2, [pc, #140]	@ (8003d24 <HAL_UART_MspInit+0x250>)
 8003c96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003c98:	4b21      	ldr	r3, [pc, #132]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003c9a:	221a      	movs	r2, #26
 8003c9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c9e:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003caa:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003cac:	2280      	movs	r2, #128	@ 0x80
 8003cae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003cbc:	4b18      	ldr	r3, [pc, #96]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cc2:	4b17      	ldr	r3, [pc, #92]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003cc8:	4815      	ldr	r0, [pc, #84]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003cca:	f000 fa5d 	bl	8004188 <HAL_DMA_Init>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_MspInit+0x204>
      Error_Handler();
 8003cd4:	f7ff fdf0 	bl	80038b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a11      	ldr	r2, [pc, #68]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003cdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d20 <HAL_UART_MspInit+0x24c>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2026      	movs	r0, #38	@ 0x26
 8003cec:	f000 fa17 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003cf0:	2026      	movs	r0, #38	@ 0x26
 8003cf2:	f000 fa2e 	bl	8004152 <HAL_NVIC_EnableIRQ>
}
 8003cf6:	bf00      	nop
 8003cf8:	3780      	adds	r7, #128	@ 0x80
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40013800 	.word	0x40013800
 8003d04:	40021000 	.word	0x40021000
 8003d08:	48000800 	.word	0x48000800
 8003d0c:	20000864 	.word	0x20000864
 8003d10:	40020008 	.word	0x40020008
 8003d14:	40004400 	.word	0x40004400
 8003d18:	200008c4 	.word	0x200008c4
 8003d1c:	4002001c 	.word	0x4002001c
 8003d20:	20000924 	.word	0x20000924
 8003d24:	40020030 	.word	0x40020030

08003d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <NMI_Handler+0x4>

08003d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <HardFault_Handler+0x4>

08003d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <MemManage_Handler+0x4>

08003d40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <BusFault_Handler+0x4>

08003d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <UsageFault_Handler+0x4>

08003d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d7e:	f000 f8d5 	bl	8003f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d8c:	4802      	ldr	r0, [pc, #8]	@ (8003d98 <DMA1_Channel1_IRQHandler+0x10>)
 8003d8e:	f000 fbde 	bl	800454e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000864 	.word	0x20000864

08003d9c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003da0:	4802      	ldr	r0, [pc, #8]	@ (8003dac <DMA1_Channel2_IRQHandler+0x10>)
 8003da2:	f000 fbd4 	bl	800454e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	200008c4 	.word	0x200008c4

08003db0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003db4:	4802      	ldr	r0, [pc, #8]	@ (8003dc0 <DMA1_Channel3_IRQHandler+0x10>)
 8003db6:	f000 fbca 	bl	800454e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000924 	.word	0x20000924

08003dc4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003dc8:	4802      	ldr	r0, [pc, #8]	@ (8003dd4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003dca:	f002 fc19 	bl	8006600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000600 	.word	0x20000600

08003dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ddc:	4802      	ldr	r0, [pc, #8]	@ (8003de8 <USART2_IRQHandler+0x10>)
 8003dde:	f004 f94f 	bl	8008080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000798 	.word	0x20000798

08003dec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003df0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003df4:	f000 feac 	bl	8004b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003e00:	4802      	ldr	r0, [pc, #8]	@ (8003e0c <TIM5_IRQHandler+0x10>)
 8003e02:	f002 fbfd 	bl	8006600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000534 	.word	0x20000534

08003e10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <SystemInit+0x20>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1a:	4a05      	ldr	r2, [pc, #20]	@ (8003e30 <SystemInit+0x20>)
 8003e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e34:	480d      	ldr	r0, [pc, #52]	@ (8003e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e38:	f7ff ffea 	bl	8003e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e3c:	480c      	ldr	r0, [pc, #48]	@ (8003e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e3e:	490d      	ldr	r1, [pc, #52]	@ (8003e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e40:	4a0d      	ldr	r2, [pc, #52]	@ (8003e78 <LoopForever+0xe>)
  movs r3, #0
 8003e42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e44:	e002      	b.n	8003e4c <LoopCopyDataInit>

08003e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e4a:	3304      	adds	r3, #4

08003e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e50:	d3f9      	bcc.n	8003e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e52:	4a0a      	ldr	r2, [pc, #40]	@ (8003e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e54:	4c0a      	ldr	r4, [pc, #40]	@ (8003e80 <LoopForever+0x16>)
  movs r3, #0
 8003e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e58:	e001      	b.n	8003e5e <LoopFillZerobss>

08003e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e5c:	3204      	adds	r2, #4

08003e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e60:	d3fb      	bcc.n	8003e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e62:	f005 fe55 	bl	8009b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e66:	f7fd fb87 	bl	8001578 <main>

08003e6a <LoopForever>:

LoopForever:
    b LoopForever
 8003e6a:	e7fe      	b.n	8003e6a <LoopForever>
  ldr   r0, =_estack
 8003e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e74:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8003e78:	0800ab20 	.word	0x0800ab20
  ldr r2, =_sbss
 8003e7c:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8003e80:	20001264 	.word	0x20001264

08003e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e84:	e7fe      	b.n	8003e84 <ADC1_2_IRQHandler>

08003e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e90:	2003      	movs	r0, #3
 8003e92:	f000 f939 	bl	8004108 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e96:	2000      	movs	r0, #0
 8003e98:	f000 f80e 	bl	8003eb8 <HAL_InitTick>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	71fb      	strb	r3, [r7, #7]
 8003ea6:	e001      	b.n	8003eac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ea8:	f7ff fd0c 	bl	80038c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003eac:	79fb      	ldrb	r3, [r7, #7]

}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003ec4:	4b16      	ldr	r3, [pc, #88]	@ (8003f20 <HAL_InitTick+0x68>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d022      	beq.n	8003f12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ecc:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <HAL_InitTick+0x6c>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b13      	ldr	r3, [pc, #76]	@ (8003f20 <HAL_InitTick+0x68>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ed8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f944 	bl	800416e <HAL_SYSTICK_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	d809      	bhi.n	8003f06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8003efa:	f000 f910 	bl	800411e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003efe:	4a0a      	ldr	r2, [pc, #40]	@ (8003f28 <HAL_InitTick+0x70>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e007      	b.n	8003f16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
 8003f0a:	e004      	b.n	8003f16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	e001      	b.n	8003f16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000248 	.word	0x20000248
 8003f24:	20000240 	.word	0x20000240
 8003f28:	20000244 	.word	0x20000244

08003f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <HAL_IncTick+0x1c>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_IncTick+0x20>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4413      	add	r3, r2
 8003f3a:	4a03      	ldr	r2, [pc, #12]	@ (8003f48 <HAL_IncTick+0x1c>)
 8003f3c:	6013      	str	r3, [r2, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	20001128 	.word	0x20001128
 8003f4c:	20000248 	.word	0x20000248

08003f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return uwTick;
 8003f54:	4b03      	ldr	r3, [pc, #12]	@ (8003f64 <HAL_GetTick+0x14>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20001128 	.word	0x20001128

08003f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f78:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <__NVIC_SetPriorityGrouping+0x44>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f84:	4013      	ands	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f9a:	4a04      	ldr	r2, [pc, #16]	@ (8003fac <__NVIC_SetPriorityGrouping+0x44>)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	60d3      	str	r3, [r2, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb4:	4b04      	ldr	r3, [pc, #16]	@ (8003fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	f003 0307 	and.w	r3, r3, #7
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	db0b      	blt.n	8003ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	f003 021f 	and.w	r2, r3, #31
 8003fe4:	4907      	ldr	r1, [pc, #28]	@ (8004004 <__NVIC_EnableIRQ+0x38>)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2001      	movs	r0, #1
 8003fee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000e100 	.word	0xe000e100

08004008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	6039      	str	r1, [r7, #0]
 8004012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004018:	2b00      	cmp	r3, #0
 800401a:	db0a      	blt.n	8004032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	b2da      	uxtb	r2, r3
 8004020:	490c      	ldr	r1, [pc, #48]	@ (8004054 <__NVIC_SetPriority+0x4c>)
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	0112      	lsls	r2, r2, #4
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	440b      	add	r3, r1
 800402c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004030:	e00a      	b.n	8004048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	4908      	ldr	r1, [pc, #32]	@ (8004058 <__NVIC_SetPriority+0x50>)
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	3b04      	subs	r3, #4
 8004040:	0112      	lsls	r2, r2, #4
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	440b      	add	r3, r1
 8004046:	761a      	strb	r2, [r3, #24]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000e100 	.word	0xe000e100
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	@ 0x24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f1c3 0307 	rsb	r3, r3, #7
 8004076:	2b04      	cmp	r3, #4
 8004078:	bf28      	it	cs
 800407a:	2304      	movcs	r3, #4
 800407c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3304      	adds	r3, #4
 8004082:	2b06      	cmp	r3, #6
 8004084:	d902      	bls.n	800408c <NVIC_EncodePriority+0x30>
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3b03      	subs	r3, #3
 800408a:	e000      	b.n	800408e <NVIC_EncodePriority+0x32>
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004090:	f04f 32ff 	mov.w	r2, #4294967295
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	401a      	ands	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040a4:	f04f 31ff 	mov.w	r1, #4294967295
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	43d9      	mvns	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b4:	4313      	orrs	r3, r2
         );
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3724      	adds	r7, #36	@ 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040d4:	d301      	bcc.n	80040da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00f      	b.n	80040fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040da:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <SysTick_Config+0x40>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e2:	210f      	movs	r1, #15
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	f7ff ff8e 	bl	8004008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <SysTick_Config+0x40>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f2:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <SysTick_Config+0x40>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	e000e010 	.word	0xe000e010

08004108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff29 	bl	8003f68 <__NVIC_SetPriorityGrouping>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	4603      	mov	r3, r0
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800412c:	f7ff ff40 	bl	8003fb0 <__NVIC_GetPriorityGrouping>
 8004130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	6978      	ldr	r0, [r7, #20]
 8004138:	f7ff ff90 	bl	800405c <NVIC_EncodePriority>
 800413c:	4602      	mov	r2, r0
 800413e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004142:	4611      	mov	r1, r2
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff5f 	bl	8004008 <__NVIC_SetPriority>
}
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff33 	bl	8003fcc <__NVIC_EnableIRQ>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ffa4 	bl	80040c4 <SysTick_Config>
 800417c:	4603      	mov	r3, r0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e08d      	b.n	80042b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	4b47      	ldr	r3, [pc, #284]	@ (80042c0 <HAL_DMA_Init+0x138>)
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d80f      	bhi.n	80041c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b45      	ldr	r3, [pc, #276]	@ (80042c4 <HAL_DMA_Init+0x13c>)
 80041ae:	4413      	add	r3, r2
 80041b0:	4a45      	ldr	r2, [pc, #276]	@ (80042c8 <HAL_DMA_Init+0x140>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	009a      	lsls	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a42      	ldr	r2, [pc, #264]	@ (80042cc <HAL_DMA_Init+0x144>)
 80041c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80041c4:	e00e      	b.n	80041e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b40      	ldr	r3, [pc, #256]	@ (80042d0 <HAL_DMA_Init+0x148>)
 80041ce:	4413      	add	r3, r2
 80041d0:	4a3d      	ldr	r2, [pc, #244]	@ (80042c8 <HAL_DMA_Init+0x140>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	009a      	lsls	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a3c      	ldr	r2, [pc, #240]	@ (80042d4 <HAL_DMA_Init+0x14c>)
 80041e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa76 	bl	8004728 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004244:	d102      	bne.n	800424c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004260:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <HAL_DMA_Init+0x104>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d80c      	bhi.n	800428c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fa96 	bl	80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	e008      	b.n	800429e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40020407 	.word	0x40020407
 80042c4:	bffdfff8 	.word	0xbffdfff8
 80042c8:	cccccccd 	.word	0xcccccccd
 80042cc:	40020000 	.word	0x40020000
 80042d0:	bffdfbf8 	.word	0xbffdfbf8
 80042d4:	40020400 	.word	0x40020400

080042d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_DMA_Start_IT+0x20>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e066      	b.n	80043c6 <HAL_DMA_Start_IT+0xee>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d155      	bne.n	80043b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f9bb 	bl	80046ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 020e 	orr.w	r2, r2, #14
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e00f      	b.n	8004370 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 020a 	orr.w	r2, r2, #10
 800436e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800438c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e005      	b.n	80043c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
 80043c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d005      	beq.n	80043f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2204      	movs	r2, #4
 80043ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
 80043f0:	e037      	b.n	8004462 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 020e 	bic.w	r2, r2, #14
 8004400:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800440c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004410:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	f003 021f 	and.w	r2, r3, #31
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	2101      	movs	r1, #1
 8004430:	fa01 f202 	lsl.w	r2, r1, r2
 8004434:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800443e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004456:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004460:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d00d      	beq.n	80044b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2204      	movs	r2, #4
 800449c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
 80044b2:	e047      	b.n	8004544 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 020e 	bic.w	r2, r2, #14
 80044c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004500:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00c      	beq.n	8004524 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004518:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004522:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	4798      	blx	r3
    }
  }
  return status;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2204      	movs	r2, #4
 8004570:	409a      	lsls	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d026      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x7a>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d021      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d107      	bne.n	80045a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0204 	bic.w	r2, r2, #4
 80045a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	f003 021f 	and.w	r2, r3, #31
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	2104      	movs	r1, #4
 80045b0:	fa01 f202 	lsl.w	r2, r1, r2
 80045b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d071      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045c6:	e06c      	b.n	80046a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2202      	movs	r2, #2
 80045d2:	409a      	lsls	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02e      	beq.n	800463a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d029      	beq.n	800463a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 020a 	bic.w	r2, r2, #10
 8004602:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004610:	f003 021f 	and.w	r2, r3, #31
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	2102      	movs	r1, #2
 800461a:	fa01 f202 	lsl.w	r2, r1, r2
 800461e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d038      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004638:	e033      	b.n	80046a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2208      	movs	r2, #8
 8004644:	409a      	lsls	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4013      	ands	r3, r2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d02a      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d025      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 020e 	bic.w	r2, r2, #14
 8004666:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
}
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	f003 021f 	and.w	r2, r3, #31
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	2101      	movs	r1, #1
 80046e4:	fa01 f202 	lsl.w	r2, r1, r2
 80046e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d108      	bne.n	800470c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800470a:	e007      	b.n	800471c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	4b16      	ldr	r3, [pc, #88]	@ (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d802      	bhi.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800473c:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e001      	b.n	8004746 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004742:	4b15      	ldr	r3, [pc, #84]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004744:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	3b08      	subs	r3, #8
 8004752:	4a12      	ldr	r2, [pc, #72]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004760:	089b      	lsrs	r3, r3, #2
 8004762:	009a      	lsls	r2, r3, #2
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	461a      	mov	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a0b      	ldr	r2, [pc, #44]	@ (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004772:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2201      	movs	r2, #1
 800477c:	409a      	lsls	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40020407 	.word	0x40020407
 8004794:	40020800 	.word	0x40020800
 8004798:	40020820 	.word	0x40020820
 800479c:	cccccccd 	.word	0xcccccccd
 80047a0:	40020880 	.word	0x40020880

080047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a08      	ldr	r2, [pc, #32]	@ (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	2201      	movs	r2, #1
 80047d2:	409a      	lsls	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	1000823f 	.word	0x1000823f
 80047e8:	40020940 	.word	0x40020940

080047ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047fa:	e15a      	b.n	8004ab2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2101      	movs	r1, #1
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	4013      	ands	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 814c 	beq.w	8004aac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d005      	beq.n	800482c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004828:	2b02      	cmp	r3, #2
 800482a:	d130      	bne.n	800488e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	2203      	movs	r2, #3
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4013      	ands	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004862:	2201      	movs	r2, #1
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4013      	ands	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	f003 0201 	and.w	r2, r3, #1
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b03      	cmp	r3, #3
 8004898:	d017      	beq.n	80048ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	2203      	movs	r2, #3
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4013      	ands	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d123      	bne.n	800491e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	08da      	lsrs	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3208      	adds	r2, #8
 80048de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	6939      	ldr	r1, [r7, #16]
 800491a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	2203      	movs	r2, #3
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0203 	and.w	r2, r3, #3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a6 	beq.w	8004aac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004960:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad0 <HAL_GPIO_Init+0x2e4>)
 8004962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004964:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad0 <HAL_GPIO_Init+0x2e4>)
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	6613      	str	r3, [r2, #96]	@ 0x60
 800496c:	4b58      	ldr	r3, [pc, #352]	@ (8004ad0 <HAL_GPIO_Init+0x2e4>)
 800496e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004978:	4a56      	ldr	r2, [pc, #344]	@ (8004ad4 <HAL_GPIO_Init+0x2e8>)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	3302      	adds	r3, #2
 8004980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	220f      	movs	r2, #15
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049a2:	d01f      	beq.n	80049e4 <HAL_GPIO_Init+0x1f8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a4c      	ldr	r2, [pc, #304]	@ (8004ad8 <HAL_GPIO_Init+0x2ec>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d019      	beq.n	80049e0 <HAL_GPIO_Init+0x1f4>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a4b      	ldr	r2, [pc, #300]	@ (8004adc <HAL_GPIO_Init+0x2f0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <HAL_GPIO_Init+0x1f0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ae0 <HAL_GPIO_Init+0x2f4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00d      	beq.n	80049d8 <HAL_GPIO_Init+0x1ec>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a49      	ldr	r2, [pc, #292]	@ (8004ae4 <HAL_GPIO_Init+0x2f8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <HAL_GPIO_Init+0x1e8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a48      	ldr	r2, [pc, #288]	@ (8004ae8 <HAL_GPIO_Init+0x2fc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_GPIO_Init+0x1e4>
 80049cc:	2305      	movs	r3, #5
 80049ce:	e00a      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049d0:	2306      	movs	r3, #6
 80049d2:	e008      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049d4:	2304      	movs	r3, #4
 80049d6:	e006      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049d8:	2303      	movs	r3, #3
 80049da:	e004      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049dc:	2302      	movs	r3, #2
 80049de:	e002      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049e4:	2300      	movs	r3, #0
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	f002 0203 	and.w	r2, r2, #3
 80049ec:	0092      	lsls	r2, r2, #2
 80049ee:	4093      	lsls	r3, r2
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f6:	4937      	ldr	r1, [pc, #220]	@ (8004ad4 <HAL_GPIO_Init+0x2e8>)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	3302      	adds	r3, #2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a04:	4b39      	ldr	r3, [pc, #228]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4013      	ands	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a28:	4a30      	ldr	r2, [pc, #192]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a52:	4a26      	ldr	r2, [pc, #152]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a58:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a82:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aa6:	4a11      	ldr	r2, [pc, #68]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f47f ae9d 	bne.w	80047fc <HAL_GPIO_Init+0x10>
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	48000400 	.word	0x48000400
 8004adc:	48000800 	.word	0x48000800
 8004ae0:	48000c00 	.word	0x48000c00
 8004ae4:	48001000 	.word	0x48001000
 8004ae8:	48001400 	.word	0x48001400
 8004aec:	40010400 	.word	0x40010400

08004af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	887b      	ldrh	r3, [r7, #2]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
 8004b0c:	e001      	b.n	8004b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	807b      	strh	r3, [r7, #2]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b30:	787b      	ldrb	r3, [r7, #1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b36:	887a      	ldrh	r2, [r7, #2]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b3c:	e002      	b.n	8004b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b3e:	887a      	ldrh	r2, [r7, #2]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b5a:	4b08      	ldr	r3, [pc, #32]	@ (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b66:	4a05      	ldr	r2, [pc, #20]	@ (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f806 	bl	8004b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40010400 	.word	0x40010400

08004b80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d141      	bne.n	8004c2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb2:	d131      	bne.n	8004c18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bb4:	4b47      	ldr	r3, [pc, #284]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bba:	4a46      	ldr	r2, [pc, #280]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bc4:	4b43      	ldr	r3, [pc, #268]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bcc:	4a41      	ldr	r2, [pc, #260]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bd4:	4b40      	ldr	r3, [pc, #256]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2232      	movs	r2, #50	@ 0x32
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	4a3f      	ldr	r2, [pc, #252]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	0c9b      	lsrs	r3, r3, #18
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bea:	e002      	b.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf2:	4b38      	ldr	r3, [pc, #224]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bfe:	d102      	bne.n	8004c06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f2      	bne.n	8004bec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c06:	4b33      	ldr	r3, [pc, #204]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c12:	d158      	bne.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e057      	b.n	8004cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c18:	4b2e      	ldr	r3, [pc, #184]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c28:	e04d      	b.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c30:	d141      	bne.n	8004cb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c32:	4b28      	ldr	r3, [pc, #160]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3e:	d131      	bne.n	8004ca4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c40:	4b24      	ldr	r3, [pc, #144]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c46:	4a23      	ldr	r2, [pc, #140]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c50:	4b20      	ldr	r3, [pc, #128]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c58:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c60:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2232      	movs	r2, #50	@ 0x32
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	0c9b      	lsrs	r3, r3, #18
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c76:	e002      	b.n	8004c7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c8a:	d102      	bne.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f2      	bne.n	8004c78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c92:	4b10      	ldr	r3, [pc, #64]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9e:	d112      	bne.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e011      	b.n	8004cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004caa:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cb4:	e007      	b.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cb6:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cbe:	4a05      	ldr	r2, [pc, #20]	@ (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40007000 	.word	0x40007000
 8004cd8:	20000240 	.word	0x20000240
 8004cdc:	431bde83 	.word	0x431bde83

08004ce0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ce4:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a04      	ldr	r2, [pc, #16]	@ (8004cfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cee:	6093      	str	r3, [r2, #8]
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40007000 	.word	0x40007000

08004d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e2fe      	b.n	8005310 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d075      	beq.n	8004e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1e:	4b97      	ldr	r3, [pc, #604]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d28:	4b94      	ldr	r3, [pc, #592]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d102      	bne.n	8004d3e <HAL_RCC_OscConfig+0x3e>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCC_OscConfig+0x44>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d10b      	bne.n	8004d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	4b8d      	ldr	r3, [pc, #564]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05b      	beq.n	8004e08 <HAL_RCC_OscConfig+0x108>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d157      	bne.n	8004e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e2d9      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d64:	d106      	bne.n	8004d74 <HAL_RCC_OscConfig+0x74>
 8004d66:	4b85      	ldr	r3, [pc, #532]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a84      	ldr	r2, [pc, #528]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e01d      	b.n	8004db0 <HAL_RCC_OscConfig+0xb0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x98>
 8004d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a7e      	ldr	r2, [pc, #504]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e00b      	b.n	8004db0 <HAL_RCC_OscConfig+0xb0>
 8004d98:	4b78      	ldr	r3, [pc, #480]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a77      	ldr	r2, [pc, #476]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	4b75      	ldr	r3, [pc, #468]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a74      	ldr	r2, [pc, #464]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d013      	beq.n	8004de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7ff f8ca 	bl	8003f50 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc0:	f7ff f8c6 	bl	8003f50 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b64      	cmp	r3, #100	@ 0x64
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e29e      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0xc0>
 8004dde:	e014      	b.n	8004e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7ff f8b6 	bl	8003f50 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de8:	f7ff f8b2 	bl	8003f50 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b64      	cmp	r3, #100	@ 0x64
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e28a      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dfa:	4b60      	ldr	r3, [pc, #384]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0xe8>
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d075      	beq.n	8004f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e16:	4b59      	ldr	r3, [pc, #356]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e20:	4b56      	ldr	r3, [pc, #344]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b0c      	cmp	r3, #12
 8004e2e:	d102      	bne.n	8004e36 <HAL_RCC_OscConfig+0x136>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d002      	beq.n	8004e3c <HAL_RCC_OscConfig+0x13c>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d11f      	bne.n	8004e7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_OscConfig+0x154>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e25d      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	4b49      	ldr	r3, [pc, #292]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	4946      	ldr	r1, [pc, #280]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e68:	4b45      	ldr	r3, [pc, #276]	@ (8004f80 <HAL_RCC_OscConfig+0x280>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff f823 	bl	8003eb8 <HAL_InitTick>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d043      	beq.n	8004f00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e249      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d023      	beq.n	8004ecc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e84:	4b3d      	ldr	r3, [pc, #244]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a3c      	ldr	r2, [pc, #240]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7ff f85e 	bl	8003f50 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e98:	f7ff f85a 	bl	8003f50 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e232      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eaa:	4b34      	ldr	r3, [pc, #208]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb6:	4b31      	ldr	r3, [pc, #196]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	492d      	ldr	r1, [pc, #180]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	604b      	str	r3, [r1, #4]
 8004eca:	e01a      	b.n	8004f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004ed2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7ff f83a 	bl	8003f50 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee0:	f7ff f836 	bl	8003f50 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e20e      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef2:	4b22      	ldr	r3, [pc, #136]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x1e0>
 8004efe:	e000      	b.n	8004f02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d041      	beq.n	8004f92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01c      	beq.n	8004f50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f16:	4b19      	ldr	r3, [pc, #100]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f1c:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f26:	f7ff f813 	bl	8003f50 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2e:	f7ff f80f 	bl	8003f50 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e1e7      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f40:	4b0e      	ldr	r3, [pc, #56]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0ef      	beq.n	8004f2e <HAL_RCC_OscConfig+0x22e>
 8004f4e:	e020      	b.n	8004f92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f50:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f56:	4a09      	ldr	r2, [pc, #36]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f60:	f7fe fff6 	bl	8003f50 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f66:	e00d      	b.n	8004f84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f68:	f7fe fff2 	bl	8003f50 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d906      	bls.n	8004f84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e1ca      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	20000244 	.word	0x20000244
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f84:	4b8c      	ldr	r3, [pc, #560]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8004f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1ea      	bne.n	8004f68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80a6 	beq.w	80050ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fa4:	4b84      	ldr	r3, [pc, #528]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2b4>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCC_OscConfig+0x2b6>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fba:	4b7f      	ldr	r3, [pc, #508]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd6:	4b79      	ldr	r3, [pc, #484]	@ (80051bc <HAL_RCC_OscConfig+0x4bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d118      	bne.n	8005014 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe2:	4b76      	ldr	r3, [pc, #472]	@ (80051bc <HAL_RCC_OscConfig+0x4bc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a75      	ldr	r2, [pc, #468]	@ (80051bc <HAL_RCC_OscConfig+0x4bc>)
 8004fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fee:	f7fe ffaf 	bl	8003f50 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff6:	f7fe ffab 	bl	8003f50 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e183      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005008:	4b6c      	ldr	r3, [pc, #432]	@ (80051bc <HAL_RCC_OscConfig+0x4bc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d108      	bne.n	800502e <HAL_RCC_OscConfig+0x32e>
 800501c:	4b66      	ldr	r3, [pc, #408]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	4a65      	ldr	r2, [pc, #404]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800502c:	e024      	b.n	8005078 <HAL_RCC_OscConfig+0x378>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b05      	cmp	r3, #5
 8005034:	d110      	bne.n	8005058 <HAL_RCC_OscConfig+0x358>
 8005036:	4b60      	ldr	r3, [pc, #384]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503c:	4a5e      	ldr	r2, [pc, #376]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 800503e:	f043 0304 	orr.w	r3, r3, #4
 8005042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005046:	4b5c      	ldr	r3, [pc, #368]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504c:	4a5a      	ldr	r2, [pc, #360]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005056:	e00f      	b.n	8005078 <HAL_RCC_OscConfig+0x378>
 8005058:	4b57      	ldr	r3, [pc, #348]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505e:	4a56      	ldr	r2, [pc, #344]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005068:	4b53      	ldr	r3, [pc, #332]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506e:	4a52      	ldr	r2, [pc, #328]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d016      	beq.n	80050ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fe ff66 	bl	8003f50 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005086:	e00a      	b.n	800509e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7fe ff62 	bl	8003f50 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e138      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509e:	4b46      	ldr	r3, [pc, #280]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0ed      	beq.n	8005088 <HAL_RCC_OscConfig+0x388>
 80050ac:	e015      	b.n	80050da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ae:	f7fe ff4f 	bl	8003f50 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b4:	e00a      	b.n	80050cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b6:	f7fe ff4b 	bl	8003f50 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e121      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050cc:	4b3a      	ldr	r3, [pc, #232]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1ed      	bne.n	80050b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050da:	7ffb      	ldrb	r3, [r7, #31]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d105      	bne.n	80050ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e0:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e4:	4a34      	ldr	r2, [pc, #208]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 80050e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d03c      	beq.n	8005172 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01c      	beq.n	800513a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005100:	4b2d      	ldr	r3, [pc, #180]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005106:	4a2c      	ldr	r2, [pc, #176]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005110:	f7fe ff1e 	bl	8003f50 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005118:	f7fe ff1a 	bl	8003f50 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e0f2      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800512a:	4b23      	ldr	r3, [pc, #140]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 800512c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ef      	beq.n	8005118 <HAL_RCC_OscConfig+0x418>
 8005138:	e01b      	b.n	8005172 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800513a:	4b1f      	ldr	r3, [pc, #124]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 800513c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005140:	4a1d      	ldr	r2, [pc, #116]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514a:	f7fe ff01 	bl	8003f50 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005152:	f7fe fefd 	bl	8003f50 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0d5      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005164:	4b14      	ldr	r3, [pc, #80]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005166:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1ef      	bne.n	8005152 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80c9 	beq.w	800530e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800517c:	4b0e      	ldr	r3, [pc, #56]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 030c 	and.w	r3, r3, #12
 8005184:	2b0c      	cmp	r3, #12
 8005186:	f000 8083 	beq.w	8005290 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d15e      	bne.n	8005250 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b09      	ldr	r3, [pc, #36]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a08      	ldr	r2, [pc, #32]	@ (80051b8 <HAL_RCC_OscConfig+0x4b8>)
 8005198:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800519c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7fe fed7 	bl	8003f50 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a4:	e00c      	b.n	80051c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fe fed3 	bl	8003f50 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d905      	bls.n	80051c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e0ab      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
 80051b8:	40021000 	.word	0x40021000
 80051bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c0:	4b55      	ldr	r3, [pc, #340]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1ec      	bne.n	80051a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051cc:	4b52      	ldr	r3, [pc, #328]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4b52      	ldr	r3, [pc, #328]	@ (800531c <HAL_RCC_OscConfig+0x61c>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6a11      	ldr	r1, [r2, #32]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051dc:	3a01      	subs	r2, #1
 80051de:	0112      	lsls	r2, r2, #4
 80051e0:	4311      	orrs	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80051e6:	0212      	lsls	r2, r2, #8
 80051e8:	4311      	orrs	r1, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051ee:	0852      	lsrs	r2, r2, #1
 80051f0:	3a01      	subs	r2, #1
 80051f2:	0552      	lsls	r2, r2, #21
 80051f4:	4311      	orrs	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051fa:	0852      	lsrs	r2, r2, #1
 80051fc:	3a01      	subs	r2, #1
 80051fe:	0652      	lsls	r2, r2, #25
 8005200:	4311      	orrs	r1, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005206:	06d2      	lsls	r2, r2, #27
 8005208:	430a      	orrs	r2, r1
 800520a:	4943      	ldr	r1, [pc, #268]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 800520c:	4313      	orrs	r3, r2
 800520e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005210:	4b41      	ldr	r3, [pc, #260]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a40      	ldr	r2, [pc, #256]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800521a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800521c:	4b3e      	ldr	r3, [pc, #248]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4a3d      	ldr	r2, [pc, #244]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005222:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fe fe92 	bl	8003f50 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fe fe8e 	bl	8003f50 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e066      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	4b35      	ldr	r3, [pc, #212]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x530>
 800524e:	e05e      	b.n	800530e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005250:	4b31      	ldr	r3, [pc, #196]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a30      	ldr	r2, [pc, #192]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800525a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fe fe78 	bl	8003f50 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005264:	f7fe fe74 	bl	8003f50 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e04c      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005276:	4b28      	ldr	r3, [pc, #160]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005282:	4b25      	ldr	r3, [pc, #148]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	4924      	ldr	r1, [pc, #144]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 8005288:	4b25      	ldr	r3, [pc, #148]	@ (8005320 <HAL_RCC_OscConfig+0x620>)
 800528a:	4013      	ands	r3, r2
 800528c:	60cb      	str	r3, [r1, #12]
 800528e:	e03e      	b.n	800530e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e039      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800529c:	4b1e      	ldr	r3, [pc, #120]	@ (8005318 <HAL_RCC_OscConfig+0x618>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f003 0203 	and.w	r2, r3, #3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d12c      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	3b01      	subs	r3, #1
 80052bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d123      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d11b      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d113      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	3b01      	subs	r3, #1
 80052f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d109      	bne.n	800530a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	3b01      	subs	r3, #1
 8005304:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d001      	beq.n	800530e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40021000 	.word	0x40021000
 800531c:	019f800c 	.word	0x019f800c
 8005320:	feeefffc 	.word	0xfeeefffc

08005324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e11e      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800533c:	4b91      	ldr	r3, [pc, #580]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d910      	bls.n	800536c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534a:	4b8e      	ldr	r3, [pc, #568]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 020f 	bic.w	r2, r3, #15
 8005352:	498c      	ldr	r1, [pc, #560]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	4313      	orrs	r3, r2
 8005358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b8a      	ldr	r3, [pc, #552]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e106      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d073      	beq.n	8005460 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d129      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005380:	4b81      	ldr	r3, [pc, #516]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0f4      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005390:	f000 f99e 	bl	80056d0 <RCC_GetSysClockFreqFromPLLSource>
 8005394:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4a7c      	ldr	r2, [pc, #496]	@ (800558c <HAL_RCC_ClockConfig+0x268>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d93f      	bls.n	800541e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800539e:	4b7a      	ldr	r3, [pc, #488]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d033      	beq.n	800541e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d12f      	bne.n	800541e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053be:	4b72      	ldr	r3, [pc, #456]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c6:	4a70      	ldr	r2, [pc, #448]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e024      	b.n	800541e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d107      	bne.n	80053ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d109      	bne.n	80053fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e0c6      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ec:	4b66      	ldr	r3, [pc, #408]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0be      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053fc:	f000 f8ce 	bl	800559c <HAL_RCC_GetSysClockFreq>
 8005400:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4a61      	ldr	r2, [pc, #388]	@ (800558c <HAL_RCC_ClockConfig+0x268>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d909      	bls.n	800541e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800540a:	4b5f      	ldr	r3, [pc, #380]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005412:	4a5d      	ldr	r2, [pc, #372]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005418:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800541e:	4b5a      	ldr	r3, [pc, #360]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 0203 	bic.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4957      	ldr	r1, [pc, #348]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800542c:	4313      	orrs	r3, r2
 800542e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005430:	f7fe fd8e 	bl	8003f50 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005436:	e00a      	b.n	800544e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005438:	f7fe fd8a 	bl	8003f50 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e095      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	4b4e      	ldr	r3, [pc, #312]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 020c 	and.w	r2, r3, #12
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	429a      	cmp	r2, r3
 800545e:	d1eb      	bne.n	8005438 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d023      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005478:	4b43      	ldr	r3, [pc, #268]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4a42      	ldr	r2, [pc, #264]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800547e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005482:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005490:	4b3d      	ldr	r3, [pc, #244]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005498:	4a3b      	ldr	r2, [pc, #236]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800549a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800549e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a0:	4b39      	ldr	r3, [pc, #228]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4936      	ldr	r1, [pc, #216]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b80      	cmp	r3, #128	@ 0x80
 80054b8:	d105      	bne.n	80054c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054ba:	4b33      	ldr	r3, [pc, #204]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4a32      	ldr	r2, [pc, #200]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 80054c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d21d      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 020f 	bic.w	r2, r3, #15
 80054dc:	4929      	ldr	r1, [pc, #164]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054e4:	f7fe fd34 	bl	8003f50 <HAL_GetTick>
 80054e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	e00a      	b.n	8005502 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ec:	f7fe fd30 	bl	8003f50 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e03b      	b.n	800557a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005502:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <HAL_RCC_ClockConfig+0x260>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d1ed      	bne.n	80054ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800551c:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4917      	ldr	r1, [pc, #92]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800553a:	4b13      	ldr	r3, [pc, #76]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	490f      	ldr	r1, [pc, #60]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800554e:	f000 f825 	bl	800559c <HAL_RCC_GetSysClockFreq>
 8005552:	4602      	mov	r2, r0
 8005554:	4b0c      	ldr	r3, [pc, #48]	@ (8005588 <HAL_RCC_ClockConfig+0x264>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	490c      	ldr	r1, [pc, #48]	@ (8005590 <HAL_RCC_ClockConfig+0x26c>)
 8005560:	5ccb      	ldrb	r3, [r1, r3]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	4a0a      	ldr	r2, [pc, #40]	@ (8005594 <HAL_RCC_ClockConfig+0x270>)
 800556c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800556e:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <HAL_RCC_ClockConfig+0x274>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fca0 	bl	8003eb8 <HAL_InitTick>
 8005578:	4603      	mov	r3, r0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40022000 	.word	0x40022000
 8005588:	40021000 	.word	0x40021000
 800558c:	04c4b400 	.word	0x04c4b400
 8005590:	0800aaa0 	.word	0x0800aaa0
 8005594:	20000240 	.word	0x20000240
 8005598:	20000244 	.word	0x20000244

0800559c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d102      	bne.n	80055b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	e047      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055b4:	4b27      	ldr	r3, [pc, #156]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 030c 	and.w	r3, r3, #12
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d102      	bne.n	80055c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055c0:	4b26      	ldr	r3, [pc, #152]	@ (800565c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e03e      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055c6:	4b23      	ldr	r3, [pc, #140]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b0c      	cmp	r3, #12
 80055d0:	d136      	bne.n	8005640 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055d2:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	3301      	adds	r3, #1
 80055e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d10c      	bne.n	800560a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055f0:	4a1a      	ldr	r2, [pc, #104]	@ (800565c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f8:	4a16      	ldr	r2, [pc, #88]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055fa:	68d2      	ldr	r2, [r2, #12]
 80055fc:	0a12      	lsrs	r2, r2, #8
 80055fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	617b      	str	r3, [r7, #20]
      break;
 8005608:	e00c      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800560a:	4a13      	ldr	r2, [pc, #76]	@ (8005658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	4a10      	ldr	r2, [pc, #64]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005614:	68d2      	ldr	r2, [r2, #12]
 8005616:	0a12      	lsrs	r2, r2, #8
 8005618:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800561c:	fb02 f303 	mul.w	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
      break;
 8005622:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005624:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	0e5b      	lsrs	r3, r3, #25
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	3301      	adds	r3, #1
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e001      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005644:	693b      	ldr	r3, [r7, #16]
}
 8005646:	4618      	mov	r0, r3
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	00f42400 	.word	0x00f42400
 800565c:	016e3600 	.word	0x016e3600

08005660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005664:	4b03      	ldr	r3, [pc, #12]	@ (8005674 <HAL_RCC_GetHCLKFreq+0x14>)
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000240 	.word	0x20000240

08005678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800567c:	f7ff fff0 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b06      	ldr	r3, [pc, #24]	@ (800569c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4904      	ldr	r1, [pc, #16]	@ (80056a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40021000 	.word	0x40021000
 80056a0:	0800aab0 	.word	0x0800aab0

080056a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056a8:	f7ff ffda 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	0adb      	lsrs	r3, r3, #11
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4904      	ldr	r1, [pc, #16]	@ (80056cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40021000 	.word	0x40021000
 80056cc:	0800aab0 	.word	0x0800aab0

080056d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	3301      	adds	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d10c      	bne.n	800570e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056f4:	4a17      	ldr	r2, [pc, #92]	@ (8005754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	4a14      	ldr	r2, [pc, #80]	@ (8005750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056fe:	68d2      	ldr	r2, [r2, #12]
 8005700:	0a12      	lsrs	r2, r2, #8
 8005702:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	617b      	str	r3, [r7, #20]
    break;
 800570c:	e00c      	b.n	8005728 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800570e:	4a12      	ldr	r2, [pc, #72]	@ (8005758 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	4a0e      	ldr	r2, [pc, #56]	@ (8005750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005718:	68d2      	ldr	r2, [r2, #12]
 800571a:	0a12      	lsrs	r2, r2, #8
 800571c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005720:	fb02 f303 	mul.w	r3, r2, r3
 8005724:	617b      	str	r3, [r7, #20]
    break;
 8005726:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005728:	4b09      	ldr	r3, [pc, #36]	@ (8005750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	0e5b      	lsrs	r3, r3, #25
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	3301      	adds	r3, #1
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005740:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005742:	687b      	ldr	r3, [r7, #4]
}
 8005744:	4618      	mov	r0, r3
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40021000 	.word	0x40021000
 8005754:	016e3600 	.word	0x016e3600
 8005758:	00f42400 	.word	0x00f42400

0800575c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005764:	2300      	movs	r3, #0
 8005766:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005768:	2300      	movs	r3, #0
 800576a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8098 	beq.w	80058aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800577a:	2300      	movs	r3, #0
 800577c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577e:	4b43      	ldr	r3, [pc, #268]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10d      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800578a:	4b40      	ldr	r3, [pc, #256]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800578c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578e:	4a3f      	ldr	r2, [pc, #252]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005794:	6593      	str	r3, [r2, #88]	@ 0x58
 8005796:	4b3d      	ldr	r3, [pc, #244]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a2:	2301      	movs	r3, #1
 80057a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a39      	ldr	r2, [pc, #228]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b2:	f7fe fbcd 	bl	8003f50 <HAL_GetTick>
 80057b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057b8:	e009      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ba:	f7fe fbc9 	bl	8003f50 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d902      	bls.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	74fb      	strb	r3, [r7, #19]
        break;
 80057cc:	e005      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ce:	4b30      	ldr	r3, [pc, #192]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0ef      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80057da:	7cfb      	ldrb	r3, [r7, #19]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d159      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057e0:	4b2a      	ldr	r3, [pc, #168]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d01e      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d019      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057fc:	4b23      	ldr	r3, [pc, #140]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005808:	4b20      	ldr	r3, [pc, #128]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580e:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005818:	4b1c      	ldr	r3, [pc, #112]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581e:	4a1b      	ldr	r2, [pc, #108]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005828:	4a18      	ldr	r2, [pc, #96]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583a:	f7fe fb89 	bl	8003f50 <HAL_GetTick>
 800583e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005840:	e00b      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fe fb85 	bl	8003f50 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005850:	4293      	cmp	r3, r2
 8005852:	d902      	bls.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	74fb      	strb	r3, [r7, #19]
            break;
 8005858:	e006      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585a:	4b0c      	ldr	r3, [pc, #48]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0ec      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800586e:	4b07      	ldr	r3, [pc, #28]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800587c:	4903      	ldr	r1, [pc, #12]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005884:	e008      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005886:	7cfb      	ldrb	r3, [r7, #19]
 8005888:	74bb      	strb	r3, [r7, #18]
 800588a:	e005      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800588c:	40021000 	.word	0x40021000
 8005890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005894:	7cfb      	ldrb	r3, [r7, #19]
 8005896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005898:	7c7b      	ldrb	r3, [r7, #17]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d105      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589e:	4ba7      	ldr	r3, [pc, #668]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a2:	4aa6      	ldr	r2, [pc, #664]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058b6:	4ba1      	ldr	r3, [pc, #644]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058bc:	f023 0203 	bic.w	r2, r3, #3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	499d      	ldr	r1, [pc, #628]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058d8:	4b98      	ldr	r3, [pc, #608]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058de:	f023 020c 	bic.w	r2, r3, #12
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	4995      	ldr	r1, [pc, #596]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058fa:	4b90      	ldr	r3, [pc, #576]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005900:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	498c      	ldr	r1, [pc, #560]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800591c:	4b87      	ldr	r3, [pc, #540]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005922:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	4984      	ldr	r1, [pc, #528]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800593e:	4b7f      	ldr	r3, [pc, #508]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	497b      	ldr	r1, [pc, #492]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005960:	4b76      	ldr	r3, [pc, #472]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005966:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	4973      	ldr	r1, [pc, #460]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005982:	4b6e      	ldr	r3, [pc, #440]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	496a      	ldr	r1, [pc, #424]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059a4:	4b65      	ldr	r3, [pc, #404]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	4962      	ldr	r1, [pc, #392]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059c6:	4b5d      	ldr	r3, [pc, #372]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	4959      	ldr	r1, [pc, #356]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059e8:	4b54      	ldr	r3, [pc, #336]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ee:	f023 0203 	bic.w	r2, r3, #3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f6:	4951      	ldr	r1, [pc, #324]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a18:	4948      	ldr	r1, [pc, #288]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d015      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a2c:	4b43      	ldr	r3, [pc, #268]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3a:	4940      	ldr	r1, [pc, #256]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a4a:	d105      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	4a3a      	ldr	r2, [pc, #232]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d015      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a64:	4b35      	ldr	r3, [pc, #212]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a72:	4932      	ldr	r1, [pc, #200]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a82:	d105      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a84:	4b2d      	ldr	r3, [pc, #180]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4a2c      	ldr	r2, [pc, #176]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d015      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a9c:	4b27      	ldr	r3, [pc, #156]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aaa:	4924      	ldr	r1, [pc, #144]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005aba:	d105      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005abc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ac6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d015      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ad4:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ada:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae2:	4916      	ldr	r1, [pc, #88]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005af2:	d105      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af4:	4b11      	ldr	r3, [pc, #68]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a10      	ldr	r2, [pc, #64]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005afe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d019      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	4908      	ldr	r1, [pc, #32]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b2a:	d109      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b2c:	4b03      	ldr	r3, [pc, #12]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a02      	ldr	r2, [pc, #8]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b36:	60d3      	str	r3, [r2, #12]
 8005b38:	e002      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d015      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b4c:	4b29      	ldr	r3, [pc, #164]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5a:	4926      	ldr	r1, [pc, #152]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b6a:	d105      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b6c:	4b21      	ldr	r3, [pc, #132]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4a20      	ldr	r2, [pc, #128]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b76:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d015      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005b84:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b92:	4918      	ldr	r1, [pc, #96]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba2:	d105      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4a12      	ldr	r2, [pc, #72]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d015      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bca:	490a      	ldr	r1, [pc, #40]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bda:	d105      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bdc:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4a04      	ldr	r2, [pc, #16]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005be6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005be8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000

08005bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e054      	b.n	8005cb4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d111      	bne.n	8005c3a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 feec 	bl	80079fc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a23      	ldr	r2, [pc, #140]	@ (8005cbc <HAL_TIM_Base_Init+0xc4>)
 8005c30:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f001 fa35 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	0800390d 	.word	0x0800390d

08005cc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d001      	beq.n	8005cd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e04c      	b.n	8005d72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	@ (8005d80 <HAL_TIM_Base_Start+0xc0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d022      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf2:	d01d      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a22      	ldr	r2, [pc, #136]	@ (8005d84 <HAL_TIM_Base_Start+0xc4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d018      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a21      	ldr	r2, [pc, #132]	@ (8005d88 <HAL_TIM_Base_Start+0xc8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005d8c <HAL_TIM_Base_Start+0xcc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00e      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1e      	ldr	r2, [pc, #120]	@ (8005d90 <HAL_TIM_Base_Start+0xd0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d009      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1c      	ldr	r2, [pc, #112]	@ (8005d94 <HAL_TIM_Base_Start+0xd4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005d98 <HAL_TIM_Base_Start+0xd8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d115      	bne.n	8005d5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	4b19      	ldr	r3, [pc, #100]	@ (8005d9c <HAL_TIM_Base_Start+0xdc>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b06      	cmp	r3, #6
 8005d40:	d015      	beq.n	8005d6e <HAL_TIM_Base_Start+0xae>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d48:	d011      	beq.n	8005d6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0201 	orr.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5a:	e008      	b.n	8005d6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e000      	b.n	8005d70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	40013400 	.word	0x40013400
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40015000 	.word	0x40015000
 8005d9c:	00010007 	.word	0x00010007

08005da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d001      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e054      	b.n	8005e62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a26      	ldr	r2, [pc, #152]	@ (8005e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d022      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x80>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de2:	d01d      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x80>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a22      	ldr	r2, [pc, #136]	@ (8005e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d018      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x80>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a21      	ldr	r2, [pc, #132]	@ (8005e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x80>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00e      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x80>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1e      	ldr	r2, [pc, #120]	@ (8005e80 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x80>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1c      	ldr	r2, [pc, #112]	@ (8005e84 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x80>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005e88 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d115      	bne.n	8005e4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	4b19      	ldr	r3, [pc, #100]	@ (8005e8c <HAL_TIM_Base_Start_IT+0xec>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b06      	cmp	r3, #6
 8005e30:	d015      	beq.n	8005e5e <HAL_TIM_Base_Start_IT+0xbe>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e38:	d011      	beq.n	8005e5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4a:	e008      	b.n	8005e5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	e000      	b.n	8005e60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40000800 	.word	0x40000800
 8005e7c:	40000c00 	.word	0x40000c00
 8005e80:	40013400 	.word	0x40013400
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40015000 	.word	0x40015000
 8005e8c:	00010007 	.word	0x00010007

08005e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e054      	b.n	8005f4c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d111      	bne.n	8005ed2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f001 fda0 	bl	80079fc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a23      	ldr	r2, [pc, #140]	@ (8005f54 <HAL_TIM_PWM_Init+0xc4>)
 8005ec8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f001 f8e9 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	08005f59 	.word	0x08005f59

08005f58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <HAL_TIM_PWM_Start+0x24>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	e03c      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d109      	bne.n	8005faa <HAL_TIM_PWM_Start+0x3e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	bf14      	ite	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	2300      	moveq	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	e02f      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d109      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x58>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e022      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b0c      	cmp	r3, #12
 8005fc8:	d109      	bne.n	8005fde <HAL_TIM_PWM_Start+0x72>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	e015      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d109      	bne.n	8005ff8 <HAL_TIM_PWM_Start+0x8c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	e008      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	bf14      	ite	ne
 8006004:	2301      	movne	r3, #1
 8006006:	2300      	moveq	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e0a6      	b.n	8006160 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <HAL_TIM_PWM_Start+0xb6>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006020:	e023      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b04      	cmp	r3, #4
 8006026:	d104      	bne.n	8006032 <HAL_TIM_PWM_Start+0xc6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006030:	e01b      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b08      	cmp	r3, #8
 8006036:	d104      	bne.n	8006042 <HAL_TIM_PWM_Start+0xd6>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006040:	e013      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b0c      	cmp	r3, #12
 8006046:	d104      	bne.n	8006052 <HAL_TIM_PWM_Start+0xe6>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006050:	e00b      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b10      	cmp	r3, #16
 8006056:	d104      	bne.n	8006062 <HAL_TIM_PWM_Start+0xf6>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006060:	e003      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2201      	movs	r2, #1
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f001 fc9c 	bl	80079b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3a      	ldr	r2, [pc, #232]	@ (8006168 <HAL_TIM_PWM_Start+0x1fc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d018      	beq.n	80060b4 <HAL_TIM_PWM_Start+0x148>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a39      	ldr	r2, [pc, #228]	@ (800616c <HAL_TIM_PWM_Start+0x200>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <HAL_TIM_PWM_Start+0x148>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a37      	ldr	r2, [pc, #220]	@ (8006170 <HAL_TIM_PWM_Start+0x204>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <HAL_TIM_PWM_Start+0x148>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a36      	ldr	r2, [pc, #216]	@ (8006174 <HAL_TIM_PWM_Start+0x208>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d009      	beq.n	80060b4 <HAL_TIM_PWM_Start+0x148>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a34      	ldr	r2, [pc, #208]	@ (8006178 <HAL_TIM_PWM_Start+0x20c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_TIM_PWM_Start+0x148>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a33      	ldr	r2, [pc, #204]	@ (800617c <HAL_TIM_PWM_Start+0x210>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d101      	bne.n	80060b8 <HAL_TIM_PWM_Start+0x14c>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <HAL_TIM_PWM_Start+0x14e>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a25      	ldr	r2, [pc, #148]	@ (8006168 <HAL_TIM_PWM_Start+0x1fc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d022      	beq.n	800611e <HAL_TIM_PWM_Start+0x1b2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e0:	d01d      	beq.n	800611e <HAL_TIM_PWM_Start+0x1b2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a26      	ldr	r2, [pc, #152]	@ (8006180 <HAL_TIM_PWM_Start+0x214>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d018      	beq.n	800611e <HAL_TIM_PWM_Start+0x1b2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a24      	ldr	r2, [pc, #144]	@ (8006184 <HAL_TIM_PWM_Start+0x218>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d013      	beq.n	800611e <HAL_TIM_PWM_Start+0x1b2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a23      	ldr	r2, [pc, #140]	@ (8006188 <HAL_TIM_PWM_Start+0x21c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00e      	beq.n	800611e <HAL_TIM_PWM_Start+0x1b2>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a19      	ldr	r2, [pc, #100]	@ (800616c <HAL_TIM_PWM_Start+0x200>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d009      	beq.n	800611e <HAL_TIM_PWM_Start+0x1b2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a18      	ldr	r2, [pc, #96]	@ (8006170 <HAL_TIM_PWM_Start+0x204>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d004      	beq.n	800611e <HAL_TIM_PWM_Start+0x1b2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a18      	ldr	r2, [pc, #96]	@ (800617c <HAL_TIM_PWM_Start+0x210>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d115      	bne.n	800614a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	4b19      	ldr	r3, [pc, #100]	@ (800618c <HAL_TIM_PWM_Start+0x220>)
 8006126:	4013      	ands	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b06      	cmp	r3, #6
 800612e:	d015      	beq.n	800615c <HAL_TIM_PWM_Start+0x1f0>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006136:	d011      	beq.n	800615c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006148:	e008      	b.n	800615c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0201 	orr.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	e000      	b.n	800615e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40013400 	.word	0x40013400
 8006170:	40014000 	.word	0x40014000
 8006174:	40014400 	.word	0x40014400
 8006178:	40014800 	.word	0x40014800
 800617c:	40015000 	.word	0x40015000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	00010007 	.word	0x00010007

08006190 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e04c      	b.n	800623e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d111      	bne.n	80061d4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fc1f 	bl	80079fc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006248 <HAL_TIM_OnePulse_Init+0xb8>)
 80061ca:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4610      	mov	r0, r2
 80061e8:	f000 ff68 	bl	80070bc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0208 	bic.w	r2, r2, #8
 80061fa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6819      	ldr	r1, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	0800624d 	.word	0x0800624d

0800624c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006270:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006278:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006280:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006288:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d108      	bne.n	80062a2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d105      	bne.n	80062a2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006296:	7b7b      	ldrb	r3, [r7, #13]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d102      	bne.n	80062a2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800629c:	7b3b      	ldrb	r3, [r7, #12]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d001      	beq.n	80062a6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e059      	b.n	800635a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2202      	movs	r2, #2
 80062ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0202 	orr.w	r2, r2, #2
 80062d4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0204 	orr.w	r2, r2, #4
 80062e4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2201      	movs	r2, #1
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 fb5e 	bl	80079b0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2201      	movs	r2, #1
 80062fa:	2104      	movs	r1, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fb57 	bl	80079b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a17      	ldr	r2, [pc, #92]	@ (8006364 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d018      	beq.n	800633e <HAL_TIM_OnePulse_Start_IT+0xde>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a15      	ldr	r2, [pc, #84]	@ (8006368 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a14      	ldr	r2, [pc, #80]	@ (800636c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a12      	ldr	r2, [pc, #72]	@ (8006370 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_TIM_OnePulse_Start_IT+0xde>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a11      	ldr	r2, [pc, #68]	@ (8006374 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a0f      	ldr	r2, [pc, #60]	@ (8006378 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d101      	bne.n	8006342 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006342:	2300      	movs	r3, #0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006356:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40013400 	.word	0x40013400
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800
 8006378:	40015000 	.word	0x40015000

0800637c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e0a2      	b.n	80064d6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d111      	bne.n	80063c0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fb29 	bl	80079fc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a4a      	ldr	r2, [pc, #296]	@ (80064e0 <HAL_TIM_Encoder_Init+0x164>)
 80063b6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80063d6:	f023 0307 	bic.w	r3, r3, #7
 80063da:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f000 fe68 	bl	80070bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006414:	f023 0303 	bic.w	r3, r3, #3
 8006418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	021b      	lsls	r3, r3, #8
 8006424:	4313      	orrs	r3, r2
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006432:	f023 030c 	bic.w	r3, r3, #12
 8006436:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800643e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	4313      	orrs	r3, r2
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	011a      	lsls	r2, r3, #4
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	031b      	lsls	r3, r3, #12
 8006462:	4313      	orrs	r3, r2
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006470:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006478:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	4313      	orrs	r3, r2
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	080039dd 	.word	0x080039dd

080064e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006504:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800650c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d110      	bne.n	8006536 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d102      	bne.n	8006520 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800651a:	7b7b      	ldrb	r3, [r7, #13]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d001      	beq.n	8006524 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e069      	b.n	80065f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006534:	e031      	b.n	800659a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b04      	cmp	r3, #4
 800653a:	d110      	bne.n	800655e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d102      	bne.n	8006548 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006542:	7b3b      	ldrb	r3, [r7, #12]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d001      	beq.n	800654c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e055      	b.n	80065f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800655c:	e01d      	b.n	800659a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d108      	bne.n	8006576 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d105      	bne.n	8006576 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800656a:	7b7b      	ldrb	r3, [r7, #13]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d102      	bne.n	8006576 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006570:	7b3b      	ldrb	r3, [r7, #12]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d001      	beq.n	800657a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e03e      	b.n	80065f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_TIM_Encoder_Start+0xc4>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d008      	beq.n	80065b8 <HAL_TIM_Encoder_Start+0xd4>
 80065a6:	e00f      	b.n	80065c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2201      	movs	r2, #1
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f001 f9fd 	bl	80079b0 <TIM_CCxChannelCmd>
      break;
 80065b6:	e016      	b.n	80065e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2201      	movs	r2, #1
 80065be:	2104      	movs	r1, #4
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 f9f5 	bl	80079b0 <TIM_CCxChannelCmd>
      break;
 80065c6:	e00e      	b.n	80065e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2201      	movs	r2, #1
 80065ce:	2100      	movs	r1, #0
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 f9ed 	bl	80079b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2201      	movs	r2, #1
 80065dc:	2104      	movs	r1, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 f9e6 	bl	80079b0 <TIM_CCxChannelCmd>
      break;
 80065e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d026      	beq.n	8006670 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d021      	beq.n	8006670 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0202 	mvn.w	r2, #2
 8006634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
 8006654:	e009      	b.n	800666a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d026      	beq.n	80066c8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d021      	beq.n	80066c8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0204 	mvn.w	r2, #4
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
 80066ac:	e009      	b.n	80066c2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d026      	beq.n	8006720 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d021      	beq.n	8006720 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0208 	mvn.w	r2, #8
 80066e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2204      	movs	r2, #4
 80066ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	4798      	blx	r3
 8006704:	e009      	b.n	800671a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b00      	cmp	r3, #0
 8006728:	d026      	beq.n	8006778 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	d021      	beq.n	8006778 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0210 	mvn.w	r2, #16
 800673c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2208      	movs	r2, #8
 8006742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
 800675c:	e009      	b.n	8006772 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d009      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0201 	mvn.w	r2, #1
 8006794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d104      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00e      	beq.n	80067d2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80067c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00e      	beq.n	80067fa <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80067ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00e      	beq.n	8006822 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d009      	beq.n	8006822 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00e      	beq.n	800684a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f06f 0220 	mvn.w	r2, #32
 800683e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00e      	beq.n	8006872 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d009      	beq.n	8006872 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00e      	beq.n	800689a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d009      	beq.n	800689a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800688e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00e      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80068b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00e      	beq.n	80068ea <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80068de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800690e:	2302      	movs	r3, #2
 8006910:	e0ff      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b14      	cmp	r3, #20
 800691e:	f200 80f0 	bhi.w	8006b02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006922:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	0800697d 	.word	0x0800697d
 800692c:	08006b03 	.word	0x08006b03
 8006930:	08006b03 	.word	0x08006b03
 8006934:	08006b03 	.word	0x08006b03
 8006938:	080069bd 	.word	0x080069bd
 800693c:	08006b03 	.word	0x08006b03
 8006940:	08006b03 	.word	0x08006b03
 8006944:	08006b03 	.word	0x08006b03
 8006948:	080069ff 	.word	0x080069ff
 800694c:	08006b03 	.word	0x08006b03
 8006950:	08006b03 	.word	0x08006b03
 8006954:	08006b03 	.word	0x08006b03
 8006958:	08006a3f 	.word	0x08006a3f
 800695c:	08006b03 	.word	0x08006b03
 8006960:	08006b03 	.word	0x08006b03
 8006964:	08006b03 	.word	0x08006b03
 8006968:	08006a81 	.word	0x08006a81
 800696c:	08006b03 	.word	0x08006b03
 8006970:	08006b03 	.word	0x08006b03
 8006974:	08006b03 	.word	0x08006b03
 8006978:	08006ac1 	.word	0x08006ac1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fc4e 	bl	8007224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0208 	orr.w	r2, r2, #8
 8006996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0204 	bic.w	r2, r2, #4
 80069a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6999      	ldr	r1, [r3, #24]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	619a      	str	r2, [r3, #24]
      break;
 80069ba:	e0a5      	b.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fcc8 	bl	8007358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6999      	ldr	r1, [r3, #24]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	021a      	lsls	r2, r3, #8
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	619a      	str	r2, [r3, #24]
      break;
 80069fc:	e084      	b.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fd3b 	bl	8007480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0208 	orr.w	r2, r2, #8
 8006a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0204 	bic.w	r2, r2, #4
 8006a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69d9      	ldr	r1, [r3, #28]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	61da      	str	r2, [r3, #28]
      break;
 8006a3c:	e064      	b.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fdad 	bl	80075a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69da      	ldr	r2, [r3, #28]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69d9      	ldr	r1, [r3, #28]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	021a      	lsls	r2, r3, #8
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	61da      	str	r2, [r3, #28]
      break;
 8006a7e:	e043      	b.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fe20 	bl	80076cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0208 	orr.w	r2, r2, #8
 8006a9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0204 	bic.w	r2, r2, #4
 8006aaa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006abe:	e023      	b.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fe6a 	bl	80077a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ada:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	021a      	lsls	r2, r3, #8
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006b00:	e002      	b.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	75fb      	strb	r3, [r7, #23]
      break;
 8006b06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop

08006b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_TIM_ConfigClockSource+0x1c>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e0f6      	b.n	8006d26 <HAL_TIM_ConfigClockSource+0x20a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006b56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a6f      	ldr	r2, [pc, #444]	@ (8006d30 <HAL_TIM_ConfigClockSource+0x214>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	f000 80c1 	beq.w	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006b78:	4a6d      	ldr	r2, [pc, #436]	@ (8006d30 <HAL_TIM_ConfigClockSource+0x214>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	f200 80c6 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006b80:	4a6c      	ldr	r2, [pc, #432]	@ (8006d34 <HAL_TIM_ConfigClockSource+0x218>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	f000 80b9 	beq.w	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006b88:	4a6a      	ldr	r2, [pc, #424]	@ (8006d34 <HAL_TIM_ConfigClockSource+0x218>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	f200 80be 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006b90:	4a69      	ldr	r2, [pc, #420]	@ (8006d38 <HAL_TIM_ConfigClockSource+0x21c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	f000 80b1 	beq.w	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006b98:	4a67      	ldr	r2, [pc, #412]	@ (8006d38 <HAL_TIM_ConfigClockSource+0x21c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	f200 80b6 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006ba0:	4a66      	ldr	r2, [pc, #408]	@ (8006d3c <HAL_TIM_ConfigClockSource+0x220>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	f000 80a9 	beq.w	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006ba8:	4a64      	ldr	r2, [pc, #400]	@ (8006d3c <HAL_TIM_ConfigClockSource+0x220>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	f200 80ae 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006bb0:	4a63      	ldr	r2, [pc, #396]	@ (8006d40 <HAL_TIM_ConfigClockSource+0x224>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	f000 80a1 	beq.w	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006bb8:	4a61      	ldr	r2, [pc, #388]	@ (8006d40 <HAL_TIM_ConfigClockSource+0x224>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	f200 80a6 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006bc0:	4a60      	ldr	r2, [pc, #384]	@ (8006d44 <HAL_TIM_ConfigClockSource+0x228>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	f000 8099 	beq.w	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006bc8:	4a5e      	ldr	r2, [pc, #376]	@ (8006d44 <HAL_TIM_ConfigClockSource+0x228>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	f200 809e 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006bd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006bd4:	f000 8091 	beq.w	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006bd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006bdc:	f200 8096 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006be0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006be4:	f000 8089 	beq.w	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006be8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bec:	f200 808e 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bf4:	d03e      	beq.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
 8006bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bfa:	f200 8087 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c02:	f000 8086 	beq.w	8006d12 <HAL_TIM_ConfigClockSource+0x1f6>
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c0a:	d87f      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006c0c:	2b70      	cmp	r3, #112	@ 0x70
 8006c0e:	d01a      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x12a>
 8006c10:	2b70      	cmp	r3, #112	@ 0x70
 8006c12:	d87b      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006c14:	2b60      	cmp	r3, #96	@ 0x60
 8006c16:	d050      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x19e>
 8006c18:	2b60      	cmp	r3, #96	@ 0x60
 8006c1a:	d877      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006c1c:	2b50      	cmp	r3, #80	@ 0x50
 8006c1e:	d03c      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x17e>
 8006c20:	2b50      	cmp	r3, #80	@ 0x50
 8006c22:	d873      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006c24:	2b40      	cmp	r3, #64	@ 0x40
 8006c26:	d058      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x1be>
 8006c28:	2b40      	cmp	r3, #64	@ 0x40
 8006c2a:	d86f      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006c2c:	2b30      	cmp	r3, #48	@ 0x30
 8006c2e:	d064      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006c30:	2b30      	cmp	r3, #48	@ 0x30
 8006c32:	d86b      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d060      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d867      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d05c      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	d05a      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x1de>
 8006c44:	e062      	b.n	8006d0c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c56:	f000 fe8b 	bl	8007970 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	609a      	str	r2, [r3, #8]
      break;
 8006c72:	e04f      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c84:	f000 fe74 	bl	8007970 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c96:	609a      	str	r2, [r3, #8]
      break;
 8006c98:	e03c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f000 fde6 	bl	8007878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2150      	movs	r1, #80	@ 0x50
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fe3f 	bl	8007936 <TIM_ITRx_SetConfig>
      break;
 8006cb8:	e02c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f000 fe05 	bl	80078d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2160      	movs	r1, #96	@ 0x60
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fe2f 	bl	8007936 <TIM_ITRx_SetConfig>
      break;
 8006cd8:	e01c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f000 fdc6 	bl	8007878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2140      	movs	r1, #64	@ 0x40
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fe1f 	bl	8007936 <TIM_ITRx_SetConfig>
      break;
 8006cf8:	e00c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	4610      	mov	r0, r2
 8006d06:	f000 fe16 	bl	8007936 <TIM_ITRx_SetConfig>
      break;
 8006d0a:	e003      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d10:	e000      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	00100070 	.word	0x00100070
 8006d34:	00100060 	.word	0x00100060
 8006d38:	00100050 	.word	0x00100050
 8006d3c:	00100040 	.word	0x00100040
 8006d40:	00100030 	.word	0x00100030
 8006d44:	00100020 	.word	0x00100020

08006d48 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	460b      	mov	r3, r1
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e14a      	b.n	80070ae <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	f040 80dd 	bne.w	8006fe0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	2b1f      	cmp	r3, #31
 8006e2a:	f200 80d6 	bhi.w	8006fda <HAL_TIM_RegisterCallback+0x1de>
 8006e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <HAL_TIM_RegisterCallback+0x38>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006eb5 	.word	0x08006eb5
 8006e38:	08006ebd 	.word	0x08006ebd
 8006e3c:	08006ec5 	.word	0x08006ec5
 8006e40:	08006ecd 	.word	0x08006ecd
 8006e44:	08006ed5 	.word	0x08006ed5
 8006e48:	08006edd 	.word	0x08006edd
 8006e4c:	08006ee5 	.word	0x08006ee5
 8006e50:	08006eed 	.word	0x08006eed
 8006e54:	08006ef5 	.word	0x08006ef5
 8006e58:	08006efd 	.word	0x08006efd
 8006e5c:	08006f05 	.word	0x08006f05
 8006e60:	08006f0d 	.word	0x08006f0d
 8006e64:	08006f15 	.word	0x08006f15
 8006e68:	08006f1d 	.word	0x08006f1d
 8006e6c:	08006f27 	.word	0x08006f27
 8006e70:	08006f31 	.word	0x08006f31
 8006e74:	08006f3b 	.word	0x08006f3b
 8006e78:	08006f45 	.word	0x08006f45
 8006e7c:	08006f4f 	.word	0x08006f4f
 8006e80:	08006f59 	.word	0x08006f59
 8006e84:	08006f63 	.word	0x08006f63
 8006e88:	08006f6d 	.word	0x08006f6d
 8006e8c:	08006f77 	.word	0x08006f77
 8006e90:	08006f81 	.word	0x08006f81
 8006e94:	08006f8b 	.word	0x08006f8b
 8006e98:	08006f95 	.word	0x08006f95
 8006e9c:	08006f9f 	.word	0x08006f9f
 8006ea0:	08006fa9 	.word	0x08006fa9
 8006ea4:	08006fb3 	.word	0x08006fb3
 8006ea8:	08006fbd 	.word	0x08006fbd
 8006eac:	08006fc7 	.word	0x08006fc7
 8006eb0:	08006fd1 	.word	0x08006fd1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006eba:	e0f7      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006ec2:	e0f3      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006eca:	e0ef      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006ed2:	e0eb      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006eda:	e0e7      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006ee2:	e0e3      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006eea:	e0df      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006ef2:	e0db      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006efa:	e0d7      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006f02:	e0d3      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006f0a:	e0cf      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006f12:	e0cb      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006f1a:	e0c7      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006f24:	e0c2      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8006f2e:	e0bd      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006f38:	e0b8      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8006f42:	e0b3      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8006f4c:	e0ae      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006f56:	e0a9      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006f60:	e0a4      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8006f6a:	e09f      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006f74:	e09a      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8006f7e:	e095      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006f88:	e090      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8006f92:	e08b      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8006f9c:	e086      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8006fa6:	e081      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8006fb0:	e07c      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8006fba:	e077      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8006fc4:	e072      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8006fce:	e06d      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006fd8:	e068      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
        break;
 8006fde:	e065      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d15d      	bne.n	80070a8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006fec:	7afb      	ldrb	r3, [r7, #11]
 8006fee:	2b0d      	cmp	r3, #13
 8006ff0:	d857      	bhi.n	80070a2 <HAL_TIM_RegisterCallback+0x2a6>
 8006ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <HAL_TIM_RegisterCallback+0x1fc>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007031 	.word	0x08007031
 8006ffc:	08007039 	.word	0x08007039
 8007000:	08007041 	.word	0x08007041
 8007004:	08007049 	.word	0x08007049
 8007008:	08007051 	.word	0x08007051
 800700c:	08007059 	.word	0x08007059
 8007010:	08007061 	.word	0x08007061
 8007014:	08007069 	.word	0x08007069
 8007018:	08007071 	.word	0x08007071
 800701c:	08007079 	.word	0x08007079
 8007020:	08007081 	.word	0x08007081
 8007024:	08007089 	.word	0x08007089
 8007028:	08007091 	.word	0x08007091
 800702c:	08007099 	.word	0x08007099
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007036:	e039      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800703e:	e035      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007046:	e031      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800704e:	e02d      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007056:	e029      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800705e:	e025      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007066:	e021      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800706e:	e01d      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007076:	e019      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800707e:	e015      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007086:	e011      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800708e:	e00d      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007096:	e009      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80070a0:	e004      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	75fb      	strb	r3, [r7, #23]
        break;
 80070a6:	e001      	b.n	80070ac <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop

080070bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a4c      	ldr	r2, [pc, #304]	@ (8007200 <TIM_Base_SetConfig+0x144>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d017      	beq.n	8007104 <TIM_Base_SetConfig+0x48>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070da:	d013      	beq.n	8007104 <TIM_Base_SetConfig+0x48>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a49      	ldr	r2, [pc, #292]	@ (8007204 <TIM_Base_SetConfig+0x148>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00f      	beq.n	8007104 <TIM_Base_SetConfig+0x48>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a48      	ldr	r2, [pc, #288]	@ (8007208 <TIM_Base_SetConfig+0x14c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00b      	beq.n	8007104 <TIM_Base_SetConfig+0x48>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a47      	ldr	r2, [pc, #284]	@ (800720c <TIM_Base_SetConfig+0x150>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d007      	beq.n	8007104 <TIM_Base_SetConfig+0x48>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a46      	ldr	r2, [pc, #280]	@ (8007210 <TIM_Base_SetConfig+0x154>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_Base_SetConfig+0x48>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a45      	ldr	r2, [pc, #276]	@ (8007214 <TIM_Base_SetConfig+0x158>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d108      	bne.n	8007116 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800710a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a39      	ldr	r2, [pc, #228]	@ (8007200 <TIM_Base_SetConfig+0x144>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d023      	beq.n	8007166 <TIM_Base_SetConfig+0xaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007124:	d01f      	beq.n	8007166 <TIM_Base_SetConfig+0xaa>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a36      	ldr	r2, [pc, #216]	@ (8007204 <TIM_Base_SetConfig+0x148>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01b      	beq.n	8007166 <TIM_Base_SetConfig+0xaa>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a35      	ldr	r2, [pc, #212]	@ (8007208 <TIM_Base_SetConfig+0x14c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d017      	beq.n	8007166 <TIM_Base_SetConfig+0xaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a34      	ldr	r2, [pc, #208]	@ (800720c <TIM_Base_SetConfig+0x150>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <TIM_Base_SetConfig+0xaa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a33      	ldr	r2, [pc, #204]	@ (8007210 <TIM_Base_SetConfig+0x154>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00f      	beq.n	8007166 <TIM_Base_SetConfig+0xaa>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a33      	ldr	r2, [pc, #204]	@ (8007218 <TIM_Base_SetConfig+0x15c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00b      	beq.n	8007166 <TIM_Base_SetConfig+0xaa>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a32      	ldr	r2, [pc, #200]	@ (800721c <TIM_Base_SetConfig+0x160>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d007      	beq.n	8007166 <TIM_Base_SetConfig+0xaa>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a31      	ldr	r2, [pc, #196]	@ (8007220 <TIM_Base_SetConfig+0x164>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_Base_SetConfig+0xaa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2c      	ldr	r2, [pc, #176]	@ (8007214 <TIM_Base_SetConfig+0x158>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d108      	bne.n	8007178 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800716c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a18      	ldr	r2, [pc, #96]	@ (8007200 <TIM_Base_SetConfig+0x144>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d013      	beq.n	80071cc <TIM_Base_SetConfig+0x110>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007210 <TIM_Base_SetConfig+0x154>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00f      	beq.n	80071cc <TIM_Base_SetConfig+0x110>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007218 <TIM_Base_SetConfig+0x15c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00b      	beq.n	80071cc <TIM_Base_SetConfig+0x110>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a19      	ldr	r2, [pc, #100]	@ (800721c <TIM_Base_SetConfig+0x160>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d007      	beq.n	80071cc <TIM_Base_SetConfig+0x110>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a18      	ldr	r2, [pc, #96]	@ (8007220 <TIM_Base_SetConfig+0x164>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_Base_SetConfig+0x110>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a13      	ldr	r2, [pc, #76]	@ (8007214 <TIM_Base_SetConfig+0x158>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d103      	bne.n	80071d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d105      	bne.n	80071f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	611a      	str	r2, [r3, #16]
  }
}
 80071f2:	bf00      	nop
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40012c00 	.word	0x40012c00
 8007204:	40000400 	.word	0x40000400
 8007208:	40000800 	.word	0x40000800
 800720c:	40000c00 	.word	0x40000c00
 8007210:	40013400 	.word	0x40013400
 8007214:	40015000 	.word	0x40015000
 8007218:	40014000 	.word	0x40014000
 800721c:	40014400 	.word	0x40014400
 8007220:	40014800 	.word	0x40014800

08007224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f023 0201 	bic.w	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f023 0302 	bic.w	r3, r3, #2
 8007270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a30      	ldr	r2, [pc, #192]	@ (8007340 <TIM_OC1_SetConfig+0x11c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d013      	beq.n	80072ac <TIM_OC1_SetConfig+0x88>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a2f      	ldr	r2, [pc, #188]	@ (8007344 <TIM_OC1_SetConfig+0x120>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00f      	beq.n	80072ac <TIM_OC1_SetConfig+0x88>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a2e      	ldr	r2, [pc, #184]	@ (8007348 <TIM_OC1_SetConfig+0x124>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00b      	beq.n	80072ac <TIM_OC1_SetConfig+0x88>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a2d      	ldr	r2, [pc, #180]	@ (800734c <TIM_OC1_SetConfig+0x128>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d007      	beq.n	80072ac <TIM_OC1_SetConfig+0x88>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a2c      	ldr	r2, [pc, #176]	@ (8007350 <TIM_OC1_SetConfig+0x12c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC1_SetConfig+0x88>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a2b      	ldr	r2, [pc, #172]	@ (8007354 <TIM_OC1_SetConfig+0x130>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d10c      	bne.n	80072c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f023 0308 	bic.w	r3, r3, #8
 80072b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f023 0304 	bic.w	r3, r3, #4
 80072c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007340 <TIM_OC1_SetConfig+0x11c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d013      	beq.n	80072f6 <TIM_OC1_SetConfig+0xd2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007344 <TIM_OC1_SetConfig+0x120>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00f      	beq.n	80072f6 <TIM_OC1_SetConfig+0xd2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007348 <TIM_OC1_SetConfig+0x124>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00b      	beq.n	80072f6 <TIM_OC1_SetConfig+0xd2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a1a      	ldr	r2, [pc, #104]	@ (800734c <TIM_OC1_SetConfig+0x128>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d007      	beq.n	80072f6 <TIM_OC1_SetConfig+0xd2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a19      	ldr	r2, [pc, #100]	@ (8007350 <TIM_OC1_SetConfig+0x12c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d003      	beq.n	80072f6 <TIM_OC1_SetConfig+0xd2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a18      	ldr	r2, [pc, #96]	@ (8007354 <TIM_OC1_SetConfig+0x130>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d111      	bne.n	800731a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	621a      	str	r2, [r3, #32]
}
 8007334:	bf00      	nop
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	40012c00 	.word	0x40012c00
 8007344:	40013400 	.word	0x40013400
 8007348:	40014000 	.word	0x40014000
 800734c:	40014400 	.word	0x40014400
 8007350:	40014800 	.word	0x40014800
 8007354:	40015000 	.word	0x40015000

08007358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	f023 0210 	bic.w	r2, r3, #16
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800738a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0320 	bic.w	r3, r3, #32
 80073a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007468 <TIM_OC2_SetConfig+0x110>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d007      	beq.n	80073cc <TIM_OC2_SetConfig+0x74>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a2b      	ldr	r2, [pc, #172]	@ (800746c <TIM_OC2_SetConfig+0x114>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_OC2_SetConfig+0x74>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007470 <TIM_OC2_SetConfig+0x118>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d10d      	bne.n	80073e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007468 <TIM_OC2_SetConfig+0x110>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d013      	beq.n	8007418 <TIM_OC2_SetConfig+0xc0>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a1e      	ldr	r2, [pc, #120]	@ (800746c <TIM_OC2_SetConfig+0x114>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00f      	beq.n	8007418 <TIM_OC2_SetConfig+0xc0>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007474 <TIM_OC2_SetConfig+0x11c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00b      	beq.n	8007418 <TIM_OC2_SetConfig+0xc0>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a1d      	ldr	r2, [pc, #116]	@ (8007478 <TIM_OC2_SetConfig+0x120>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d007      	beq.n	8007418 <TIM_OC2_SetConfig+0xc0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a1c      	ldr	r2, [pc, #112]	@ (800747c <TIM_OC2_SetConfig+0x124>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d003      	beq.n	8007418 <TIM_OC2_SetConfig+0xc0>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a17      	ldr	r2, [pc, #92]	@ (8007470 <TIM_OC2_SetConfig+0x118>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d113      	bne.n	8007440 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800741e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	4313      	orrs	r3, r2
 800743e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	621a      	str	r2, [r3, #32]
}
 800745a:	bf00      	nop
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	40012c00 	.word	0x40012c00
 800746c:	40013400 	.word	0x40013400
 8007470:	40015000 	.word	0x40015000
 8007474:	40014000 	.word	0x40014000
 8007478:	40014400 	.word	0x40014400
 800747c:	40014800 	.word	0x40014800

08007480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0303 	bic.w	r3, r3, #3
 80074ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a2b      	ldr	r2, [pc, #172]	@ (800758c <TIM_OC3_SetConfig+0x10c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_OC3_SetConfig+0x72>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a2a      	ldr	r2, [pc, #168]	@ (8007590 <TIM_OC3_SetConfig+0x110>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_OC3_SetConfig+0x72>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a29      	ldr	r2, [pc, #164]	@ (8007594 <TIM_OC3_SetConfig+0x114>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d10d      	bne.n	800750e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	021b      	lsls	r3, r3, #8
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800750c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a1e      	ldr	r2, [pc, #120]	@ (800758c <TIM_OC3_SetConfig+0x10c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <TIM_OC3_SetConfig+0xbe>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a1d      	ldr	r2, [pc, #116]	@ (8007590 <TIM_OC3_SetConfig+0x110>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d00f      	beq.n	800753e <TIM_OC3_SetConfig+0xbe>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a1d      	ldr	r2, [pc, #116]	@ (8007598 <TIM_OC3_SetConfig+0x118>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00b      	beq.n	800753e <TIM_OC3_SetConfig+0xbe>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a1c      	ldr	r2, [pc, #112]	@ (800759c <TIM_OC3_SetConfig+0x11c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d007      	beq.n	800753e <TIM_OC3_SetConfig+0xbe>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a1b      	ldr	r2, [pc, #108]	@ (80075a0 <TIM_OC3_SetConfig+0x120>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d003      	beq.n	800753e <TIM_OC3_SetConfig+0xbe>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a16      	ldr	r2, [pc, #88]	@ (8007594 <TIM_OC3_SetConfig+0x114>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d113      	bne.n	8007566 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800754c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	4313      	orrs	r3, r2
 8007558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	011b      	lsls	r3, r3, #4
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	621a      	str	r2, [r3, #32]
}
 8007580:	bf00      	nop
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	40012c00 	.word	0x40012c00
 8007590:	40013400 	.word	0x40013400
 8007594:	40015000 	.word	0x40015000
 8007598:	40014000 	.word	0x40014000
 800759c:	40014400 	.word	0x40014400
 80075a0:	40014800 	.word	0x40014800

080075a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	031b      	lsls	r3, r3, #12
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a2c      	ldr	r2, [pc, #176]	@ (80076b4 <TIM_OC4_SetConfig+0x110>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d007      	beq.n	8007618 <TIM_OC4_SetConfig+0x74>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a2b      	ldr	r2, [pc, #172]	@ (80076b8 <TIM_OC4_SetConfig+0x114>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_OC4_SetConfig+0x74>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a2a      	ldr	r2, [pc, #168]	@ (80076bc <TIM_OC4_SetConfig+0x118>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d10d      	bne.n	8007634 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800761e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	031b      	lsls	r3, r3, #12
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	4313      	orrs	r3, r2
 800762a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007632:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a1f      	ldr	r2, [pc, #124]	@ (80076b4 <TIM_OC4_SetConfig+0x110>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <TIM_OC4_SetConfig+0xc0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a1e      	ldr	r2, [pc, #120]	@ (80076b8 <TIM_OC4_SetConfig+0x114>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00f      	beq.n	8007664 <TIM_OC4_SetConfig+0xc0>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a1e      	ldr	r2, [pc, #120]	@ (80076c0 <TIM_OC4_SetConfig+0x11c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00b      	beq.n	8007664 <TIM_OC4_SetConfig+0xc0>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a1d      	ldr	r2, [pc, #116]	@ (80076c4 <TIM_OC4_SetConfig+0x120>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d007      	beq.n	8007664 <TIM_OC4_SetConfig+0xc0>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a1c      	ldr	r2, [pc, #112]	@ (80076c8 <TIM_OC4_SetConfig+0x124>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d003      	beq.n	8007664 <TIM_OC4_SetConfig+0xc0>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a17      	ldr	r2, [pc, #92]	@ (80076bc <TIM_OC4_SetConfig+0x118>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d113      	bne.n	800768c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800766a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007672:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	019b      	lsls	r3, r3, #6
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	019b      	lsls	r3, r3, #6
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	4313      	orrs	r3, r2
 800768a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40012c00 	.word	0x40012c00
 80076b8:	40013400 	.word	0x40013400
 80076bc:	40015000 	.word	0x40015000
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40014400 	.word	0x40014400
 80076c8:	40014800 	.word	0x40014800

080076cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007710:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	041b      	lsls	r3, r3, #16
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a19      	ldr	r2, [pc, #100]	@ (8007788 <TIM_OC5_SetConfig+0xbc>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <TIM_OC5_SetConfig+0x82>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a18      	ldr	r2, [pc, #96]	@ (800778c <TIM_OC5_SetConfig+0xc0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00f      	beq.n	800774e <TIM_OC5_SetConfig+0x82>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <TIM_OC5_SetConfig+0xc4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00b      	beq.n	800774e <TIM_OC5_SetConfig+0x82>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a16      	ldr	r2, [pc, #88]	@ (8007794 <TIM_OC5_SetConfig+0xc8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d007      	beq.n	800774e <TIM_OC5_SetConfig+0x82>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <TIM_OC5_SetConfig+0xcc>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d003      	beq.n	800774e <TIM_OC5_SetConfig+0x82>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a14      	ldr	r2, [pc, #80]	@ (800779c <TIM_OC5_SetConfig+0xd0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d109      	bne.n	8007762 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	021b      	lsls	r3, r3, #8
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	621a      	str	r2, [r3, #32]
}
 800777c:	bf00      	nop
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40013400 	.word	0x40013400
 8007790:	40014000 	.word	0x40014000
 8007794:	40014400 	.word	0x40014400
 8007798:	40014800 	.word	0x40014800
 800779c:	40015000 	.word	0x40015000

080077a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	051b      	lsls	r3, r3, #20
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a1a      	ldr	r2, [pc, #104]	@ (8007860 <TIM_OC6_SetConfig+0xc0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d013      	beq.n	8007824 <TIM_OC6_SetConfig+0x84>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a19      	ldr	r2, [pc, #100]	@ (8007864 <TIM_OC6_SetConfig+0xc4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00f      	beq.n	8007824 <TIM_OC6_SetConfig+0x84>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a18      	ldr	r2, [pc, #96]	@ (8007868 <TIM_OC6_SetConfig+0xc8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00b      	beq.n	8007824 <TIM_OC6_SetConfig+0x84>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a17      	ldr	r2, [pc, #92]	@ (800786c <TIM_OC6_SetConfig+0xcc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d007      	beq.n	8007824 <TIM_OC6_SetConfig+0x84>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a16      	ldr	r2, [pc, #88]	@ (8007870 <TIM_OC6_SetConfig+0xd0>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d003      	beq.n	8007824 <TIM_OC6_SetConfig+0x84>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a15      	ldr	r2, [pc, #84]	@ (8007874 <TIM_OC6_SetConfig+0xd4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d109      	bne.n	8007838 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800782a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	029b      	lsls	r3, r3, #10
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40012c00 	.word	0x40012c00
 8007864:	40013400 	.word	0x40013400
 8007868:	40014000 	.word	0x40014000
 800786c:	40014400 	.word	0x40014400
 8007870:	40014800 	.word	0x40014800
 8007874:	40015000 	.word	0x40015000

08007878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	f023 0201 	bic.w	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f023 030a 	bic.w	r3, r3, #10
 80078b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b087      	sub	sp, #28
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	f023 0210 	bic.w	r2, r3, #16
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007900:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	031b      	lsls	r3, r3, #12
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007912:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800794c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4313      	orrs	r3, r2
 8007958:	f043 0307 	orr.w	r3, r3, #7
 800795c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	609a      	str	r2, [r3, #8]
}
 8007964:	bf00      	nop
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800798a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	021a      	lsls	r2, r3, #8
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	431a      	orrs	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4313      	orrs	r3, r2
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	609a      	str	r2, [r3, #8]
}
 80079a4:	bf00      	nop
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2201      	movs	r2, #1
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1a      	ldr	r2, [r3, #32]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	43db      	mvns	r3, r3
 80079d2:	401a      	ands	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1a      	ldr	r2, [r3, #32]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	fa01 f303 	lsl.w	r3, r1, r3
 80079e8:	431a      	orrs	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a26      	ldr	r2, [pc, #152]	@ (8007aa0 <TIM_ResetCallback+0xa4>)
 8007a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a25      	ldr	r2, [pc, #148]	@ (8007aa4 <TIM_ResetCallback+0xa8>)
 8007a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a24      	ldr	r2, [pc, #144]	@ (8007aa8 <TIM_ResetCallback+0xac>)
 8007a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a23      	ldr	r2, [pc, #140]	@ (8007aac <TIM_ResetCallback+0xb0>)
 8007a20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a22      	ldr	r2, [pc, #136]	@ (8007ab0 <TIM_ResetCallback+0xb4>)
 8007a28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a21      	ldr	r2, [pc, #132]	@ (8007ab4 <TIM_ResetCallback+0xb8>)
 8007a30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a20      	ldr	r2, [pc, #128]	@ (8007ab8 <TIM_ResetCallback+0xbc>)
 8007a38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007abc <TIM_ResetCallback+0xc0>)
 8007a40:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac0 <TIM_ResetCallback+0xc4>)
 8007a48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac4 <TIM_ResetCallback+0xc8>)
 8007a50:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac8 <TIM_ResetCallback+0xcc>)
 8007a58:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8007acc <TIM_ResetCallback+0xd0>)
 8007a60:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a1a      	ldr	r2, [pc, #104]	@ (8007ad0 <TIM_ResetCallback+0xd4>)
 8007a68:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a19      	ldr	r2, [pc, #100]	@ (8007ad4 <TIM_ResetCallback+0xd8>)
 8007a70:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a18      	ldr	r2, [pc, #96]	@ (8007ad8 <TIM_ResetCallback+0xdc>)
 8007a78:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a17      	ldr	r2, [pc, #92]	@ (8007adc <TIM_ResetCallback+0xe0>)
 8007a80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a16      	ldr	r2, [pc, #88]	@ (8007ae0 <TIM_ResetCallback+0xe4>)
 8007a88:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a15      	ldr	r2, [pc, #84]	@ (8007ae4 <TIM_ResetCallback+0xe8>)
 8007a90:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	08002991 	.word	0x08002991
 8007aa4:	08006d49 	.word	0x08006d49
 8007aa8:	08006dc1 	.word	0x08006dc1
 8007aac:	08006dd5 	.word	0x08006dd5
 8007ab0:	08006d71 	.word	0x08006d71
 8007ab4:	08006d85 	.word	0x08006d85
 8007ab8:	08006d5d 	.word	0x08006d5d
 8007abc:	08006d99 	.word	0x08006d99
 8007ac0:	08006dad 	.word	0x08006dad
 8007ac4:	08006de9 	.word	0x08006de9
 8007ac8:	08007c15 	.word	0x08007c15
 8007acc:	08007c29 	.word	0x08007c29
 8007ad0:	08007c3d 	.word	0x08007c3d
 8007ad4:	08007c51 	.word	0x08007c51
 8007ad8:	08007c65 	.word	0x08007c65
 8007adc:	08007c79 	.word	0x08007c79
 8007ae0:	08007c8d 	.word	0x08007c8d
 8007ae4:	08007ca1 	.word	0x08007ca1

08007ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e074      	b.n	8007bea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a34      	ldr	r2, [pc, #208]	@ (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d009      	beq.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a33      	ldr	r2, [pc, #204]	@ (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d004      	beq.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a31      	ldr	r2, [pc, #196]	@ (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d108      	bne.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a21      	ldr	r2, [pc, #132]	@ (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d022      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b80:	d01d      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a1f      	ldr	r2, [pc, #124]	@ (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d018      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1d      	ldr	r2, [pc, #116]	@ (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00e      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a15      	ldr	r2, [pc, #84]	@ (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d009      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a18      	ldr	r2, [pc, #96]	@ (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d004      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a11      	ldr	r2, [pc, #68]	@ (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d10c      	bne.n	8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40012c00 	.word	0x40012c00
 8007bfc:	40013400 	.word	0x40013400
 8007c00:	40015000 	.word	0x40015000
 8007c04:	40000400 	.word	0x40000400
 8007c08:	40000800 	.word	0x40000800
 8007c0c:	40000c00 	.word	0x40000c00
 8007c10:	40014000 	.word	0x40014000

08007c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e050      	b.n	8007d68 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d114      	bne.n	8007cfa <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fdbb 	bl	8008854 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d103      	bne.n	8007cf0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a21      	ldr	r2, [pc, #132]	@ (8007d70 <HAL_UART_Init+0xbc>)
 8007cec:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2224      	movs	r2, #36	@ 0x24
 8007cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0201 	bic.w	r2, r2, #1
 8007d10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 f8e8 	bl	8008ef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fde9 	bl	80088f8 <UART_SetConfig>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e01b      	b.n	8007d68 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f967 	bl	8009034 <UART_CheckIdleState>
 8007d66:	4603      	mov	r3, r0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	08003ad5 	.word	0x08003ad5

08007d74 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d109      	bne.n	8007da0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e09c      	b.n	8007eda <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d16c      	bne.n	8007e84 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	2b0c      	cmp	r3, #12
 8007dae:	d85e      	bhi.n	8007e6e <HAL_UART_RegisterCallback+0xfa>
 8007db0:	a201      	add	r2, pc, #4	@ (adr r2, 8007db8 <HAL_UART_RegisterCallback+0x44>)
 8007db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db6:	bf00      	nop
 8007db8:	08007ded 	.word	0x08007ded
 8007dbc:	08007df7 	.word	0x08007df7
 8007dc0:	08007e01 	.word	0x08007e01
 8007dc4:	08007e0b 	.word	0x08007e0b
 8007dc8:	08007e15 	.word	0x08007e15
 8007dcc:	08007e1f 	.word	0x08007e1f
 8007dd0:	08007e29 	.word	0x08007e29
 8007dd4:	08007e33 	.word	0x08007e33
 8007dd8:	08007e3d 	.word	0x08007e3d
 8007ddc:	08007e47 	.word	0x08007e47
 8007de0:	08007e51 	.word	0x08007e51
 8007de4:	08007e5b 	.word	0x08007e5b
 8007de8:	08007e65 	.word	0x08007e65
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007df4:	e070      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007dfe:	e06b      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007e08:	e066      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007e12:	e061      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007e1c:	e05c      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007e26:	e057      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007e30:	e052      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007e3a:	e04d      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007e44:	e048      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007e4e:	e043      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007e58:	e03e      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007e62:	e039      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007e6c:	e034      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	75fb      	strb	r3, [r7, #23]
        break;
 8007e82:	e029      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d11a      	bne.n	8007ec4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8007e8e:	7afb      	ldrb	r3, [r7, #11]
 8007e90:	2b0b      	cmp	r3, #11
 8007e92:	d002      	beq.n	8007e9a <HAL_UART_RegisterCallback+0x126>
 8007e94:	2b0c      	cmp	r3, #12
 8007e96:	d005      	beq.n	8007ea4 <HAL_UART_RegisterCallback+0x130>
 8007e98:	e009      	b.n	8007eae <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007ea2:	e019      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007eac:	e014      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	75fb      	strb	r3, [r7, #23]
        break;
 8007ec2:	e009      	b.n	8007ed8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop

08007ee8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	@ 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d167      	bne.n	8007fd0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <HAL_UART_Transmit_DMA+0x24>
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e060      	b.n	8007fd2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	88fa      	ldrh	r2, [r7, #6]
 8007f1a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	88fa      	ldrh	r2, [r7, #6]
 8007f22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2221      	movs	r2, #33	@ 0x21
 8007f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d028      	beq.n	8007f90 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f42:	4a26      	ldr	r2, [pc, #152]	@ (8007fdc <HAL_UART_Transmit_DMA+0xf4>)
 8007f44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f4a:	4a25      	ldr	r2, [pc, #148]	@ (8007fe0 <HAL_UART_Transmit_DMA+0xf8>)
 8007f4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f52:	4a24      	ldr	r2, [pc, #144]	@ (8007fe4 <HAL_UART_Transmit_DMA+0xfc>)
 8007f54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f66:	4619      	mov	r1, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3328      	adds	r3, #40	@ 0x28
 8007f6e:	461a      	mov	r2, r3
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	f7fc f9b1 	bl	80042d8 <HAL_DMA_Start_IT>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d009      	beq.n	8007f90 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2210      	movs	r2, #16
 8007f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e020      	b.n	8007fd2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2240      	movs	r2, #64	@ 0x40
 8007f96:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb8:	623a      	str	r2, [r7, #32]
 8007fba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	69f9      	ldr	r1, [r7, #28]
 8007fbe:	6a3a      	ldr	r2, [r7, #32]
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e5      	bne.n	8007f98 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e000      	b.n	8007fd2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3728      	adds	r7, #40	@ 0x28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	080094ff 	.word	0x080094ff
 8007fe0:	0800959d 	.word	0x0800959d
 8007fe4:	08009737 	.word	0x08009737

08007fe8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	@ 0x28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d137      	bne.n	8008070 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_UART_Receive_DMA+0x24>
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e030      	b.n	8008072 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a18      	ldr	r2, [pc, #96]	@ (800807c <HAL_UART_Receive_DMA+0x94>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d01f      	beq.n	8008060 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d018      	beq.n	8008060 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	613b      	str	r3, [r7, #16]
   return(result);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008042:	627b      	str	r3, [r7, #36]	@ 0x24
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	61bb      	str	r3, [r7, #24]
   return(result);
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008060:	88fb      	ldrh	r3, [r7, #6]
 8008062:	461a      	mov	r2, r3
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f001 f8fc 	bl	8009264 <UART_Start_Receive_DMA>
 800806c:	4603      	mov	r3, r0
 800806e:	e000      	b.n	8008072 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008070:	2302      	movs	r3, #2
  }
}
 8008072:	4618      	mov	r0, r3
 8008074:	3728      	adds	r7, #40	@ 0x28
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	40008000 	.word	0x40008000

08008080 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b0ba      	sub	sp, #232	@ 0xe8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80080aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80080ae:	4013      	ands	r3, r2
 80080b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80080b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d11b      	bne.n	80080f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d015      	beq.n	80080f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080cc:	f003 0320 	and.w	r3, r3, #32
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d105      	bne.n	80080e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d009      	beq.n	80080f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 82f3 	beq.w	80086d0 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
      }
      return;
 80080f2:	e2ed      	b.n	80086d0 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8129 	beq.w	8008350 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008102:	4b90      	ldr	r3, [pc, #576]	@ (8008344 <HAL_UART_IRQHandler+0x2c4>)
 8008104:	4013      	ands	r3, r2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800810a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800810e:	4b8e      	ldr	r3, [pc, #568]	@ (8008348 <HAL_UART_IRQHandler+0x2c8>)
 8008110:	4013      	ands	r3, r2
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 811c 	beq.w	8008350 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d011      	beq.n	8008148 <HAL_UART_IRQHandler+0xc8>
 8008124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2201      	movs	r2, #1
 8008136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813e:	f043 0201 	orr.w	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d011      	beq.n	8008178 <HAL_UART_IRQHandler+0xf8>
 8008154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2202      	movs	r2, #2
 8008166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816e:	f043 0204 	orr.w	r2, r3, #4
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d011      	beq.n	80081a8 <HAL_UART_IRQHandler+0x128>
 8008184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2204      	movs	r2, #4
 8008196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819e:	f043 0202 	orr.w	r2, r3, #2
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ac:	f003 0308 	and.w	r3, r3, #8
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d017      	beq.n	80081e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d105      	bne.n	80081cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80081c4:	4b5f      	ldr	r3, [pc, #380]	@ (8008344 <HAL_UART_IRQHandler+0x2c4>)
 80081c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2208      	movs	r2, #8
 80081d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081da:	f043 0208 	orr.w	r2, r3, #8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d012      	beq.n	8008216 <HAL_UART_IRQHandler+0x196>
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00c      	beq.n	8008216 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008204:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800820c:	f043 0220 	orr.w	r2, r3, #32
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8259 	beq.w	80086d4 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d013      	beq.n	8008256 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800822e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800823a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800823e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800825c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826a:	2b40      	cmp	r3, #64	@ 0x40
 800826c:	d005      	beq.n	800827a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800826e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008272:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008276:	2b00      	cmp	r3, #0
 8008278:	d058      	beq.n	800832c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f001 f8d9 	bl	8009432 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828a:	2b40      	cmp	r3, #64	@ 0x40
 800828c:	d148      	bne.n	8008320 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80082a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3308      	adds	r3, #8
 80082b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80082ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80082be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80082c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80082d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1d9      	bne.n	800828e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d017      	beq.n	8008314 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ea:	4a18      	ldr	r2, [pc, #96]	@ (800834c <HAL_UART_IRQHandler+0x2cc>)
 80082ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fc f8c3 	bl	8004480 <HAL_DMA_Abort_IT>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01f      	beq.n	8008340 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800830e:	4610      	mov	r0, r2
 8008310:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008312:	e015      	b.n	8008340 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831e:	e00f      	b.n	8008340 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832a:	e009      	b.n	8008340 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800833e:	e1c9      	b.n	80086d4 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008340:	bf00      	nop
    return;
 8008342:	e1c7      	b.n	80086d4 <HAL_UART_IRQHandler+0x654>
 8008344:	10000001 	.word	0x10000001
 8008348:	04000120 	.word	0x04000120
 800834c:	080097bb 	.word	0x080097bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008354:	2b01      	cmp	r3, #1
 8008356:	f040 8157 	bne.w	8008608 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800835a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800835e:	f003 0310 	and.w	r3, r3, #16
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 8150 	beq.w	8008608 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800836c:	f003 0310 	and.w	r3, r3, #16
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 8149 	beq.w	8008608 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2210      	movs	r2, #16
 800837c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008388:	2b40      	cmp	r3, #64	@ 0x40
 800838a:	f040 80bd 	bne.w	8008508 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800839c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 8199 	beq.w	80086d8 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083b0:	429a      	cmp	r2, r3
 80083b2:	f080 8191 	bcs.w	80086d8 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f040 8087 	bne.w	80084e2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008402:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800840a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1da      	bne.n	80083d4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800842e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008442:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008446:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800844a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e1      	bne.n	800841e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3308      	adds	r3, #8
 8008460:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800846a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800846c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3308      	adds	r3, #8
 800847a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800847e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008480:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008484:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800848c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e3      	bne.n	800845a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084b0:	f023 0310 	bic.w	r3, r3, #16
 80084b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	461a      	mov	r2, r3
 80084be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e4      	bne.n	80084a0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fb ff76 	bl	80043ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2202      	movs	r2, #2
 80084e6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80084fa:	b292      	uxth	r2, r2
 80084fc:	1a8a      	subs	r2, r1, r2
 80084fe:	b292      	uxth	r2, r2
 8008500:	4611      	mov	r1, r2
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008506:	e0e7      	b.n	80086d8 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008514:	b29b      	uxth	r3, r3
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008522:	b29b      	uxth	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80d9 	beq.w	80086dc <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800852a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80d4 	beq.w	80086dc <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008556:	647b      	str	r3, [r7, #68]	@ 0x44
 8008558:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800855c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e4      	bne.n	8008534 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	623b      	str	r3, [r7, #32]
   return(result);
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008580:	f023 0301 	bic.w	r3, r3, #1
 8008584:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3308      	adds	r3, #8
 800858e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008592:	633a      	str	r2, [r7, #48]	@ 0x30
 8008594:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e1      	bne.n	800856a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0310 	bic.w	r3, r3, #16
 80085ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	69b9      	ldr	r1, [r7, #24]
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	617b      	str	r3, [r7, #20]
   return(result);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e4      	bne.n	80085ba <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80085fc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008600:	4611      	mov	r1, r2
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008606:	e069      	b.n	80086dc <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d010      	beq.n	8008636 <HAL_UART_IRQHandler+0x5b6>
 8008614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00a      	beq.n	8008636 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008628:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008634:	e055      	b.n	80086e2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863e:	2b00      	cmp	r3, #0
 8008640:	d014      	beq.n	800866c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800864a:	2b00      	cmp	r3, #0
 800864c:	d105      	bne.n	800865a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800864e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800865e:	2b00      	cmp	r3, #0
 8008660:	d03e      	beq.n	80086e0 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
    }
    return;
 800866a:	e039      	b.n	80086e0 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800866c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <HAL_UART_IRQHandler+0x60c>
 8008678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800867c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f8b0 	bl	80097ea <UART_EndTransmit_IT>
    return;
 800868a:	e02a      	b.n	80086e2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800868c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008690:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <HAL_UART_IRQHandler+0x630>
 8008698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800869c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086ae:	e018      	b.n	80086e2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d012      	beq.n	80086e2 <HAL_UART_IRQHandler+0x662>
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	da0e      	bge.n	80086e2 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086ce:	e008      	b.n	80086e2 <HAL_UART_IRQHandler+0x662>
      return;
 80086d0:	bf00      	nop
 80086d2:	e006      	b.n	80086e2 <HAL_UART_IRQHandler+0x662>
    return;
 80086d4:	bf00      	nop
 80086d6:	e004      	b.n	80086e2 <HAL_UART_IRQHandler+0x662>
      return;
 80086d8:	bf00      	nop
 80086da:	e002      	b.n	80086e2 <HAL_UART_IRQHandler+0x662>
      return;
 80086dc:	bf00      	nop
 80086de:	e000      	b.n	80086e2 <HAL_UART_IRQHandler+0x662>
    return;
 80086e0:	bf00      	nop
  }
}
 80086e2:	37e8      	adds	r7, #232	@ 0xe8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a09      	ldr	r2, [pc, #36]	@ (80087c0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d009      	beq.n	80087b4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	615a      	str	r2, [r3, #20]
  }
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	40008000 	.word	0x40008000

080087c4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a18      	ldr	r2, [pc, #96]	@ (8008834 <HAL_UART_EnableReceiverTimeout+0x70>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d027      	beq.n	8008826 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d120      	bne.n	8008822 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d101      	bne.n	80087ee <HAL_UART_EnableReceiverTimeout+0x2a>
 80087ea:	2302      	movs	r3, #2
 80087ec:	e01c      	b.n	8008828 <HAL_UART_EnableReceiverTimeout+0x64>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2224      	movs	r2, #36	@ 0x24
 80087fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800880c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	e002      	b.n	8008828 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8008822:	2302      	movs	r3, #2
 8008824:	e000      	b.n	8008828 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
  }
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	40008000 	.word	0x40008000

08008838 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
	...

08008854 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a1a      	ldr	r2, [pc, #104]	@ (80088c8 <UART_InitCallbacksToDefault+0x74>)
 8008860:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a19      	ldr	r2, [pc, #100]	@ (80088cc <UART_InitCallbacksToDefault+0x78>)
 8008868:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a18      	ldr	r2, [pc, #96]	@ (80088d0 <UART_InitCallbacksToDefault+0x7c>)
 8008870:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a17      	ldr	r2, [pc, #92]	@ (80088d4 <UART_InitCallbacksToDefault+0x80>)
 8008878:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a16      	ldr	r2, [pc, #88]	@ (80088d8 <UART_InitCallbacksToDefault+0x84>)
 8008880:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a15      	ldr	r2, [pc, #84]	@ (80088dc <UART_InitCallbacksToDefault+0x88>)
 8008888:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a14      	ldr	r2, [pc, #80]	@ (80088e0 <UART_InitCallbacksToDefault+0x8c>)
 8008890:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a13      	ldr	r2, [pc, #76]	@ (80088e4 <UART_InitCallbacksToDefault+0x90>)
 8008898:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a12      	ldr	r2, [pc, #72]	@ (80088e8 <UART_InitCallbacksToDefault+0x94>)
 80088a0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a11      	ldr	r2, [pc, #68]	@ (80088ec <UART_InitCallbacksToDefault+0x98>)
 80088a8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a10      	ldr	r2, [pc, #64]	@ (80088f0 <UART_InitCallbacksToDefault+0x9c>)
 80088b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a0f      	ldr	r2, [pc, #60]	@ (80088f4 <UART_InitCallbacksToDefault+0xa0>)
 80088b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	080086fd 	.word	0x080086fd
 80088cc:	080086e9 	.word	0x080086e9
 80088d0:	08008711 	.word	0x08008711
 80088d4:	0800286d 	.word	0x0800286d
 80088d8:	08008725 	.word	0x08008725
 80088dc:	08008739 	.word	0x08008739
 80088e0:	0800874d 	.word	0x0800874d
 80088e4:	08008761 	.word	0x08008761
 80088e8:	08009845 	.word	0x08009845
 80088ec:	08009859 	.word	0x08009859
 80088f0:	0800986d 	.word	0x0800986d
 80088f4:	08008775 	.word	0x08008775

080088f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088fc:	b08c      	sub	sp, #48	@ 0x30
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	431a      	orrs	r2, r3
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	431a      	orrs	r2, r3
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	4313      	orrs	r3, r2
 800891e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4baa      	ldr	r3, [pc, #680]	@ (8008bd0 <UART_SetConfig+0x2d8>)
 8008928:	4013      	ands	r3, r2
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	6812      	ldr	r2, [r2, #0]
 800892e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008930:	430b      	orrs	r3, r1
 8008932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a9f      	ldr	r2, [pc, #636]	@ (8008bd4 <UART_SetConfig+0x2dc>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d004      	beq.n	8008964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008960:	4313      	orrs	r3, r2
 8008962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800896e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008978:	430b      	orrs	r3, r1
 800897a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008982:	f023 010f 	bic.w	r1, r3, #15
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a90      	ldr	r2, [pc, #576]	@ (8008bd8 <UART_SetConfig+0x2e0>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d125      	bne.n	80089e8 <UART_SetConfig+0xf0>
 800899c:	4b8f      	ldr	r3, [pc, #572]	@ (8008bdc <UART_SetConfig+0x2e4>)
 800899e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d81a      	bhi.n	80089e0 <UART_SetConfig+0xe8>
 80089aa:	a201      	add	r2, pc, #4	@ (adr r2, 80089b0 <UART_SetConfig+0xb8>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	080089c1 	.word	0x080089c1
 80089b4:	080089d1 	.word	0x080089d1
 80089b8:	080089c9 	.word	0x080089c9
 80089bc:	080089d9 	.word	0x080089d9
 80089c0:	2301      	movs	r3, #1
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089c6:	e116      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 80089c8:	2302      	movs	r3, #2
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ce:	e112      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 80089d0:	2304      	movs	r3, #4
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089d6:	e10e      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 80089d8:	2308      	movs	r3, #8
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089de:	e10a      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 80089e0:	2310      	movs	r3, #16
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e6:	e106      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a7c      	ldr	r2, [pc, #496]	@ (8008be0 <UART_SetConfig+0x2e8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d138      	bne.n	8008a64 <UART_SetConfig+0x16c>
 80089f2:	4b7a      	ldr	r3, [pc, #488]	@ (8008bdc <UART_SetConfig+0x2e4>)
 80089f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f8:	f003 030c 	and.w	r3, r3, #12
 80089fc:	2b0c      	cmp	r3, #12
 80089fe:	d82d      	bhi.n	8008a5c <UART_SetConfig+0x164>
 8008a00:	a201      	add	r2, pc, #4	@ (adr r2, 8008a08 <UART_SetConfig+0x110>)
 8008a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a06:	bf00      	nop
 8008a08:	08008a3d 	.word	0x08008a3d
 8008a0c:	08008a5d 	.word	0x08008a5d
 8008a10:	08008a5d 	.word	0x08008a5d
 8008a14:	08008a5d 	.word	0x08008a5d
 8008a18:	08008a4d 	.word	0x08008a4d
 8008a1c:	08008a5d 	.word	0x08008a5d
 8008a20:	08008a5d 	.word	0x08008a5d
 8008a24:	08008a5d 	.word	0x08008a5d
 8008a28:	08008a45 	.word	0x08008a45
 8008a2c:	08008a5d 	.word	0x08008a5d
 8008a30:	08008a5d 	.word	0x08008a5d
 8008a34:	08008a5d 	.word	0x08008a5d
 8008a38:	08008a55 	.word	0x08008a55
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a42:	e0d8      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008a44:	2302      	movs	r3, #2
 8008a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a4a:	e0d4      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a52:	e0d0      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008a54:	2308      	movs	r3, #8
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a5a:	e0cc      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008a5c:	2310      	movs	r3, #16
 8008a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a62:	e0c8      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a5e      	ldr	r2, [pc, #376]	@ (8008be4 <UART_SetConfig+0x2ec>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d125      	bne.n	8008aba <UART_SetConfig+0x1c2>
 8008a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8008bdc <UART_SetConfig+0x2e4>)
 8008a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008a78:	2b30      	cmp	r3, #48	@ 0x30
 8008a7a:	d016      	beq.n	8008aaa <UART_SetConfig+0x1b2>
 8008a7c:	2b30      	cmp	r3, #48	@ 0x30
 8008a7e:	d818      	bhi.n	8008ab2 <UART_SetConfig+0x1ba>
 8008a80:	2b20      	cmp	r3, #32
 8008a82:	d00a      	beq.n	8008a9a <UART_SetConfig+0x1a2>
 8008a84:	2b20      	cmp	r3, #32
 8008a86:	d814      	bhi.n	8008ab2 <UART_SetConfig+0x1ba>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <UART_SetConfig+0x19a>
 8008a8c:	2b10      	cmp	r3, #16
 8008a8e:	d008      	beq.n	8008aa2 <UART_SetConfig+0x1aa>
 8008a90:	e00f      	b.n	8008ab2 <UART_SetConfig+0x1ba>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a98:	e0ad      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa0:	e0a9      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008aa2:	2304      	movs	r3, #4
 8008aa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa8:	e0a5      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008aaa:	2308      	movs	r3, #8
 8008aac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab0:	e0a1      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008ab2:	2310      	movs	r3, #16
 8008ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab8:	e09d      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a4a      	ldr	r2, [pc, #296]	@ (8008be8 <UART_SetConfig+0x2f0>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d125      	bne.n	8008b10 <UART_SetConfig+0x218>
 8008ac4:	4b45      	ldr	r3, [pc, #276]	@ (8008bdc <UART_SetConfig+0x2e4>)
 8008ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ad0:	d016      	beq.n	8008b00 <UART_SetConfig+0x208>
 8008ad2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ad4:	d818      	bhi.n	8008b08 <UART_SetConfig+0x210>
 8008ad6:	2b80      	cmp	r3, #128	@ 0x80
 8008ad8:	d00a      	beq.n	8008af0 <UART_SetConfig+0x1f8>
 8008ada:	2b80      	cmp	r3, #128	@ 0x80
 8008adc:	d814      	bhi.n	8008b08 <UART_SetConfig+0x210>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <UART_SetConfig+0x1f0>
 8008ae2:	2b40      	cmp	r3, #64	@ 0x40
 8008ae4:	d008      	beq.n	8008af8 <UART_SetConfig+0x200>
 8008ae6:	e00f      	b.n	8008b08 <UART_SetConfig+0x210>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aee:	e082      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008af0:	2302      	movs	r3, #2
 8008af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af6:	e07e      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008af8:	2304      	movs	r3, #4
 8008afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008afe:	e07a      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008b00:	2308      	movs	r3, #8
 8008b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b06:	e076      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008b08:	2310      	movs	r3, #16
 8008b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b0e:	e072      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a35      	ldr	r2, [pc, #212]	@ (8008bec <UART_SetConfig+0x2f4>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d12a      	bne.n	8008b70 <UART_SetConfig+0x278>
 8008b1a:	4b30      	ldr	r3, [pc, #192]	@ (8008bdc <UART_SetConfig+0x2e4>)
 8008b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b28:	d01a      	beq.n	8008b60 <UART_SetConfig+0x268>
 8008b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b2e:	d81b      	bhi.n	8008b68 <UART_SetConfig+0x270>
 8008b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b34:	d00c      	beq.n	8008b50 <UART_SetConfig+0x258>
 8008b36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b3a:	d815      	bhi.n	8008b68 <UART_SetConfig+0x270>
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <UART_SetConfig+0x250>
 8008b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b44:	d008      	beq.n	8008b58 <UART_SetConfig+0x260>
 8008b46:	e00f      	b.n	8008b68 <UART_SetConfig+0x270>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b4e:	e052      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008b50:	2302      	movs	r3, #2
 8008b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b56:	e04e      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008b58:	2304      	movs	r3, #4
 8008b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b5e:	e04a      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008b60:	2308      	movs	r3, #8
 8008b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b66:	e046      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008b68:	2310      	movs	r3, #16
 8008b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b6e:	e042      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a17      	ldr	r2, [pc, #92]	@ (8008bd4 <UART_SetConfig+0x2dc>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d13a      	bne.n	8008bf0 <UART_SetConfig+0x2f8>
 8008b7a:	4b18      	ldr	r3, [pc, #96]	@ (8008bdc <UART_SetConfig+0x2e4>)
 8008b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008b84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b88:	d01a      	beq.n	8008bc0 <UART_SetConfig+0x2c8>
 8008b8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b8e:	d81b      	bhi.n	8008bc8 <UART_SetConfig+0x2d0>
 8008b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b94:	d00c      	beq.n	8008bb0 <UART_SetConfig+0x2b8>
 8008b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b9a:	d815      	bhi.n	8008bc8 <UART_SetConfig+0x2d0>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <UART_SetConfig+0x2b0>
 8008ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ba4:	d008      	beq.n	8008bb8 <UART_SetConfig+0x2c0>
 8008ba6:	e00f      	b.n	8008bc8 <UART_SetConfig+0x2d0>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bae:	e022      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bb6:	e01e      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008bb8:	2304      	movs	r3, #4
 8008bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bbe:	e01a      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008bc0:	2308      	movs	r3, #8
 8008bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bc6:	e016      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008bc8:	2310      	movs	r3, #16
 8008bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bce:	e012      	b.n	8008bf6 <UART_SetConfig+0x2fe>
 8008bd0:	cfff69f3 	.word	0xcfff69f3
 8008bd4:	40008000 	.word	0x40008000
 8008bd8:	40013800 	.word	0x40013800
 8008bdc:	40021000 	.word	0x40021000
 8008be0:	40004400 	.word	0x40004400
 8008be4:	40004800 	.word	0x40004800
 8008be8:	40004c00 	.word	0x40004c00
 8008bec:	40005000 	.word	0x40005000
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4aae      	ldr	r2, [pc, #696]	@ (8008eb4 <UART_SetConfig+0x5bc>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	f040 8097 	bne.w	8008d30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d823      	bhi.n	8008c52 <UART_SetConfig+0x35a>
 8008c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <UART_SetConfig+0x318>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c53 	.word	0x08008c53
 8008c18:	08008c3d 	.word	0x08008c3d
 8008c1c:	08008c53 	.word	0x08008c53
 8008c20:	08008c43 	.word	0x08008c43
 8008c24:	08008c53 	.word	0x08008c53
 8008c28:	08008c53 	.word	0x08008c53
 8008c2c:	08008c53 	.word	0x08008c53
 8008c30:	08008c4b 	.word	0x08008c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c34:	f7fc fd20 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8008c38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c3a:	e010      	b.n	8008c5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c3c:	4b9e      	ldr	r3, [pc, #632]	@ (8008eb8 <UART_SetConfig+0x5c0>)
 8008c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c40:	e00d      	b.n	8008c5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c42:	f7fc fcab 	bl	800559c <HAL_RCC_GetSysClockFreq>
 8008c46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c48:	e009      	b.n	8008c5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c50:	e005      	b.n	8008c5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8130 	beq.w	8008ec6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6a:	4a94      	ldr	r2, [pc, #592]	@ (8008ebc <UART_SetConfig+0x5c4>)
 8008c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c70:	461a      	mov	r2, r3
 8008c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	4413      	add	r3, r2
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d305      	bcc.n	8008c96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d903      	bls.n	8008c9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c9c:	e113      	b.n	8008ec6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	60bb      	str	r3, [r7, #8]
 8008ca4:	60fa      	str	r2, [r7, #12]
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008caa:	4a84      	ldr	r2, [pc, #528]	@ (8008ebc <UART_SetConfig+0x5c4>)
 8008cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	603b      	str	r3, [r7, #0]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cc0:	f7f7 ffae 	bl	8000c20 <__aeabi_uldivmod>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	f04f 0300 	mov.w	r3, #0
 8008cd4:	020b      	lsls	r3, r1, #8
 8008cd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cda:	0202      	lsls	r2, r0, #8
 8008cdc:	6979      	ldr	r1, [r7, #20]
 8008cde:	6849      	ldr	r1, [r1, #4]
 8008ce0:	0849      	lsrs	r1, r1, #1
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	eb12 0804 	adds.w	r8, r2, r4
 8008cec:	eb43 0905 	adc.w	r9, r3, r5
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	469a      	mov	sl, r3
 8008cf8:	4693      	mov	fp, r2
 8008cfa:	4652      	mov	r2, sl
 8008cfc:	465b      	mov	r3, fp
 8008cfe:	4640      	mov	r0, r8
 8008d00:	4649      	mov	r1, r9
 8008d02:	f7f7 ff8d 	bl	8000c20 <__aeabi_uldivmod>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d14:	d308      	bcc.n	8008d28 <UART_SetConfig+0x430>
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d1c:	d204      	bcs.n	8008d28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6a3a      	ldr	r2, [r7, #32]
 8008d24:	60da      	str	r2, [r3, #12]
 8008d26:	e0ce      	b.n	8008ec6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d2e:	e0ca      	b.n	8008ec6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d38:	d166      	bne.n	8008e08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d3e:	2b08      	cmp	r3, #8
 8008d40:	d827      	bhi.n	8008d92 <UART_SetConfig+0x49a>
 8008d42:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <UART_SetConfig+0x450>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d6d 	.word	0x08008d6d
 8008d4c:	08008d75 	.word	0x08008d75
 8008d50:	08008d7d 	.word	0x08008d7d
 8008d54:	08008d93 	.word	0x08008d93
 8008d58:	08008d83 	.word	0x08008d83
 8008d5c:	08008d93 	.word	0x08008d93
 8008d60:	08008d93 	.word	0x08008d93
 8008d64:	08008d93 	.word	0x08008d93
 8008d68:	08008d8b 	.word	0x08008d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d6c:	f7fc fc84 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8008d70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d72:	e014      	b.n	8008d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d74:	f7fc fc96 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 8008d78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d7a:	e010      	b.n	8008d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d7c:	4b4e      	ldr	r3, [pc, #312]	@ (8008eb8 <UART_SetConfig+0x5c0>)
 8008d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d80:	e00d      	b.n	8008d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d82:	f7fc fc0b 	bl	800559c <HAL_RCC_GetSysClockFreq>
 8008d86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d88:	e009      	b.n	8008d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d90:	e005      	b.n	8008d9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 8090 	beq.w	8008ec6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	4a44      	ldr	r2, [pc, #272]	@ (8008ebc <UART_SetConfig+0x5c4>)
 8008dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008db8:	005a      	lsls	r2, r3, #1
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	441a      	add	r2, r3
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	2b0f      	cmp	r3, #15
 8008dd0:	d916      	bls.n	8008e00 <UART_SetConfig+0x508>
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd8:	d212      	bcs.n	8008e00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f023 030f 	bic.w	r3, r3, #15
 8008de2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f003 0307 	and.w	r3, r3, #7
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	8bfb      	ldrh	r3, [r7, #30]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	8bfa      	ldrh	r2, [r7, #30]
 8008dfc:	60da      	str	r2, [r3, #12]
 8008dfe:	e062      	b.n	8008ec6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e06:	e05e      	b.n	8008ec6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	d828      	bhi.n	8008e62 <UART_SetConfig+0x56a>
 8008e10:	a201      	add	r2, pc, #4	@ (adr r2, 8008e18 <UART_SetConfig+0x520>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e3d 	.word	0x08008e3d
 8008e1c:	08008e45 	.word	0x08008e45
 8008e20:	08008e4d 	.word	0x08008e4d
 8008e24:	08008e63 	.word	0x08008e63
 8008e28:	08008e53 	.word	0x08008e53
 8008e2c:	08008e63 	.word	0x08008e63
 8008e30:	08008e63 	.word	0x08008e63
 8008e34:	08008e63 	.word	0x08008e63
 8008e38:	08008e5b 	.word	0x08008e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e3c:	f7fc fc1c 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8008e40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e42:	e014      	b.n	8008e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e44:	f7fc fc2e 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 8008e48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e4a:	e010      	b.n	8008e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008eb8 <UART_SetConfig+0x5c0>)
 8008e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e50:	e00d      	b.n	8008e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e52:	f7fc fba3 	bl	800559c <HAL_RCC_GetSysClockFreq>
 8008e56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e58:	e009      	b.n	8008e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e60:	e005      	b.n	8008e6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e6c:	bf00      	nop
    }

    if (pclk != 0U)
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d028      	beq.n	8008ec6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e78:	4a10      	ldr	r2, [pc, #64]	@ (8008ebc <UART_SetConfig+0x5c4>)
 8008e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	441a      	add	r2, r3
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	2b0f      	cmp	r3, #15
 8008e9c:	d910      	bls.n	8008ec0 <UART_SetConfig+0x5c8>
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ea4:	d20c      	bcs.n	8008ec0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	60da      	str	r2, [r3, #12]
 8008eb0:	e009      	b.n	8008ec6 <UART_SetConfig+0x5ce>
 8008eb2:	bf00      	nop
 8008eb4:	40008000 	.word	0x40008000
 8008eb8:	00f42400 	.word	0x00f42400
 8008ebc:	0800aab8 	.word	0x0800aab8
      }
      else
      {
        ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ee2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3730      	adds	r7, #48	@ 0x30
 8008eea:	46bd      	mov	sp, r7
 8008eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00a      	beq.n	8008f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00a      	beq.n	8008f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa6:	f003 0320 	and.w	r3, r3, #32
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01a      	beq.n	8009006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fee:	d10a      	bne.n	8009006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	605a      	str	r2, [r3, #4]
  }
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b098      	sub	sp, #96	@ 0x60
 8009038:	af02      	add	r7, sp, #8
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009044:	f7fa ff84 	bl	8003f50 <HAL_GetTick>
 8009048:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b08      	cmp	r3, #8
 8009056:	d12f      	bne.n	80090b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009060:	2200      	movs	r2, #0
 8009062:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f88e 	bl	8009188 <UART_WaitOnFlagUntilTimeout>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d022      	beq.n	80090b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009086:	653b      	str	r3, [r7, #80]	@ 0x50
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	461a      	mov	r2, r3
 800908e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009090:	647b      	str	r3, [r7, #68]	@ 0x44
 8009092:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800909e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e6      	bne.n	8009072 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e063      	b.n	8009180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0304 	and.w	r3, r3, #4
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d149      	bne.n	800915a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090ce:	2200      	movs	r2, #0
 80090d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f857 	bl	8009188 <UART_WaitOnFlagUntilTimeout>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d03c      	beq.n	800915a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	623b      	str	r3, [r7, #32]
   return(result);
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009100:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800910c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e6      	bne.n	80090e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	60fb      	str	r3, [r7, #12]
   return(result);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f023 0301 	bic.w	r3, r3, #1
 8009128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3308      	adds	r3, #8
 8009130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009132:	61fa      	str	r2, [r7, #28]
 8009134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	69b9      	ldr	r1, [r7, #24]
 8009138:	69fa      	ldr	r2, [r7, #28]
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	617b      	str	r3, [r7, #20]
   return(result);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e5      	bne.n	8009112 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2220      	movs	r2, #32
 800914a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e012      	b.n	8009180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3758      	adds	r7, #88	@ 0x58
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	4613      	mov	r3, r2
 8009196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009198:	e04f      	b.n	800923a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d04b      	beq.n	800923a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a2:	f7fa fed5 	bl	8003f50 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e04e      	b.n	800925a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d037      	beq.n	800923a <UART_WaitOnFlagUntilTimeout+0xb2>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	2b80      	cmp	r3, #128	@ 0x80
 80091ce:	d034      	beq.n	800923a <UART_WaitOnFlagUntilTimeout+0xb2>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b40      	cmp	r3, #64	@ 0x40
 80091d4:	d031      	beq.n	800923a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d110      	bne.n	8009206 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2208      	movs	r2, #8
 80091ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f920 	bl	8009432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2208      	movs	r2, #8
 80091f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e029      	b.n	800925a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009214:	d111      	bne.n	800923a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800921e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f906 	bl	8009432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2220      	movs	r2, #32
 800922a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e00f      	b.n	800925a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69da      	ldr	r2, [r3, #28]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4013      	ands	r3, r2
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	429a      	cmp	r2, r3
 8009248:	bf0c      	ite	eq
 800924a:	2301      	moveq	r3, #1
 800924c:	2300      	movne	r3, #0
 800924e:	b2db      	uxtb	r3, r3
 8009250:	461a      	mov	r2, r3
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	429a      	cmp	r2, r3
 8009256:	d0a0      	beq.n	800919a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b096      	sub	sp, #88	@ 0x58
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	4613      	mov	r3, r2
 8009270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	88fa      	ldrh	r2, [r7, #6]
 800927c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2222      	movs	r2, #34	@ 0x22
 800928c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009296:	2b00      	cmp	r3, #0
 8009298:	d02d      	beq.n	80092f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092a0:	4a40      	ldr	r2, [pc, #256]	@ (80093a4 <UART_Start_Receive_DMA+0x140>)
 80092a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092aa:	4a3f      	ldr	r2, [pc, #252]	@ (80093a8 <UART_Start_Receive_DMA+0x144>)
 80092ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092b4:	4a3d      	ldr	r2, [pc, #244]	@ (80093ac <UART_Start_Receive_DMA+0x148>)
 80092b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092be:	2200      	movs	r2, #0
 80092c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3324      	adds	r3, #36	@ 0x24
 80092ce:	4619      	mov	r1, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d4:	461a      	mov	r2, r3
 80092d6:	88fb      	ldrh	r3, [r7, #6]
 80092d8:	f7fa fffe 	bl	80042d8 <HAL_DMA_Start_IT>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d009      	beq.n	80092f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2210      	movs	r2, #16
 80092e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2220      	movs	r2, #32
 80092ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e051      	b.n	800939a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d018      	beq.n	8009330 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800930c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009312:	657b      	str	r3, [r7, #84]	@ 0x54
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	461a      	mov	r2, r3
 800931a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800931c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800931e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800932a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e6      	bne.n	80092fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3308      	adds	r3, #8
 8009336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	653b      	str	r3, [r7, #80]	@ 0x50
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3308      	adds	r3, #8
 800934e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009350:	637a      	str	r2, [r7, #52]	@ 0x34
 8009352:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e5      	bne.n	8009330 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	613b      	str	r3, [r7, #16]
   return(result);
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800937a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009384:	623a      	str	r2, [r7, #32]
 8009386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	69f9      	ldr	r1, [r7, #28]
 800938a:	6a3a      	ldr	r2, [r7, #32]
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	61bb      	str	r3, [r7, #24]
   return(result);
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3758      	adds	r7, #88	@ 0x58
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	080095bd 	.word	0x080095bd
 80093a8:	080096f1 	.word	0x080096f1
 80093ac:	08009737 	.word	0x08009737

080093b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b08f      	sub	sp, #60	@ 0x3c
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e6      	bne.n	80093b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009400:	633b      	str	r3, [r7, #48]	@ 0x30
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800940a:	61ba      	str	r2, [r7, #24]
 800940c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6979      	ldr	r1, [r7, #20]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	613b      	str	r3, [r7, #16]
   return(result);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e5      	bne.n	80093ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009426:	bf00      	nop
 8009428:	373c      	adds	r7, #60	@ 0x3c
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009432:	b480      	push	{r7}
 8009434:	b095      	sub	sp, #84	@ 0x54
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800944e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	461a      	mov	r2, r3
 8009456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009458:	643b      	str	r3, [r7, #64]	@ 0x40
 800945a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800945e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009460:	e841 2300 	strex	r3, r2, [r1]
 8009464:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1e6      	bne.n	800943a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3308      	adds	r3, #8
 8009472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	61fb      	str	r3, [r7, #28]
   return(result);
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009482:	f023 0301 	bic.w	r3, r3, #1
 8009486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3308      	adds	r3, #8
 800948e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009490:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009492:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e3      	bne.n	800946c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d118      	bne.n	80094de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f023 0310 	bic.w	r3, r3, #16
 80094c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6979      	ldr	r1, [r7, #20]
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	613b      	str	r3, [r7, #16]
   return(result);
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e6      	bne.n	80094ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80094f2:	bf00      	nop
 80094f4:	3754      	adds	r7, #84	@ 0x54
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b090      	sub	sp, #64	@ 0x40
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d137      	bne.n	800958a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800951a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800951c:	2200      	movs	r2, #0
 800951e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	623b      	str	r3, [r7, #32]
   return(result);
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009538:	63bb      	str	r3, [r7, #56]	@ 0x38
 800953a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3308      	adds	r3, #8
 8009540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009542:	633a      	str	r2, [r7, #48]	@ 0x30
 8009544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e5      	bne.n	8009522 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	60fb      	str	r3, [r7, #12]
   return(result);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
 800956c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	69b9      	ldr	r1, [r7, #24]
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	617b      	str	r3, [r7, #20]
   return(result);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e6      	bne.n	8009556 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009588:	e004      	b.n	8009594 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800958a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800958c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009590:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009592:	4798      	blx	r3
}
 8009594:	bf00      	nop
 8009596:	3740      	adds	r7, #64	@ 0x40
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b09c      	sub	sp, #112	@ 0x70
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 0320 	and.w	r3, r3, #32
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d171      	bne.n	80096bc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80095d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095da:	2200      	movs	r2, #0
 80095dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009600:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009604:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800960c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e6      	bne.n	80095e0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3308      	adds	r3, #8
 8009618:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	e853 3f00 	ldrex	r3, [r3]
 8009620:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009624:	f023 0301 	bic.w	r3, r3, #1
 8009628:	667b      	str	r3, [r7, #100]	@ 0x64
 800962a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3308      	adds	r3, #8
 8009630:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009632:	647a      	str	r2, [r7, #68]	@ 0x44
 8009634:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009638:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e5      	bne.n	8009612 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3308      	adds	r3, #8
 800964c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	623b      	str	r3, [r7, #32]
   return(result);
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800965c:	663b      	str	r3, [r7, #96]	@ 0x60
 800965e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3308      	adds	r3, #8
 8009664:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009666:	633a      	str	r2, [r7, #48]	@ 0x30
 8009668:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800966c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e5      	bne.n	8009646 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800967a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800967c:	2220      	movs	r2, #32
 800967e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009686:	2b01      	cmp	r3, #1
 8009688:	d118      	bne.n	80096bc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800968a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	60fb      	str	r3, [r7, #12]
   return(result);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f023 0310 	bic.w	r3, r3, #16
 800969e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	461a      	mov	r2, r3
 80096a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096a8:	61fb      	str	r3, [r7, #28]
 80096aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	69b9      	ldr	r1, [r7, #24]
 80096ae:	69fa      	ldr	r2, [r7, #28]
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	617b      	str	r3, [r7, #20]
   return(result);
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e6      	bne.n	800968a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096be:	2200      	movs	r2, #0
 80096c0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d109      	bne.n	80096de <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80096ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80096d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096d2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80096d6:	4611      	mov	r1, r2
 80096d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80096da:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096dc:	e004      	b.n	80096e8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80096de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80096e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80096e6:	4798      	blx	r3
}
 80096e8:	bf00      	nop
 80096ea:	3770      	adds	r7, #112	@ 0x70
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009708:	2b01      	cmp	r3, #1
 800970a:	d10b      	bne.n	8009724 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009718:	0852      	lsrs	r2, r2, #1
 800971a:	b292      	uxth	r2, r2
 800971c:	4611      	mov	r1, r2
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009722:	e004      	b.n	800972e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	4798      	blx	r3
}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b086      	sub	sp, #24
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009742:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800974a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009752:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800975e:	2b80      	cmp	r3, #128	@ 0x80
 8009760:	d109      	bne.n	8009776 <UART_DMAError+0x40>
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b21      	cmp	r3, #33	@ 0x21
 8009766:	d106      	bne.n	8009776 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2200      	movs	r2, #0
 800976c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009770:	6978      	ldr	r0, [r7, #20]
 8009772:	f7ff fe1d 	bl	80093b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009780:	2b40      	cmp	r3, #64	@ 0x40
 8009782:	d109      	bne.n	8009798 <UART_DMAError+0x62>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b22      	cmp	r3, #34	@ 0x22
 8009788:	d106      	bne.n	8009798 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2200      	movs	r2, #0
 800978e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009792:	6978      	ldr	r0, [r7, #20]
 8009794:	f7ff fe4d 	bl	8009432 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979e:	f043 0210 	orr.w	r2, r3, #16
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097ae:	6978      	ldr	r0, [r7, #20]
 80097b0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b2:	bf00      	nop
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e2:	bf00      	nop
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b088      	sub	sp, #32
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009806:	61fb      	str	r3, [r7, #28]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	61bb      	str	r3, [r7, #24]
 8009812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6979      	ldr	r1, [r7, #20]
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	613b      	str	r3, [r7, #16]
   return(result);
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800983c:	bf00      	nop
 800983e:	3720      	adds	r7, #32
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800988e:	2b01      	cmp	r3, #1
 8009890:	d101      	bne.n	8009896 <HAL_UARTEx_DisableFifoMode+0x16>
 8009892:	2302      	movs	r3, #2
 8009894:	e027      	b.n	80098e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2224      	movs	r2, #36	@ 0x24
 80098a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 0201 	bic.w	r2, r2, #1
 80098bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2220      	movs	r2, #32
 80098d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009902:	2b01      	cmp	r3, #1
 8009904:	d101      	bne.n	800990a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009906:	2302      	movs	r3, #2
 8009908:	e02d      	b.n	8009966 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2224      	movs	r2, #36	@ 0x24
 8009916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 0201 	bic.w	r2, r2, #1
 8009930:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f850 	bl	80099ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800997e:	2b01      	cmp	r3, #1
 8009980:	d101      	bne.n	8009986 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009982:	2302      	movs	r3, #2
 8009984:	e02d      	b.n	80099e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2224      	movs	r2, #36	@ 0x24
 8009992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0201 	bic.w	r2, r2, #1
 80099ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f812 	bl	80099ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d108      	bne.n	8009a0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a0c:	e031      	b.n	8009a72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a0e:	2308      	movs	r3, #8
 8009a10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a12:	2308      	movs	r3, #8
 8009a14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	0e5b      	lsrs	r3, r3, #25
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	0f5b      	lsrs	r3, r3, #29
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	7b3a      	ldrb	r2, [r7, #12]
 8009a3a:	4911      	ldr	r1, [pc, #68]	@ (8009a80 <UARTEx_SetNbDataToProcess+0x94>)
 8009a3c:	5c8a      	ldrb	r2, [r1, r2]
 8009a3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a42:	7b3a      	ldrb	r2, [r7, #12]
 8009a44:	490f      	ldr	r1, [pc, #60]	@ (8009a84 <UARTEx_SetNbDataToProcess+0x98>)
 8009a46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	7b7a      	ldrb	r2, [r7, #13]
 8009a58:	4909      	ldr	r1, [pc, #36]	@ (8009a80 <UARTEx_SetNbDataToProcess+0x94>)
 8009a5a:	5c8a      	ldrb	r2, [r1, r2]
 8009a5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a60:	7b7a      	ldrb	r2, [r7, #13]
 8009a62:	4908      	ldr	r1, [pc, #32]	@ (8009a84 <UARTEx_SetNbDataToProcess+0x98>)
 8009a64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a72:	bf00      	nop
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	0800aad0 	.word	0x0800aad0
 8009a84:	0800aad8 	.word	0x0800aad8

08009a88 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	ed93 7a06 	vldr	s14, [r3, #24]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8009a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	edd3 7a08 	vldr	s15, [r3, #32]
 8009aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	edd3 7a06 	vldr	s15, [r3, #24]
 8009ab8:	eeb1 7a67 	vneg.f32	s14, s15
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	edd3 7a08 	vldr	s15, [r3, #32]
 8009ac2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a1a      	ldr	r2, [r3, #32]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d006      	beq.n	8009aec <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	330c      	adds	r3, #12
 8009ae2:	220c      	movs	r2, #12
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 f804 	bl	8009af4 <memset>
  }

}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <memset>:
 8009af4:	4402      	add	r2, r0
 8009af6:	4603      	mov	r3, r0
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d100      	bne.n	8009afe <memset+0xa>
 8009afc:	4770      	bx	lr
 8009afe:	f803 1b01 	strb.w	r1, [r3], #1
 8009b02:	e7f9      	b.n	8009af8 <memset+0x4>

08009b04 <__errno>:
 8009b04:	4b01      	ldr	r3, [pc, #4]	@ (8009b0c <__errno+0x8>)
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	2000024c 	.word	0x2000024c

08009b10 <__libc_init_array>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	4d0d      	ldr	r5, [pc, #52]	@ (8009b48 <__libc_init_array+0x38>)
 8009b14:	4c0d      	ldr	r4, [pc, #52]	@ (8009b4c <__libc_init_array+0x3c>)
 8009b16:	1b64      	subs	r4, r4, r5
 8009b18:	10a4      	asrs	r4, r4, #2
 8009b1a:	2600      	movs	r6, #0
 8009b1c:	42a6      	cmp	r6, r4
 8009b1e:	d109      	bne.n	8009b34 <__libc_init_array+0x24>
 8009b20:	4d0b      	ldr	r5, [pc, #44]	@ (8009b50 <__libc_init_array+0x40>)
 8009b22:	4c0c      	ldr	r4, [pc, #48]	@ (8009b54 <__libc_init_array+0x44>)
 8009b24:	f000 ffb0 	bl	800aa88 <_init>
 8009b28:	1b64      	subs	r4, r4, r5
 8009b2a:	10a4      	asrs	r4, r4, #2
 8009b2c:	2600      	movs	r6, #0
 8009b2e:	42a6      	cmp	r6, r4
 8009b30:	d105      	bne.n	8009b3e <__libc_init_array+0x2e>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b38:	4798      	blx	r3
 8009b3a:	3601      	adds	r6, #1
 8009b3c:	e7ee      	b.n	8009b1c <__libc_init_array+0xc>
 8009b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b42:	4798      	blx	r3
 8009b44:	3601      	adds	r6, #1
 8009b46:	e7f2      	b.n	8009b2e <__libc_init_array+0x1e>
 8009b48:	0800ab18 	.word	0x0800ab18
 8009b4c:	0800ab18 	.word	0x0800ab18
 8009b50:	0800ab18 	.word	0x0800ab18
 8009b54:	0800ab1c 	.word	0x0800ab1c

08009b58 <memcpy>:
 8009b58:	440a      	add	r2, r1
 8009b5a:	4291      	cmp	r1, r2
 8009b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b60:	d100      	bne.n	8009b64 <memcpy+0xc>
 8009b62:	4770      	bx	lr
 8009b64:	b510      	push	{r4, lr}
 8009b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b6e:	4291      	cmp	r1, r2
 8009b70:	d1f9      	bne.n	8009b66 <memcpy+0xe>
 8009b72:	bd10      	pop	{r4, pc}

08009b74 <pow>:
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b76:	ed2d 8b02 	vpush	{d8}
 8009b7a:	eeb0 8a40 	vmov.f32	s16, s0
 8009b7e:	eef0 8a60 	vmov.f32	s17, s1
 8009b82:	ec55 4b11 	vmov	r4, r5, d1
 8009b86:	f000 f977 	bl	8009e78 <__ieee754_pow>
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	4620      	mov	r0, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	ec57 6b10 	vmov	r6, r7, d0
 8009b96:	f7f6 ff95 	bl	8000ac4 <__aeabi_dcmpun>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d13b      	bne.n	8009c16 <pow+0xa2>
 8009b9e:	ec51 0b18 	vmov	r0, r1, d8
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f7f6 ff5b 	bl	8000a60 <__aeabi_dcmpeq>
 8009baa:	b1b8      	cbz	r0, 8009bdc <pow+0x68>
 8009bac:	2200      	movs	r2, #0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	f7f6 ff54 	bl	8000a60 <__aeabi_dcmpeq>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d146      	bne.n	8009c4a <pow+0xd6>
 8009bbc:	ec45 4b10 	vmov	d0, r4, r5
 8009bc0:	f000 f874 	bl	8009cac <finite>
 8009bc4:	b338      	cbz	r0, 8009c16 <pow+0xa2>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 ff51 	bl	8000a74 <__aeabi_dcmplt>
 8009bd2:	b300      	cbz	r0, 8009c16 <pow+0xa2>
 8009bd4:	f7ff ff96 	bl	8009b04 <__errno>
 8009bd8:	2322      	movs	r3, #34	@ 0x22
 8009bda:	e01b      	b.n	8009c14 <pow+0xa0>
 8009bdc:	ec47 6b10 	vmov	d0, r6, r7
 8009be0:	f000 f864 	bl	8009cac <finite>
 8009be4:	b9e0      	cbnz	r0, 8009c20 <pow+0xac>
 8009be6:	eeb0 0a48 	vmov.f32	s0, s16
 8009bea:	eef0 0a68 	vmov.f32	s1, s17
 8009bee:	f000 f85d 	bl	8009cac <finite>
 8009bf2:	b1a8      	cbz	r0, 8009c20 <pow+0xac>
 8009bf4:	ec45 4b10 	vmov	d0, r4, r5
 8009bf8:	f000 f858 	bl	8009cac <finite>
 8009bfc:	b180      	cbz	r0, 8009c20 <pow+0xac>
 8009bfe:	4632      	mov	r2, r6
 8009c00:	463b      	mov	r3, r7
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7f6 ff5d 	bl	8000ac4 <__aeabi_dcmpun>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0e2      	beq.n	8009bd4 <pow+0x60>
 8009c0e:	f7ff ff79 	bl	8009b04 <__errno>
 8009c12:	2321      	movs	r3, #33	@ 0x21
 8009c14:	6003      	str	r3, [r0, #0]
 8009c16:	ecbd 8b02 	vpop	{d8}
 8009c1a:	ec47 6b10 	vmov	d0, r6, r7
 8009c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c20:	2200      	movs	r2, #0
 8009c22:	2300      	movs	r3, #0
 8009c24:	4630      	mov	r0, r6
 8009c26:	4639      	mov	r1, r7
 8009c28:	f7f6 ff1a 	bl	8000a60 <__aeabi_dcmpeq>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d0f2      	beq.n	8009c16 <pow+0xa2>
 8009c30:	eeb0 0a48 	vmov.f32	s0, s16
 8009c34:	eef0 0a68 	vmov.f32	s1, s17
 8009c38:	f000 f838 	bl	8009cac <finite>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d0ea      	beq.n	8009c16 <pow+0xa2>
 8009c40:	ec45 4b10 	vmov	d0, r4, r5
 8009c44:	f000 f832 	bl	8009cac <finite>
 8009c48:	e7c3      	b.n	8009bd2 <pow+0x5e>
 8009c4a:	4f01      	ldr	r7, [pc, #4]	@ (8009c50 <pow+0xdc>)
 8009c4c:	2600      	movs	r6, #0
 8009c4e:	e7e2      	b.n	8009c16 <pow+0xa2>
 8009c50:	3ff00000 	.word	0x3ff00000

08009c54 <sqrt>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	ed2d 8b02 	vpush	{d8}
 8009c5a:	ec55 4b10 	vmov	r4, r5, d0
 8009c5e:	f000 f831 	bl	8009cc4 <__ieee754_sqrt>
 8009c62:	4622      	mov	r2, r4
 8009c64:	462b      	mov	r3, r5
 8009c66:	4620      	mov	r0, r4
 8009c68:	4629      	mov	r1, r5
 8009c6a:	eeb0 8a40 	vmov.f32	s16, s0
 8009c6e:	eef0 8a60 	vmov.f32	s17, s1
 8009c72:	f7f6 ff27 	bl	8000ac4 <__aeabi_dcmpun>
 8009c76:	b990      	cbnz	r0, 8009c9e <sqrt+0x4a>
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	f7f6 fef8 	bl	8000a74 <__aeabi_dcmplt>
 8009c84:	b158      	cbz	r0, 8009c9e <sqrt+0x4a>
 8009c86:	f7ff ff3d 	bl	8009b04 <__errno>
 8009c8a:	2321      	movs	r3, #33	@ 0x21
 8009c8c:	6003      	str	r3, [r0, #0]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2300      	movs	r3, #0
 8009c92:	4610      	mov	r0, r2
 8009c94:	4619      	mov	r1, r3
 8009c96:	f7f6 fda5 	bl	80007e4 <__aeabi_ddiv>
 8009c9a:	ec41 0b18 	vmov	d8, r0, r1
 8009c9e:	eeb0 0a48 	vmov.f32	s0, s16
 8009ca2:	eef0 0a68 	vmov.f32	s1, s17
 8009ca6:	ecbd 8b02 	vpop	{d8}
 8009caa:	bd38      	pop	{r3, r4, r5, pc}

08009cac <finite>:
 8009cac:	b082      	sub	sp, #8
 8009cae:	ed8d 0b00 	vstr	d0, [sp]
 8009cb2:	9801      	ldr	r0, [sp, #4]
 8009cb4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009cb8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009cbc:	0fc0      	lsrs	r0, r0, #31
 8009cbe:	b002      	add	sp, #8
 8009cc0:	4770      	bx	lr
	...

08009cc4 <__ieee754_sqrt>:
 8009cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	4a68      	ldr	r2, [pc, #416]	@ (8009e6c <__ieee754_sqrt+0x1a8>)
 8009cca:	ec55 4b10 	vmov	r4, r5, d0
 8009cce:	43aa      	bics	r2, r5
 8009cd0:	462b      	mov	r3, r5
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	d110      	bne.n	8009cf8 <__ieee754_sqrt+0x34>
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	4620      	mov	r0, r4
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f7f6 fc58 	bl	8000590 <__aeabi_dmul>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f7f6 fa9c 	bl	8000224 <__adddf3>
 8009cec:	4604      	mov	r4, r0
 8009cee:	460d      	mov	r5, r1
 8009cf0:	ec45 4b10 	vmov	d0, r4, r5
 8009cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	dc0e      	bgt.n	8009d1a <__ieee754_sqrt+0x56>
 8009cfc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009d00:	4322      	orrs	r2, r4
 8009d02:	d0f5      	beq.n	8009cf0 <__ieee754_sqrt+0x2c>
 8009d04:	b19d      	cbz	r5, 8009d2e <__ieee754_sqrt+0x6a>
 8009d06:	4622      	mov	r2, r4
 8009d08:	4620      	mov	r0, r4
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	f7f6 fa88 	bl	8000220 <__aeabi_dsub>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	f7f6 fd66 	bl	80007e4 <__aeabi_ddiv>
 8009d18:	e7e8      	b.n	8009cec <__ieee754_sqrt+0x28>
 8009d1a:	152a      	asrs	r2, r5, #20
 8009d1c:	d115      	bne.n	8009d4a <__ieee754_sqrt+0x86>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e009      	b.n	8009d36 <__ieee754_sqrt+0x72>
 8009d22:	0acb      	lsrs	r3, r1, #11
 8009d24:	3a15      	subs	r2, #21
 8009d26:	0549      	lsls	r1, r1, #21
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d0fa      	beq.n	8009d22 <__ieee754_sqrt+0x5e>
 8009d2c:	e7f7      	b.n	8009d1e <__ieee754_sqrt+0x5a>
 8009d2e:	462a      	mov	r2, r5
 8009d30:	e7fa      	b.n	8009d28 <__ieee754_sqrt+0x64>
 8009d32:	005b      	lsls	r3, r3, #1
 8009d34:	3001      	adds	r0, #1
 8009d36:	02dc      	lsls	r4, r3, #11
 8009d38:	d5fb      	bpl.n	8009d32 <__ieee754_sqrt+0x6e>
 8009d3a:	1e44      	subs	r4, r0, #1
 8009d3c:	1b12      	subs	r2, r2, r4
 8009d3e:	f1c0 0420 	rsb	r4, r0, #32
 8009d42:	fa21 f404 	lsr.w	r4, r1, r4
 8009d46:	4323      	orrs	r3, r4
 8009d48:	4081      	lsls	r1, r0
 8009d4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d4e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d56:	07d2      	lsls	r2, r2, #31
 8009d58:	bf5c      	itt	pl
 8009d5a:	005b      	lslpl	r3, r3, #1
 8009d5c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009d60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d64:	bf58      	it	pl
 8009d66:	0049      	lslpl	r1, r1, #1
 8009d68:	2600      	movs	r6, #0
 8009d6a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009d6e:	106d      	asrs	r5, r5, #1
 8009d70:	0049      	lsls	r1, r1, #1
 8009d72:	2016      	movs	r0, #22
 8009d74:	4632      	mov	r2, r6
 8009d76:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009d7a:	1917      	adds	r7, r2, r4
 8009d7c:	429f      	cmp	r7, r3
 8009d7e:	bfde      	ittt	le
 8009d80:	193a      	addle	r2, r7, r4
 8009d82:	1bdb      	suble	r3, r3, r7
 8009d84:	1936      	addle	r6, r6, r4
 8009d86:	0fcf      	lsrs	r7, r1, #31
 8009d88:	3801      	subs	r0, #1
 8009d8a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009d8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009d92:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009d96:	d1f0      	bne.n	8009d7a <__ieee754_sqrt+0xb6>
 8009d98:	4604      	mov	r4, r0
 8009d9a:	2720      	movs	r7, #32
 8009d9c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009da0:	429a      	cmp	r2, r3
 8009da2:	eb00 0e0c 	add.w	lr, r0, ip
 8009da6:	db02      	blt.n	8009dae <__ieee754_sqrt+0xea>
 8009da8:	d113      	bne.n	8009dd2 <__ieee754_sqrt+0x10e>
 8009daa:	458e      	cmp	lr, r1
 8009dac:	d811      	bhi.n	8009dd2 <__ieee754_sqrt+0x10e>
 8009dae:	f1be 0f00 	cmp.w	lr, #0
 8009db2:	eb0e 000c 	add.w	r0, lr, ip
 8009db6:	da42      	bge.n	8009e3e <__ieee754_sqrt+0x17a>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	db40      	blt.n	8009e3e <__ieee754_sqrt+0x17a>
 8009dbc:	f102 0801 	add.w	r8, r2, #1
 8009dc0:	1a9b      	subs	r3, r3, r2
 8009dc2:	458e      	cmp	lr, r1
 8009dc4:	bf88      	it	hi
 8009dc6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009dca:	eba1 010e 	sub.w	r1, r1, lr
 8009dce:	4464      	add	r4, ip
 8009dd0:	4642      	mov	r2, r8
 8009dd2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009dd6:	3f01      	subs	r7, #1
 8009dd8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009ddc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009de0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009de4:	d1dc      	bne.n	8009da0 <__ieee754_sqrt+0xdc>
 8009de6:	4319      	orrs	r1, r3
 8009de8:	d01b      	beq.n	8009e22 <__ieee754_sqrt+0x15e>
 8009dea:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009e70 <__ieee754_sqrt+0x1ac>
 8009dee:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009e74 <__ieee754_sqrt+0x1b0>
 8009df2:	e9da 0100 	ldrd	r0, r1, [sl]
 8009df6:	e9db 2300 	ldrd	r2, r3, [fp]
 8009dfa:	f7f6 fa11 	bl	8000220 <__aeabi_dsub>
 8009dfe:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f7f6 fe3d 	bl	8000a88 <__aeabi_dcmple>
 8009e0e:	b140      	cbz	r0, 8009e22 <__ieee754_sqrt+0x15e>
 8009e10:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009e14:	e9da 0100 	ldrd	r0, r1, [sl]
 8009e18:	e9db 2300 	ldrd	r2, r3, [fp]
 8009e1c:	d111      	bne.n	8009e42 <__ieee754_sqrt+0x17e>
 8009e1e:	3601      	adds	r6, #1
 8009e20:	463c      	mov	r4, r7
 8009e22:	1072      	asrs	r2, r6, #1
 8009e24:	0863      	lsrs	r3, r4, #1
 8009e26:	07f1      	lsls	r1, r6, #31
 8009e28:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009e2c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009e30:	bf48      	it	mi
 8009e32:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009e36:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	e756      	b.n	8009cec <__ieee754_sqrt+0x28>
 8009e3e:	4690      	mov	r8, r2
 8009e40:	e7be      	b.n	8009dc0 <__ieee754_sqrt+0xfc>
 8009e42:	f7f6 f9ef 	bl	8000224 <__adddf3>
 8009e46:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4649      	mov	r1, r9
 8009e52:	f7f6 fe0f 	bl	8000a74 <__aeabi_dcmplt>
 8009e56:	b120      	cbz	r0, 8009e62 <__ieee754_sqrt+0x19e>
 8009e58:	1ca0      	adds	r0, r4, #2
 8009e5a:	bf08      	it	eq
 8009e5c:	3601      	addeq	r6, #1
 8009e5e:	3402      	adds	r4, #2
 8009e60:	e7df      	b.n	8009e22 <__ieee754_sqrt+0x15e>
 8009e62:	1c63      	adds	r3, r4, #1
 8009e64:	f023 0401 	bic.w	r4, r3, #1
 8009e68:	e7db      	b.n	8009e22 <__ieee754_sqrt+0x15e>
 8009e6a:	bf00      	nop
 8009e6c:	7ff00000 	.word	0x7ff00000
 8009e70:	200002a8 	.word	0x200002a8
 8009e74:	200002a0 	.word	0x200002a0

08009e78 <__ieee754_pow>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	b091      	sub	sp, #68	@ 0x44
 8009e7e:	ed8d 1b00 	vstr	d1, [sp]
 8009e82:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009e86:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009e8a:	ea5a 0001 	orrs.w	r0, sl, r1
 8009e8e:	ec57 6b10 	vmov	r6, r7, d0
 8009e92:	d113      	bne.n	8009ebc <__ieee754_pow+0x44>
 8009e94:	19b3      	adds	r3, r6, r6
 8009e96:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009e9a:	4152      	adcs	r2, r2
 8009e9c:	4298      	cmp	r0, r3
 8009e9e:	4b98      	ldr	r3, [pc, #608]	@ (800a100 <__ieee754_pow+0x288>)
 8009ea0:	4193      	sbcs	r3, r2
 8009ea2:	f080 84ea 	bcs.w	800a87a <__ieee754_pow+0xa02>
 8009ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	4639      	mov	r1, r7
 8009eae:	f7f6 f9b9 	bl	8000224 <__adddf3>
 8009eb2:	ec41 0b10 	vmov	d0, r0, r1
 8009eb6:	b011      	add	sp, #68	@ 0x44
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebc:	4a91      	ldr	r2, [pc, #580]	@ (800a104 <__ieee754_pow+0x28c>)
 8009ebe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009ec2:	4590      	cmp	r8, r2
 8009ec4:	463d      	mov	r5, r7
 8009ec6:	4633      	mov	r3, r6
 8009ec8:	d806      	bhi.n	8009ed8 <__ieee754_pow+0x60>
 8009eca:	d101      	bne.n	8009ed0 <__ieee754_pow+0x58>
 8009ecc:	2e00      	cmp	r6, #0
 8009ece:	d1ea      	bne.n	8009ea6 <__ieee754_pow+0x2e>
 8009ed0:	4592      	cmp	sl, r2
 8009ed2:	d801      	bhi.n	8009ed8 <__ieee754_pow+0x60>
 8009ed4:	d10e      	bne.n	8009ef4 <__ieee754_pow+0x7c>
 8009ed6:	b169      	cbz	r1, 8009ef4 <__ieee754_pow+0x7c>
 8009ed8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009edc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009ee0:	431d      	orrs	r5, r3
 8009ee2:	d1e0      	bne.n	8009ea6 <__ieee754_pow+0x2e>
 8009ee4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ee8:	18db      	adds	r3, r3, r3
 8009eea:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009eee:	4152      	adcs	r2, r2
 8009ef0:	429d      	cmp	r5, r3
 8009ef2:	e7d4      	b.n	8009e9e <__ieee754_pow+0x26>
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	46c3      	mov	fp, r8
 8009ef8:	da3a      	bge.n	8009f70 <__ieee754_pow+0xf8>
 8009efa:	4a83      	ldr	r2, [pc, #524]	@ (800a108 <__ieee754_pow+0x290>)
 8009efc:	4592      	cmp	sl, r2
 8009efe:	d84d      	bhi.n	8009f9c <__ieee754_pow+0x124>
 8009f00:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009f04:	4592      	cmp	sl, r2
 8009f06:	f240 84c7 	bls.w	800a898 <__ieee754_pow+0xa20>
 8009f0a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009f0e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009f12:	2a14      	cmp	r2, #20
 8009f14:	dd0f      	ble.n	8009f36 <__ieee754_pow+0xbe>
 8009f16:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009f1a:	fa21 f402 	lsr.w	r4, r1, r2
 8009f1e:	fa04 f202 	lsl.w	r2, r4, r2
 8009f22:	428a      	cmp	r2, r1
 8009f24:	f040 84b8 	bne.w	800a898 <__ieee754_pow+0xa20>
 8009f28:	f004 0401 	and.w	r4, r4, #1
 8009f2c:	f1c4 0402 	rsb	r4, r4, #2
 8009f30:	2900      	cmp	r1, #0
 8009f32:	d158      	bne.n	8009fe6 <__ieee754_pow+0x16e>
 8009f34:	e00e      	b.n	8009f54 <__ieee754_pow+0xdc>
 8009f36:	2900      	cmp	r1, #0
 8009f38:	d154      	bne.n	8009fe4 <__ieee754_pow+0x16c>
 8009f3a:	f1c2 0214 	rsb	r2, r2, #20
 8009f3e:	fa4a f402 	asr.w	r4, sl, r2
 8009f42:	fa04 f202 	lsl.w	r2, r4, r2
 8009f46:	4552      	cmp	r2, sl
 8009f48:	f040 84a3 	bne.w	800a892 <__ieee754_pow+0xa1a>
 8009f4c:	f004 0401 	and.w	r4, r4, #1
 8009f50:	f1c4 0402 	rsb	r4, r4, #2
 8009f54:	4a6d      	ldr	r2, [pc, #436]	@ (800a10c <__ieee754_pow+0x294>)
 8009f56:	4592      	cmp	sl, r2
 8009f58:	d12e      	bne.n	8009fb8 <__ieee754_pow+0x140>
 8009f5a:	f1b9 0f00 	cmp.w	r9, #0
 8009f5e:	f280 8494 	bge.w	800a88a <__ieee754_pow+0xa12>
 8009f62:	496a      	ldr	r1, [pc, #424]	@ (800a10c <__ieee754_pow+0x294>)
 8009f64:	4632      	mov	r2, r6
 8009f66:	463b      	mov	r3, r7
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f7f6 fc3b 	bl	80007e4 <__aeabi_ddiv>
 8009f6e:	e7a0      	b.n	8009eb2 <__ieee754_pow+0x3a>
 8009f70:	2400      	movs	r4, #0
 8009f72:	bbc1      	cbnz	r1, 8009fe6 <__ieee754_pow+0x16e>
 8009f74:	4a63      	ldr	r2, [pc, #396]	@ (800a104 <__ieee754_pow+0x28c>)
 8009f76:	4592      	cmp	sl, r2
 8009f78:	d1ec      	bne.n	8009f54 <__ieee754_pow+0xdc>
 8009f7a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009f7e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009f82:	431a      	orrs	r2, r3
 8009f84:	f000 8479 	beq.w	800a87a <__ieee754_pow+0xa02>
 8009f88:	4b61      	ldr	r3, [pc, #388]	@ (800a110 <__ieee754_pow+0x298>)
 8009f8a:	4598      	cmp	r8, r3
 8009f8c:	d908      	bls.n	8009fa0 <__ieee754_pow+0x128>
 8009f8e:	f1b9 0f00 	cmp.w	r9, #0
 8009f92:	f2c0 8476 	blt.w	800a882 <__ieee754_pow+0xa0a>
 8009f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f9a:	e78a      	b.n	8009eb2 <__ieee754_pow+0x3a>
 8009f9c:	2402      	movs	r4, #2
 8009f9e:	e7e8      	b.n	8009f72 <__ieee754_pow+0xfa>
 8009fa0:	f1b9 0f00 	cmp.w	r9, #0
 8009fa4:	f04f 0000 	mov.w	r0, #0
 8009fa8:	f04f 0100 	mov.w	r1, #0
 8009fac:	da81      	bge.n	8009eb2 <__ieee754_pow+0x3a>
 8009fae:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009fb2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009fb6:	e77c      	b.n	8009eb2 <__ieee754_pow+0x3a>
 8009fb8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009fbc:	d106      	bne.n	8009fcc <__ieee754_pow+0x154>
 8009fbe:	4632      	mov	r2, r6
 8009fc0:	463b      	mov	r3, r7
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 fae3 	bl	8000590 <__aeabi_dmul>
 8009fca:	e772      	b.n	8009eb2 <__ieee754_pow+0x3a>
 8009fcc:	4a51      	ldr	r2, [pc, #324]	@ (800a114 <__ieee754_pow+0x29c>)
 8009fce:	4591      	cmp	r9, r2
 8009fd0:	d109      	bne.n	8009fe6 <__ieee754_pow+0x16e>
 8009fd2:	2d00      	cmp	r5, #0
 8009fd4:	db07      	blt.n	8009fe6 <__ieee754_pow+0x16e>
 8009fd6:	ec47 6b10 	vmov	d0, r6, r7
 8009fda:	b011      	add	sp, #68	@ 0x44
 8009fdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	f7ff be70 	b.w	8009cc4 <__ieee754_sqrt>
 8009fe4:	2400      	movs	r4, #0
 8009fe6:	ec47 6b10 	vmov	d0, r6, r7
 8009fea:	9302      	str	r3, [sp, #8]
 8009fec:	f000 fc88 	bl	800a900 <fabs>
 8009ff0:	9b02      	ldr	r3, [sp, #8]
 8009ff2:	ec51 0b10 	vmov	r0, r1, d0
 8009ff6:	bb53      	cbnz	r3, 800a04e <__ieee754_pow+0x1d6>
 8009ff8:	4b44      	ldr	r3, [pc, #272]	@ (800a10c <__ieee754_pow+0x294>)
 8009ffa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d002      	beq.n	800a008 <__ieee754_pow+0x190>
 800a002:	f1b8 0f00 	cmp.w	r8, #0
 800a006:	d122      	bne.n	800a04e <__ieee754_pow+0x1d6>
 800a008:	f1b9 0f00 	cmp.w	r9, #0
 800a00c:	da05      	bge.n	800a01a <__ieee754_pow+0x1a2>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	2000      	movs	r0, #0
 800a014:	493d      	ldr	r1, [pc, #244]	@ (800a10c <__ieee754_pow+0x294>)
 800a016:	f7f6 fbe5 	bl	80007e4 <__aeabi_ddiv>
 800a01a:	2d00      	cmp	r5, #0
 800a01c:	f6bf af49 	bge.w	8009eb2 <__ieee754_pow+0x3a>
 800a020:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a024:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a028:	ea58 0804 	orrs.w	r8, r8, r4
 800a02c:	d108      	bne.n	800a040 <__ieee754_pow+0x1c8>
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	4610      	mov	r0, r2
 800a034:	4619      	mov	r1, r3
 800a036:	f7f6 f8f3 	bl	8000220 <__aeabi_dsub>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	e794      	b.n	8009f6a <__ieee754_pow+0xf2>
 800a040:	2c01      	cmp	r4, #1
 800a042:	f47f af36 	bne.w	8009eb2 <__ieee754_pow+0x3a>
 800a046:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a04a:	4619      	mov	r1, r3
 800a04c:	e731      	b.n	8009eb2 <__ieee754_pow+0x3a>
 800a04e:	0feb      	lsrs	r3, r5, #31
 800a050:	3b01      	subs	r3, #1
 800a052:	ea53 0204 	orrs.w	r2, r3, r4
 800a056:	d102      	bne.n	800a05e <__ieee754_pow+0x1e6>
 800a058:	4632      	mov	r2, r6
 800a05a:	463b      	mov	r3, r7
 800a05c:	e7e9      	b.n	800a032 <__ieee754_pow+0x1ba>
 800a05e:	3c01      	subs	r4, #1
 800a060:	431c      	orrs	r4, r3
 800a062:	d016      	beq.n	800a092 <__ieee754_pow+0x21a>
 800a064:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a0f0 <__ieee754_pow+0x278>
 800a068:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a06c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a070:	f240 8112 	bls.w	800a298 <__ieee754_pow+0x420>
 800a074:	4b28      	ldr	r3, [pc, #160]	@ (800a118 <__ieee754_pow+0x2a0>)
 800a076:	459a      	cmp	sl, r3
 800a078:	4b25      	ldr	r3, [pc, #148]	@ (800a110 <__ieee754_pow+0x298>)
 800a07a:	d916      	bls.n	800a0aa <__ieee754_pow+0x232>
 800a07c:	4598      	cmp	r8, r3
 800a07e:	d80b      	bhi.n	800a098 <__ieee754_pow+0x220>
 800a080:	f1b9 0f00 	cmp.w	r9, #0
 800a084:	da0b      	bge.n	800a09e <__ieee754_pow+0x226>
 800a086:	2000      	movs	r0, #0
 800a088:	b011      	add	sp, #68	@ 0x44
 800a08a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08e:	f000 bcf3 	b.w	800aa78 <__math_oflow>
 800a092:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a0f8 <__ieee754_pow+0x280>
 800a096:	e7e7      	b.n	800a068 <__ieee754_pow+0x1f0>
 800a098:	f1b9 0f00 	cmp.w	r9, #0
 800a09c:	dcf3      	bgt.n	800a086 <__ieee754_pow+0x20e>
 800a09e:	2000      	movs	r0, #0
 800a0a0:	b011      	add	sp, #68	@ 0x44
 800a0a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a6:	f000 bcdf 	b.w	800aa68 <__math_uflow>
 800a0aa:	4598      	cmp	r8, r3
 800a0ac:	d20c      	bcs.n	800a0c8 <__ieee754_pow+0x250>
 800a0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f7f6 fcdd 	bl	8000a74 <__aeabi_dcmplt>
 800a0ba:	3800      	subs	r0, #0
 800a0bc:	bf18      	it	ne
 800a0be:	2001      	movne	r0, #1
 800a0c0:	f1b9 0f00 	cmp.w	r9, #0
 800a0c4:	daec      	bge.n	800a0a0 <__ieee754_pow+0x228>
 800a0c6:	e7df      	b.n	800a088 <__ieee754_pow+0x210>
 800a0c8:	4b10      	ldr	r3, [pc, #64]	@ (800a10c <__ieee754_pow+0x294>)
 800a0ca:	4598      	cmp	r8, r3
 800a0cc:	f04f 0200 	mov.w	r2, #0
 800a0d0:	d924      	bls.n	800a11c <__ieee754_pow+0x2a4>
 800a0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f7f6 fccc 	bl	8000a74 <__aeabi_dcmplt>
 800a0dc:	3800      	subs	r0, #0
 800a0de:	bf18      	it	ne
 800a0e0:	2001      	movne	r0, #1
 800a0e2:	f1b9 0f00 	cmp.w	r9, #0
 800a0e6:	dccf      	bgt.n	800a088 <__ieee754_pow+0x210>
 800a0e8:	e7da      	b.n	800a0a0 <__ieee754_pow+0x228>
 800a0ea:	bf00      	nop
 800a0ec:	f3af 8000 	nop.w
 800a0f0:	00000000 	.word	0x00000000
 800a0f4:	3ff00000 	.word	0x3ff00000
 800a0f8:	00000000 	.word	0x00000000
 800a0fc:	bff00000 	.word	0xbff00000
 800a100:	fff00000 	.word	0xfff00000
 800a104:	7ff00000 	.word	0x7ff00000
 800a108:	433fffff 	.word	0x433fffff
 800a10c:	3ff00000 	.word	0x3ff00000
 800a110:	3fefffff 	.word	0x3fefffff
 800a114:	3fe00000 	.word	0x3fe00000
 800a118:	43f00000 	.word	0x43f00000
 800a11c:	4b5a      	ldr	r3, [pc, #360]	@ (800a288 <__ieee754_pow+0x410>)
 800a11e:	f7f6 f87f 	bl	8000220 <__aeabi_dsub>
 800a122:	a351      	add	r3, pc, #324	@ (adr r3, 800a268 <__ieee754_pow+0x3f0>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	4604      	mov	r4, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	f7f6 fa30 	bl	8000590 <__aeabi_dmul>
 800a130:	a34f      	add	r3, pc, #316	@ (adr r3, 800a270 <__ieee754_pow+0x3f8>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	4606      	mov	r6, r0
 800a138:	460f      	mov	r7, r1
 800a13a:	4620      	mov	r0, r4
 800a13c:	4629      	mov	r1, r5
 800a13e:	f7f6 fa27 	bl	8000590 <__aeabi_dmul>
 800a142:	4b52      	ldr	r3, [pc, #328]	@ (800a28c <__ieee754_pow+0x414>)
 800a144:	4682      	mov	sl, r0
 800a146:	468b      	mov	fp, r1
 800a148:	2200      	movs	r2, #0
 800a14a:	4620      	mov	r0, r4
 800a14c:	4629      	mov	r1, r5
 800a14e:	f7f6 fa1f 	bl	8000590 <__aeabi_dmul>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	a148      	add	r1, pc, #288	@ (adr r1, 800a278 <__ieee754_pow+0x400>)
 800a158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a15c:	f7f6 f860 	bl	8000220 <__aeabi_dsub>
 800a160:	4622      	mov	r2, r4
 800a162:	462b      	mov	r3, r5
 800a164:	f7f6 fa14 	bl	8000590 <__aeabi_dmul>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	2000      	movs	r0, #0
 800a16e:	4948      	ldr	r1, [pc, #288]	@ (800a290 <__ieee754_pow+0x418>)
 800a170:	f7f6 f856 	bl	8000220 <__aeabi_dsub>
 800a174:	4622      	mov	r2, r4
 800a176:	4680      	mov	r8, r0
 800a178:	4689      	mov	r9, r1
 800a17a:	462b      	mov	r3, r5
 800a17c:	4620      	mov	r0, r4
 800a17e:	4629      	mov	r1, r5
 800a180:	f7f6 fa06 	bl	8000590 <__aeabi_dmul>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4640      	mov	r0, r8
 800a18a:	4649      	mov	r1, r9
 800a18c:	f7f6 fa00 	bl	8000590 <__aeabi_dmul>
 800a190:	a33b      	add	r3, pc, #236	@ (adr r3, 800a280 <__ieee754_pow+0x408>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f7f6 f9fb 	bl	8000590 <__aeabi_dmul>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4650      	mov	r0, sl
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	f7f6 f83d 	bl	8000220 <__aeabi_dsub>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	4689      	mov	r9, r1
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	f7f6 f837 	bl	8000224 <__adddf3>
 800a1b6:	2400      	movs	r4, #0
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	463b      	mov	r3, r7
 800a1bc:	4620      	mov	r0, r4
 800a1be:	460d      	mov	r5, r1
 800a1c0:	f7f6 f82e 	bl	8000220 <__aeabi_dsub>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	f7f6 f828 	bl	8000220 <__aeabi_dsub>
 800a1d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1d8:	2300      	movs	r3, #0
 800a1da:	9304      	str	r3, [sp, #16]
 800a1dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	460f      	mov	r7, r1
 800a1e4:	4652      	mov	r2, sl
 800a1e6:	465b      	mov	r3, fp
 800a1e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ec:	f7f6 f818 	bl	8000220 <__aeabi_dsub>
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	462b      	mov	r3, r5
 800a1f4:	f7f6 f9cc 	bl	8000590 <__aeabi_dmul>
 800a1f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	4689      	mov	r9, r1
 800a200:	4630      	mov	r0, r6
 800a202:	4639      	mov	r1, r7
 800a204:	f7f6 f9c4 	bl	8000590 <__aeabi_dmul>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4640      	mov	r0, r8
 800a20e:	4649      	mov	r1, r9
 800a210:	f7f6 f808 	bl	8000224 <__adddf3>
 800a214:	4652      	mov	r2, sl
 800a216:	465b      	mov	r3, fp
 800a218:	4606      	mov	r6, r0
 800a21a:	460f      	mov	r7, r1
 800a21c:	4620      	mov	r0, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	f7f6 f9b6 	bl	8000590 <__aeabi_dmul>
 800a224:	460b      	mov	r3, r1
 800a226:	4602      	mov	r2, r0
 800a228:	4680      	mov	r8, r0
 800a22a:	4689      	mov	r9, r1
 800a22c:	4630      	mov	r0, r6
 800a22e:	4639      	mov	r1, r7
 800a230:	f7f5 fff8 	bl	8000224 <__adddf3>
 800a234:	4b17      	ldr	r3, [pc, #92]	@ (800a294 <__ieee754_pow+0x41c>)
 800a236:	4299      	cmp	r1, r3
 800a238:	4604      	mov	r4, r0
 800a23a:	460d      	mov	r5, r1
 800a23c:	468a      	mov	sl, r1
 800a23e:	468b      	mov	fp, r1
 800a240:	f340 82ef 	ble.w	800a822 <__ieee754_pow+0x9aa>
 800a244:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a248:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a24c:	4303      	orrs	r3, r0
 800a24e:	f000 81e8 	beq.w	800a622 <__ieee754_pow+0x7aa>
 800a252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a256:	2200      	movs	r2, #0
 800a258:	2300      	movs	r3, #0
 800a25a:	f7f6 fc0b 	bl	8000a74 <__aeabi_dcmplt>
 800a25e:	3800      	subs	r0, #0
 800a260:	bf18      	it	ne
 800a262:	2001      	movne	r0, #1
 800a264:	e710      	b.n	800a088 <__ieee754_pow+0x210>
 800a266:	bf00      	nop
 800a268:	60000000 	.word	0x60000000
 800a26c:	3ff71547 	.word	0x3ff71547
 800a270:	f85ddf44 	.word	0xf85ddf44
 800a274:	3e54ae0b 	.word	0x3e54ae0b
 800a278:	55555555 	.word	0x55555555
 800a27c:	3fd55555 	.word	0x3fd55555
 800a280:	652b82fe 	.word	0x652b82fe
 800a284:	3ff71547 	.word	0x3ff71547
 800a288:	3ff00000 	.word	0x3ff00000
 800a28c:	3fd00000 	.word	0x3fd00000
 800a290:	3fe00000 	.word	0x3fe00000
 800a294:	408fffff 	.word	0x408fffff
 800a298:	4bd5      	ldr	r3, [pc, #852]	@ (800a5f0 <__ieee754_pow+0x778>)
 800a29a:	402b      	ands	r3, r5
 800a29c:	2200      	movs	r2, #0
 800a29e:	b92b      	cbnz	r3, 800a2ac <__ieee754_pow+0x434>
 800a2a0:	4bd4      	ldr	r3, [pc, #848]	@ (800a5f4 <__ieee754_pow+0x77c>)
 800a2a2:	f7f6 f975 	bl	8000590 <__aeabi_dmul>
 800a2a6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a2aa:	468b      	mov	fp, r1
 800a2ac:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a2b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a2b4:	4413      	add	r3, r2
 800a2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b8:	4bcf      	ldr	r3, [pc, #828]	@ (800a5f8 <__ieee754_pow+0x780>)
 800a2ba:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a2be:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a2c2:	459b      	cmp	fp, r3
 800a2c4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a2c8:	dd08      	ble.n	800a2dc <__ieee754_pow+0x464>
 800a2ca:	4bcc      	ldr	r3, [pc, #816]	@ (800a5fc <__ieee754_pow+0x784>)
 800a2cc:	459b      	cmp	fp, r3
 800a2ce:	f340 81a5 	ble.w	800a61c <__ieee754_pow+0x7a4>
 800a2d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2d8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a2dc:	f04f 0a00 	mov.w	sl, #0
 800a2e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a2e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2e6:	4bc6      	ldr	r3, [pc, #792]	@ (800a600 <__ieee754_pow+0x788>)
 800a2e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a2ec:	ed93 7b00 	vldr	d7, [r3]
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	ec53 2b17 	vmov	r2, r3, d7
 800a2f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2fe:	f7f5 ff8f 	bl	8000220 <__aeabi_dsub>
 800a302:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a306:	4606      	mov	r6, r0
 800a308:	460f      	mov	r7, r1
 800a30a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a30e:	f7f5 ff89 	bl	8000224 <__adddf3>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	2000      	movs	r0, #0
 800a318:	49ba      	ldr	r1, [pc, #744]	@ (800a604 <__ieee754_pow+0x78c>)
 800a31a:	f7f6 fa63 	bl	80007e4 <__aeabi_ddiv>
 800a31e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	4630      	mov	r0, r6
 800a328:	4639      	mov	r1, r7
 800a32a:	f7f6 f931 	bl	8000590 <__aeabi_dmul>
 800a32e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a332:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a336:	106d      	asrs	r5, r5, #1
 800a338:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a33c:	f04f 0b00 	mov.w	fp, #0
 800a340:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a344:	4661      	mov	r1, ip
 800a346:	2200      	movs	r2, #0
 800a348:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a34c:	4658      	mov	r0, fp
 800a34e:	46e1      	mov	r9, ip
 800a350:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a354:	4614      	mov	r4, r2
 800a356:	461d      	mov	r5, r3
 800a358:	f7f6 f91a 	bl	8000590 <__aeabi_dmul>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4630      	mov	r0, r6
 800a362:	4639      	mov	r1, r7
 800a364:	f7f5 ff5c 	bl	8000220 <__aeabi_dsub>
 800a368:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a36c:	4606      	mov	r6, r0
 800a36e:	460f      	mov	r7, r1
 800a370:	4620      	mov	r0, r4
 800a372:	4629      	mov	r1, r5
 800a374:	f7f5 ff54 	bl	8000220 <__aeabi_dsub>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a380:	f7f5 ff4e 	bl	8000220 <__aeabi_dsub>
 800a384:	465a      	mov	r2, fp
 800a386:	464b      	mov	r3, r9
 800a388:	f7f6 f902 	bl	8000590 <__aeabi_dmul>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4630      	mov	r0, r6
 800a392:	4639      	mov	r1, r7
 800a394:	f7f5 ff44 	bl	8000220 <__aeabi_dsub>
 800a398:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a39c:	f7f6 f8f8 	bl	8000590 <__aeabi_dmul>
 800a3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	f7f6 f8f0 	bl	8000590 <__aeabi_dmul>
 800a3b0:	a37d      	add	r3, pc, #500	@ (adr r3, 800a5a8 <__ieee754_pow+0x730>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	f7f6 f8e9 	bl	8000590 <__aeabi_dmul>
 800a3be:	a37c      	add	r3, pc, #496	@ (adr r3, 800a5b0 <__ieee754_pow+0x738>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f7f5 ff2e 	bl	8000224 <__adddf3>
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	462b      	mov	r3, r5
 800a3cc:	f7f6 f8e0 	bl	8000590 <__aeabi_dmul>
 800a3d0:	a379      	add	r3, pc, #484	@ (adr r3, 800a5b8 <__ieee754_pow+0x740>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f5 ff25 	bl	8000224 <__adddf3>
 800a3da:	4622      	mov	r2, r4
 800a3dc:	462b      	mov	r3, r5
 800a3de:	f7f6 f8d7 	bl	8000590 <__aeabi_dmul>
 800a3e2:	a377      	add	r3, pc, #476	@ (adr r3, 800a5c0 <__ieee754_pow+0x748>)
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	f7f5 ff1c 	bl	8000224 <__adddf3>
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	462b      	mov	r3, r5
 800a3f0:	f7f6 f8ce 	bl	8000590 <__aeabi_dmul>
 800a3f4:	a374      	add	r3, pc, #464	@ (adr r3, 800a5c8 <__ieee754_pow+0x750>)
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	f7f5 ff13 	bl	8000224 <__adddf3>
 800a3fe:	4622      	mov	r2, r4
 800a400:	462b      	mov	r3, r5
 800a402:	f7f6 f8c5 	bl	8000590 <__aeabi_dmul>
 800a406:	a372      	add	r3, pc, #456	@ (adr r3, 800a5d0 <__ieee754_pow+0x758>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	f7f5 ff0a 	bl	8000224 <__adddf3>
 800a410:	4622      	mov	r2, r4
 800a412:	4606      	mov	r6, r0
 800a414:	460f      	mov	r7, r1
 800a416:	462b      	mov	r3, r5
 800a418:	4620      	mov	r0, r4
 800a41a:	4629      	mov	r1, r5
 800a41c:	f7f6 f8b8 	bl	8000590 <__aeabi_dmul>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4630      	mov	r0, r6
 800a426:	4639      	mov	r1, r7
 800a428:	f7f6 f8b2 	bl	8000590 <__aeabi_dmul>
 800a42c:	465a      	mov	r2, fp
 800a42e:	4604      	mov	r4, r0
 800a430:	460d      	mov	r5, r1
 800a432:	464b      	mov	r3, r9
 800a434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a438:	f7f5 fef4 	bl	8000224 <__adddf3>
 800a43c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a440:	f7f6 f8a6 	bl	8000590 <__aeabi_dmul>
 800a444:	4622      	mov	r2, r4
 800a446:	462b      	mov	r3, r5
 800a448:	f7f5 feec 	bl	8000224 <__adddf3>
 800a44c:	465a      	mov	r2, fp
 800a44e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a452:	464b      	mov	r3, r9
 800a454:	4658      	mov	r0, fp
 800a456:	4649      	mov	r1, r9
 800a458:	f7f6 f89a 	bl	8000590 <__aeabi_dmul>
 800a45c:	4b6a      	ldr	r3, [pc, #424]	@ (800a608 <__ieee754_pow+0x790>)
 800a45e:	2200      	movs	r2, #0
 800a460:	4606      	mov	r6, r0
 800a462:	460f      	mov	r7, r1
 800a464:	f7f5 fede 	bl	8000224 <__adddf3>
 800a468:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a46c:	f7f5 feda 	bl	8000224 <__adddf3>
 800a470:	46d8      	mov	r8, fp
 800a472:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a476:	460d      	mov	r5, r1
 800a478:	465a      	mov	r2, fp
 800a47a:	460b      	mov	r3, r1
 800a47c:	4640      	mov	r0, r8
 800a47e:	4649      	mov	r1, r9
 800a480:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a484:	f7f6 f884 	bl	8000590 <__aeabi_dmul>
 800a488:	465c      	mov	r4, fp
 800a48a:	4680      	mov	r8, r0
 800a48c:	4689      	mov	r9, r1
 800a48e:	4b5e      	ldr	r3, [pc, #376]	@ (800a608 <__ieee754_pow+0x790>)
 800a490:	2200      	movs	r2, #0
 800a492:	4620      	mov	r0, r4
 800a494:	4629      	mov	r1, r5
 800a496:	f7f5 fec3 	bl	8000220 <__aeabi_dsub>
 800a49a:	4632      	mov	r2, r6
 800a49c:	463b      	mov	r3, r7
 800a49e:	f7f5 febf 	bl	8000220 <__aeabi_dsub>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4aa:	f7f5 feb9 	bl	8000220 <__aeabi_dsub>
 800a4ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4b2:	f7f6 f86d 	bl	8000590 <__aeabi_dmul>
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	4606      	mov	r6, r0
 800a4ba:	460f      	mov	r7, r1
 800a4bc:	462b      	mov	r3, r5
 800a4be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4c2:	f7f6 f865 	bl	8000590 <__aeabi_dmul>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	f7f5 fea9 	bl	8000224 <__adddf3>
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	460f      	mov	r7, r1
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4640      	mov	r0, r8
 800a4dc:	4649      	mov	r1, r9
 800a4de:	f7f5 fea1 	bl	8000224 <__adddf3>
 800a4e2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a4e6:	a33c      	add	r3, pc, #240	@ (adr r3, 800a5d8 <__ieee754_pow+0x760>)
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	4658      	mov	r0, fp
 800a4ee:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	f7f6 f84c 	bl	8000590 <__aeabi_dmul>
 800a4f8:	465c      	mov	r4, fp
 800a4fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4fe:	4642      	mov	r2, r8
 800a500:	464b      	mov	r3, r9
 800a502:	4620      	mov	r0, r4
 800a504:	4629      	mov	r1, r5
 800a506:	f7f5 fe8b 	bl	8000220 <__aeabi_dsub>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	f7f5 fe85 	bl	8000220 <__aeabi_dsub>
 800a516:	a332      	add	r3, pc, #200	@ (adr r3, 800a5e0 <__ieee754_pow+0x768>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f7f6 f838 	bl	8000590 <__aeabi_dmul>
 800a520:	a331      	add	r3, pc, #196	@ (adr r3, 800a5e8 <__ieee754_pow+0x770>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	4606      	mov	r6, r0
 800a528:	460f      	mov	r7, r1
 800a52a:	4620      	mov	r0, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	f7f6 f82f 	bl	8000590 <__aeabi_dmul>
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4630      	mov	r0, r6
 800a538:	4639      	mov	r1, r7
 800a53a:	f7f5 fe73 	bl	8000224 <__adddf3>
 800a53e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a540:	4b32      	ldr	r3, [pc, #200]	@ (800a60c <__ieee754_pow+0x794>)
 800a542:	4413      	add	r3, r2
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f7f5 fe6c 	bl	8000224 <__adddf3>
 800a54c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a550:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a552:	f7f5 ffb3 	bl	80004bc <__aeabi_i2d>
 800a556:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a558:	4b2d      	ldr	r3, [pc, #180]	@ (800a610 <__ieee754_pow+0x798>)
 800a55a:	4413      	add	r3, r2
 800a55c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a560:	4606      	mov	r6, r0
 800a562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a566:	460f      	mov	r7, r1
 800a568:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a56c:	f7f5 fe5a 	bl	8000224 <__adddf3>
 800a570:	4642      	mov	r2, r8
 800a572:	464b      	mov	r3, r9
 800a574:	f7f5 fe56 	bl	8000224 <__adddf3>
 800a578:	4632      	mov	r2, r6
 800a57a:	463b      	mov	r3, r7
 800a57c:	f7f5 fe52 	bl	8000224 <__adddf3>
 800a580:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a584:	4632      	mov	r2, r6
 800a586:	463b      	mov	r3, r7
 800a588:	4658      	mov	r0, fp
 800a58a:	460d      	mov	r5, r1
 800a58c:	f7f5 fe48 	bl	8000220 <__aeabi_dsub>
 800a590:	4642      	mov	r2, r8
 800a592:	464b      	mov	r3, r9
 800a594:	f7f5 fe44 	bl	8000220 <__aeabi_dsub>
 800a598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a59c:	f7f5 fe40 	bl	8000220 <__aeabi_dsub>
 800a5a0:	465c      	mov	r4, fp
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	e036      	b.n	800a614 <__ieee754_pow+0x79c>
 800a5a6:	bf00      	nop
 800a5a8:	4a454eef 	.word	0x4a454eef
 800a5ac:	3fca7e28 	.word	0x3fca7e28
 800a5b0:	93c9db65 	.word	0x93c9db65
 800a5b4:	3fcd864a 	.word	0x3fcd864a
 800a5b8:	a91d4101 	.word	0xa91d4101
 800a5bc:	3fd17460 	.word	0x3fd17460
 800a5c0:	518f264d 	.word	0x518f264d
 800a5c4:	3fd55555 	.word	0x3fd55555
 800a5c8:	db6fabff 	.word	0xdb6fabff
 800a5cc:	3fdb6db6 	.word	0x3fdb6db6
 800a5d0:	33333303 	.word	0x33333303
 800a5d4:	3fe33333 	.word	0x3fe33333
 800a5d8:	e0000000 	.word	0xe0000000
 800a5dc:	3feec709 	.word	0x3feec709
 800a5e0:	dc3a03fd 	.word	0xdc3a03fd
 800a5e4:	3feec709 	.word	0x3feec709
 800a5e8:	145b01f5 	.word	0x145b01f5
 800a5ec:	be3e2fe0 	.word	0xbe3e2fe0
 800a5f0:	7ff00000 	.word	0x7ff00000
 800a5f4:	43400000 	.word	0x43400000
 800a5f8:	0003988e 	.word	0x0003988e
 800a5fc:	000bb679 	.word	0x000bb679
 800a600:	0800ab00 	.word	0x0800ab00
 800a604:	3ff00000 	.word	0x3ff00000
 800a608:	40080000 	.word	0x40080000
 800a60c:	0800aae0 	.word	0x0800aae0
 800a610:	0800aaf0 	.word	0x0800aaf0
 800a614:	460b      	mov	r3, r1
 800a616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a61a:	e5d7      	b.n	800a1cc <__ieee754_pow+0x354>
 800a61c:	f04f 0a01 	mov.w	sl, #1
 800a620:	e65e      	b.n	800a2e0 <__ieee754_pow+0x468>
 800a622:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a8f4 <__ieee754_pow+0xa7c>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	4630      	mov	r0, r6
 800a62a:	4639      	mov	r1, r7
 800a62c:	f7f5 fdfa 	bl	8000224 <__adddf3>
 800a630:	4642      	mov	r2, r8
 800a632:	e9cd 0100 	strd	r0, r1, [sp]
 800a636:	464b      	mov	r3, r9
 800a638:	4620      	mov	r0, r4
 800a63a:	4629      	mov	r1, r5
 800a63c:	f7f5 fdf0 	bl	8000220 <__aeabi_dsub>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a648:	f7f6 fa32 	bl	8000ab0 <__aeabi_dcmpgt>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	f47f ae00 	bne.w	800a252 <__ieee754_pow+0x3da>
 800a652:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a656:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a65a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a65e:	fa43 fa0a 	asr.w	sl, r3, sl
 800a662:	44da      	add	sl, fp
 800a664:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a668:	489d      	ldr	r0, [pc, #628]	@ (800a8e0 <__ieee754_pow+0xa68>)
 800a66a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a66e:	4108      	asrs	r0, r1
 800a670:	ea00 030a 	and.w	r3, r0, sl
 800a674:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a678:	f1c1 0114 	rsb	r1, r1, #20
 800a67c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a680:	fa4a fa01 	asr.w	sl, sl, r1
 800a684:	f1bb 0f00 	cmp.w	fp, #0
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	f04f 0200 	mov.w	r2, #0
 800a690:	bfb8      	it	lt
 800a692:	f1ca 0a00 	rsblt	sl, sl, #0
 800a696:	f7f5 fdc3 	bl	8000220 <__aeabi_dsub>
 800a69a:	4680      	mov	r8, r0
 800a69c:	4689      	mov	r9, r1
 800a69e:	4632      	mov	r2, r6
 800a6a0:	463b      	mov	r3, r7
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	f7f5 fdbd 	bl	8000224 <__adddf3>
 800a6aa:	2400      	movs	r4, #0
 800a6ac:	a37c      	add	r3, pc, #496	@ (adr r3, 800a8a0 <__ieee754_pow+0xa28>)
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	460d      	mov	r5, r1
 800a6b6:	f7f5 ff6b 	bl	8000590 <__aeabi_dmul>
 800a6ba:	4642      	mov	r2, r8
 800a6bc:	e9cd 0100 	strd	r0, r1, [sp]
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	f7f5 fdab 	bl	8000220 <__aeabi_dsub>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	4639      	mov	r1, r7
 800a6d2:	f7f5 fda5 	bl	8000220 <__aeabi_dsub>
 800a6d6:	a374      	add	r3, pc, #464	@ (adr r3, 800a8a8 <__ieee754_pow+0xa30>)
 800a6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6dc:	f7f5 ff58 	bl	8000590 <__aeabi_dmul>
 800a6e0:	a373      	add	r3, pc, #460	@ (adr r3, 800a8b0 <__ieee754_pow+0xa38>)
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	4689      	mov	r9, r1
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	f7f5 ff4f 	bl	8000590 <__aeabi_dmul>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	f7f5 fd93 	bl	8000224 <__adddf3>
 800a6fe:	4604      	mov	r4, r0
 800a700:	460d      	mov	r5, r1
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a70a:	f7f5 fd8b 	bl	8000224 <__adddf3>
 800a70e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a712:	4680      	mov	r8, r0
 800a714:	4689      	mov	r9, r1
 800a716:	f7f5 fd83 	bl	8000220 <__aeabi_dsub>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4620      	mov	r0, r4
 800a720:	4629      	mov	r1, r5
 800a722:	f7f5 fd7d 	bl	8000220 <__aeabi_dsub>
 800a726:	4642      	mov	r2, r8
 800a728:	4606      	mov	r6, r0
 800a72a:	460f      	mov	r7, r1
 800a72c:	464b      	mov	r3, r9
 800a72e:	4640      	mov	r0, r8
 800a730:	4649      	mov	r1, r9
 800a732:	f7f5 ff2d 	bl	8000590 <__aeabi_dmul>
 800a736:	a360      	add	r3, pc, #384	@ (adr r3, 800a8b8 <__ieee754_pow+0xa40>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	4604      	mov	r4, r0
 800a73e:	460d      	mov	r5, r1
 800a740:	f7f5 ff26 	bl	8000590 <__aeabi_dmul>
 800a744:	a35e      	add	r3, pc, #376	@ (adr r3, 800a8c0 <__ieee754_pow+0xa48>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f7f5 fd69 	bl	8000220 <__aeabi_dsub>
 800a74e:	4622      	mov	r2, r4
 800a750:	462b      	mov	r3, r5
 800a752:	f7f5 ff1d 	bl	8000590 <__aeabi_dmul>
 800a756:	a35c      	add	r3, pc, #368	@ (adr r3, 800a8c8 <__ieee754_pow+0xa50>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f7f5 fd62 	bl	8000224 <__adddf3>
 800a760:	4622      	mov	r2, r4
 800a762:	462b      	mov	r3, r5
 800a764:	f7f5 ff14 	bl	8000590 <__aeabi_dmul>
 800a768:	a359      	add	r3, pc, #356	@ (adr r3, 800a8d0 <__ieee754_pow+0xa58>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	f7f5 fd57 	bl	8000220 <__aeabi_dsub>
 800a772:	4622      	mov	r2, r4
 800a774:	462b      	mov	r3, r5
 800a776:	f7f5 ff0b 	bl	8000590 <__aeabi_dmul>
 800a77a:	a357      	add	r3, pc, #348	@ (adr r3, 800a8d8 <__ieee754_pow+0xa60>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f7f5 fd50 	bl	8000224 <__adddf3>
 800a784:	4622      	mov	r2, r4
 800a786:	462b      	mov	r3, r5
 800a788:	f7f5 ff02 	bl	8000590 <__aeabi_dmul>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	4640      	mov	r0, r8
 800a792:	4649      	mov	r1, r9
 800a794:	f7f5 fd44 	bl	8000220 <__aeabi_dsub>
 800a798:	4604      	mov	r4, r0
 800a79a:	460d      	mov	r5, r1
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	f7f5 fef4 	bl	8000590 <__aeabi_dmul>
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	e9cd 0100 	strd	r0, r1, [sp]
 800a7ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f7f5 fd33 	bl	8000220 <__aeabi_dsub>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7c2:	f7f6 f80f 	bl	80007e4 <__aeabi_ddiv>
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	463b      	mov	r3, r7
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	4649      	mov	r1, r9
 800a7d2:	f7f5 fedd 	bl	8000590 <__aeabi_dmul>
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	463b      	mov	r3, r7
 800a7da:	f7f5 fd23 	bl	8000224 <__adddf3>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	f7f5 fd1b 	bl	8000220 <__aeabi_dsub>
 800a7ea:	4642      	mov	r2, r8
 800a7ec:	464b      	mov	r3, r9
 800a7ee:	f7f5 fd17 	bl	8000220 <__aeabi_dsub>
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	493b      	ldr	r1, [pc, #236]	@ (800a8e4 <__ieee754_pow+0xa6c>)
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	f7f5 fd11 	bl	8000220 <__aeabi_dsub>
 800a7fe:	ec41 0b10 	vmov	d0, r0, r1
 800a802:	ee10 3a90 	vmov	r3, s1
 800a806:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a80a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a80e:	da30      	bge.n	800a872 <__ieee754_pow+0x9fa>
 800a810:	4650      	mov	r0, sl
 800a812:	f000 f87d 	bl	800a910 <scalbn>
 800a816:	ec51 0b10 	vmov	r0, r1, d0
 800a81a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a81e:	f7ff bbd2 	b.w	8009fc6 <__ieee754_pow+0x14e>
 800a822:	4c31      	ldr	r4, [pc, #196]	@ (800a8e8 <__ieee754_pow+0xa70>)
 800a824:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a828:	42a3      	cmp	r3, r4
 800a82a:	d91a      	bls.n	800a862 <__ieee754_pow+0x9ea>
 800a82c:	4b2f      	ldr	r3, [pc, #188]	@ (800a8ec <__ieee754_pow+0xa74>)
 800a82e:	440b      	add	r3, r1
 800a830:	4303      	orrs	r3, r0
 800a832:	d009      	beq.n	800a848 <__ieee754_pow+0x9d0>
 800a834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a838:	2200      	movs	r2, #0
 800a83a:	2300      	movs	r3, #0
 800a83c:	f7f6 f91a 	bl	8000a74 <__aeabi_dcmplt>
 800a840:	3800      	subs	r0, #0
 800a842:	bf18      	it	ne
 800a844:	2001      	movne	r0, #1
 800a846:	e42b      	b.n	800a0a0 <__ieee754_pow+0x228>
 800a848:	4642      	mov	r2, r8
 800a84a:	464b      	mov	r3, r9
 800a84c:	f7f5 fce8 	bl	8000220 <__aeabi_dsub>
 800a850:	4632      	mov	r2, r6
 800a852:	463b      	mov	r3, r7
 800a854:	f7f6 f922 	bl	8000a9c <__aeabi_dcmpge>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d1eb      	bne.n	800a834 <__ieee754_pow+0x9bc>
 800a85c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a8fc <__ieee754_pow+0xa84>
 800a860:	e6f7      	b.n	800a652 <__ieee754_pow+0x7da>
 800a862:	469a      	mov	sl, r3
 800a864:	4b22      	ldr	r3, [pc, #136]	@ (800a8f0 <__ieee754_pow+0xa78>)
 800a866:	459a      	cmp	sl, r3
 800a868:	f63f aef3 	bhi.w	800a652 <__ieee754_pow+0x7da>
 800a86c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a870:	e715      	b.n	800a69e <__ieee754_pow+0x826>
 800a872:	ec51 0b10 	vmov	r0, r1, d0
 800a876:	4619      	mov	r1, r3
 800a878:	e7cf      	b.n	800a81a <__ieee754_pow+0x9a2>
 800a87a:	491a      	ldr	r1, [pc, #104]	@ (800a8e4 <__ieee754_pow+0xa6c>)
 800a87c:	2000      	movs	r0, #0
 800a87e:	f7ff bb18 	b.w	8009eb2 <__ieee754_pow+0x3a>
 800a882:	2000      	movs	r0, #0
 800a884:	2100      	movs	r1, #0
 800a886:	f7ff bb14 	b.w	8009eb2 <__ieee754_pow+0x3a>
 800a88a:	4630      	mov	r0, r6
 800a88c:	4639      	mov	r1, r7
 800a88e:	f7ff bb10 	b.w	8009eb2 <__ieee754_pow+0x3a>
 800a892:	460c      	mov	r4, r1
 800a894:	f7ff bb5e 	b.w	8009f54 <__ieee754_pow+0xdc>
 800a898:	2400      	movs	r4, #0
 800a89a:	f7ff bb49 	b.w	8009f30 <__ieee754_pow+0xb8>
 800a89e:	bf00      	nop
 800a8a0:	00000000 	.word	0x00000000
 800a8a4:	3fe62e43 	.word	0x3fe62e43
 800a8a8:	fefa39ef 	.word	0xfefa39ef
 800a8ac:	3fe62e42 	.word	0x3fe62e42
 800a8b0:	0ca86c39 	.word	0x0ca86c39
 800a8b4:	be205c61 	.word	0xbe205c61
 800a8b8:	72bea4d0 	.word	0x72bea4d0
 800a8bc:	3e663769 	.word	0x3e663769
 800a8c0:	c5d26bf1 	.word	0xc5d26bf1
 800a8c4:	3ebbbd41 	.word	0x3ebbbd41
 800a8c8:	af25de2c 	.word	0xaf25de2c
 800a8cc:	3f11566a 	.word	0x3f11566a
 800a8d0:	16bebd93 	.word	0x16bebd93
 800a8d4:	3f66c16c 	.word	0x3f66c16c
 800a8d8:	5555553e 	.word	0x5555553e
 800a8dc:	3fc55555 	.word	0x3fc55555
 800a8e0:	fff00000 	.word	0xfff00000
 800a8e4:	3ff00000 	.word	0x3ff00000
 800a8e8:	4090cbff 	.word	0x4090cbff
 800a8ec:	3f6f3400 	.word	0x3f6f3400
 800a8f0:	3fe00000 	.word	0x3fe00000
 800a8f4:	652b82fe 	.word	0x652b82fe
 800a8f8:	3c971547 	.word	0x3c971547
 800a8fc:	4090cc00 	.word	0x4090cc00

0800a900 <fabs>:
 800a900:	ec51 0b10 	vmov	r0, r1, d0
 800a904:	4602      	mov	r2, r0
 800a906:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a90a:	ec43 2b10 	vmov	d0, r2, r3
 800a90e:	4770      	bx	lr

0800a910 <scalbn>:
 800a910:	b570      	push	{r4, r5, r6, lr}
 800a912:	ec55 4b10 	vmov	r4, r5, d0
 800a916:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a91a:	4606      	mov	r6, r0
 800a91c:	462b      	mov	r3, r5
 800a91e:	b991      	cbnz	r1, 800a946 <scalbn+0x36>
 800a920:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a924:	4323      	orrs	r3, r4
 800a926:	d03d      	beq.n	800a9a4 <scalbn+0x94>
 800a928:	4b35      	ldr	r3, [pc, #212]	@ (800aa00 <scalbn+0xf0>)
 800a92a:	4620      	mov	r0, r4
 800a92c:	4629      	mov	r1, r5
 800a92e:	2200      	movs	r2, #0
 800a930:	f7f5 fe2e 	bl	8000590 <__aeabi_dmul>
 800a934:	4b33      	ldr	r3, [pc, #204]	@ (800aa04 <scalbn+0xf4>)
 800a936:	429e      	cmp	r6, r3
 800a938:	4604      	mov	r4, r0
 800a93a:	460d      	mov	r5, r1
 800a93c:	da0f      	bge.n	800a95e <scalbn+0x4e>
 800a93e:	a328      	add	r3, pc, #160	@ (adr r3, 800a9e0 <scalbn+0xd0>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	e01e      	b.n	800a984 <scalbn+0x74>
 800a946:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a94a:	4291      	cmp	r1, r2
 800a94c:	d10b      	bne.n	800a966 <scalbn+0x56>
 800a94e:	4622      	mov	r2, r4
 800a950:	4620      	mov	r0, r4
 800a952:	4629      	mov	r1, r5
 800a954:	f7f5 fc66 	bl	8000224 <__adddf3>
 800a958:	4604      	mov	r4, r0
 800a95a:	460d      	mov	r5, r1
 800a95c:	e022      	b.n	800a9a4 <scalbn+0x94>
 800a95e:	460b      	mov	r3, r1
 800a960:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a964:	3936      	subs	r1, #54	@ 0x36
 800a966:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a96a:	4296      	cmp	r6, r2
 800a96c:	dd0d      	ble.n	800a98a <scalbn+0x7a>
 800a96e:	2d00      	cmp	r5, #0
 800a970:	a11d      	add	r1, pc, #116	@ (adr r1, 800a9e8 <scalbn+0xd8>)
 800a972:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a976:	da02      	bge.n	800a97e <scalbn+0x6e>
 800a978:	a11d      	add	r1, pc, #116	@ (adr r1, 800a9f0 <scalbn+0xe0>)
 800a97a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a97e:	a31a      	add	r3, pc, #104	@ (adr r3, 800a9e8 <scalbn+0xd8>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fe04 	bl	8000590 <__aeabi_dmul>
 800a988:	e7e6      	b.n	800a958 <scalbn+0x48>
 800a98a:	1872      	adds	r2, r6, r1
 800a98c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a990:	428a      	cmp	r2, r1
 800a992:	dcec      	bgt.n	800a96e <scalbn+0x5e>
 800a994:	2a00      	cmp	r2, #0
 800a996:	dd08      	ble.n	800a9aa <scalbn+0x9a>
 800a998:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a99c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a9a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9a4:	ec45 4b10 	vmov	d0, r4, r5
 800a9a8:	bd70      	pop	{r4, r5, r6, pc}
 800a9aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a9ae:	da08      	bge.n	800a9c2 <scalbn+0xb2>
 800a9b0:	2d00      	cmp	r5, #0
 800a9b2:	a10b      	add	r1, pc, #44	@ (adr r1, 800a9e0 <scalbn+0xd0>)
 800a9b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9b8:	dac1      	bge.n	800a93e <scalbn+0x2e>
 800a9ba:	a10f      	add	r1, pc, #60	@ (adr r1, 800a9f8 <scalbn+0xe8>)
 800a9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9c0:	e7bd      	b.n	800a93e <scalbn+0x2e>
 800a9c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a9c6:	3236      	adds	r2, #54	@ 0x36
 800a9c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a9cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa08 <scalbn+0xf8>)
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	e7d4      	b.n	800a984 <scalbn+0x74>
 800a9da:	bf00      	nop
 800a9dc:	f3af 8000 	nop.w
 800a9e0:	c2f8f359 	.word	0xc2f8f359
 800a9e4:	01a56e1f 	.word	0x01a56e1f
 800a9e8:	8800759c 	.word	0x8800759c
 800a9ec:	7e37e43c 	.word	0x7e37e43c
 800a9f0:	8800759c 	.word	0x8800759c
 800a9f4:	fe37e43c 	.word	0xfe37e43c
 800a9f8:	c2f8f359 	.word	0xc2f8f359
 800a9fc:	81a56e1f 	.word	0x81a56e1f
 800aa00:	43500000 	.word	0x43500000
 800aa04:	ffff3cb0 	.word	0xffff3cb0
 800aa08:	3c900000 	.word	0x3c900000

0800aa0c <with_errno>:
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	ed2d 8b02 	vpush	{d8}
 800aa12:	eeb0 8a40 	vmov.f32	s16, s0
 800aa16:	eef0 8a60 	vmov.f32	s17, s1
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	f7ff f872 	bl	8009b04 <__errno>
 800aa20:	eeb0 0a48 	vmov.f32	s0, s16
 800aa24:	eef0 0a68 	vmov.f32	s1, s17
 800aa28:	ecbd 8b02 	vpop	{d8}
 800aa2c:	6004      	str	r4, [r0, #0]
 800aa2e:	bd10      	pop	{r4, pc}

0800aa30 <xflow>:
 800aa30:	4603      	mov	r3, r0
 800aa32:	b507      	push	{r0, r1, r2, lr}
 800aa34:	ec51 0b10 	vmov	r0, r1, d0
 800aa38:	b183      	cbz	r3, 800aa5c <xflow+0x2c>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa40:	e9cd 2300 	strd	r2, r3, [sp]
 800aa44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa48:	f7f5 fda2 	bl	8000590 <__aeabi_dmul>
 800aa4c:	ec41 0b10 	vmov	d0, r0, r1
 800aa50:	2022      	movs	r0, #34	@ 0x22
 800aa52:	b003      	add	sp, #12
 800aa54:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa58:	f7ff bfd8 	b.w	800aa0c <with_errno>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	460b      	mov	r3, r1
 800aa60:	e7ee      	b.n	800aa40 <xflow+0x10>
 800aa62:	0000      	movs	r0, r0
 800aa64:	0000      	movs	r0, r0
	...

0800aa68 <__math_uflow>:
 800aa68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aa70 <__math_uflow+0x8>
 800aa6c:	f7ff bfe0 	b.w	800aa30 <xflow>
 800aa70:	00000000 	.word	0x00000000
 800aa74:	10000000 	.word	0x10000000

0800aa78 <__math_oflow>:
 800aa78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aa80 <__math_oflow+0x8>
 800aa7c:	f7ff bfd8 	b.w	800aa30 <xflow>
 800aa80:	00000000 	.word	0x00000000
 800aa84:	70000000 	.word	0x70000000

0800aa88 <_init>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	bf00      	nop
 800aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8e:	bc08      	pop	{r3}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4770      	bx	lr

0800aa94 <_fini>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	bf00      	nop
 800aa98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9a:	bc08      	pop	{r3}
 800aa9c:	469e      	mov	lr, r3
 800aa9e:	4770      	bx	lr
